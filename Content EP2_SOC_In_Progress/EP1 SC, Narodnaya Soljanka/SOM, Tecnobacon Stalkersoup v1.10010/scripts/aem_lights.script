-- TB3D 1.0.9.9.8.7, optimized db.actor, redone
function my_ver() return "1.0.9.9.8.7" end

local is_shadows = TB3D_Modders.aem_light_shadows

function v3f(x,y,z)
	return vector():set(x,y,z)
end

function lights_on(style)							-- set arena lights to style
	if TB3D_Modders.aem_dim_ambient then			--109987
		local arena_light = get_console():get_float('r2_sun_lumscale')
		local arena_amb = get_console():get_float('r2_sun_lumscale_amb')
		amk.save_variable("sunlow", arena_amb)
		amk.save_variable("sunhigh", arena_light)
		arena_amb = TB3D_Modders.aem_light_ambient or 0.25
		arena_light = TB3D_Modders.aem_light_global or 0.57
		get_console():execute("r2_sun_lumscale "..utils.to_str(arena_light))
		get_console():execute("r2_sun_lumscale_amb "..utils.to_str(arena_amb))
	end
	if style == 6 then
		style = math.random(1,5)
	end
	if style == 1 then					-- default arena lights plus center row bulbs
		turn_arena_lamps_on()
		center_row_static()
	elseif style == 2 then				-- replace arena lights
		turn_arena_lamps_off()
		all_bright()
	elseif style == 3 then				-- staggered bright/dim arena lights
		turn_arena_lamps_off()
		all_staggered()
	elseif style == 4 then				-- arena lights and center row emergency lights
		turn_arena_lamps_on()
		center_rotating()
	elseif style == 5 then				-- center row emergency lights
		turn_arena_lamps_off()
		center_rotating()
	else								-- use defaults
		turn_arena_lamps_on()
	end
end

function lights_off(style)				-- turn them all off
	turn_arena_lamps_off()
	remove_all_aem_lamps()				-- insure old ones are gone
end

---------------------------------------------------------------------------------------------------
-- The first method
-- makes lighter in the center but the sides remain dark
-- three lamps along the center of the arena lights are attached to the tap - it's not very 'nice'
-------
function center_row_static()
	create_lamp(v3f(151.78, -13.28,  89.7),76465,1168, nil, "physics\\light\\lampa01_v", 0.4, is_shadows)
	create_lamp(v3f(151.78, -13.28, 104.0),76465,1168, nil, "physics\\light\\lampa01_v", 0.4, is_shadows)
	create_lamp(v3f(151.78, -13.28, 119.1),76465,1168, nil, "physics\\light\\lampa01_v", 0.4, is_shadows)
end

---------------------------------------------------------------------------------------------------
-- the second method, the substitution of lamps
-- disable all the arena lights and in their place, create new
-------
function all_bright()
	create_lamp(v3f(156.786255,-12.37,80.203362),76465,1168, nil, "physics\\light\\lamp_mike_2_glass", 0.3, is_shadows)
	create_lamp(v3f(146.552338,-12.37,80.203362),76465,1168, nil, "physics\\light\\lamp_mike_2_glass", 0.3, is_shadows)
	create_lamp(v3f(156.786255,-12.37,95.740120),76465,1168, nil, "physics\\light\\lamp_mike_2_glass", 0.3, is_shadows)
	create_lamp(v3f(146.552338,-12.37,95.740120),76465,1168, nil, "physics\\light\\lamp_mike_2_glass", 0.3, is_shadows)
	create_lamp(v3f(156.786255,-12.37,111.093575),76465,1168, nil, "physics\\light\\lamp_mike_2_glass", 0.3, is_shadows)
	create_lamp(v3f(146.552338,-12.37,111.093575),76465,1168, nil, "physics\\light\\lamp_mike_2_glass", 0.3, is_shadows)
	create_lamp(v3f(156.786255,-12.37,125.917412),76465,1168, nil, "physics\\light\\lamp_mike_2_glass", 0.3, is_shadows)
	create_lamp(v3f(146.552338,-12.37,125.917412),76465,1168, nil, "physics\\light\\lamp_mike_2_glass", 0.3, is_shadows)
end

---------------------------------------------------------------------------------------------------
-- third method
---------------------------------------------------------------------------------------------------
function all_staggered()
	create_lamp(v3f(151.78, -13.28,  89.7),76465,1168, nil, "physics\\light\\lampa01_v", 0.4, is_shadows)
	create_lamp(v3f(151.78, -13.28, 104.0),76465,1168, nil, "physics\\light\\lampa01_v", 0.4, is_shadows)
	create_lamp(v3f(151.78, -13.28, 119.1),76465,1168, nil, "physics\\light\\lampa01_v", 0.4, is_shadows)
	create_lamp(v3f(156.786255,-10.79,80.203362),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_big_1_glass", 0.3, is_shadows)
	create_lamp(v3f(146.552338,-10.79,80.203362),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_big_1_glass", 0.3, is_shadows)
	create_lamp(v3f(156.786255,-10.79,95.740120),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_big_1_glass", 0.3, is_shadows)
	create_lamp(v3f(146.552338,-10.79,95.740120),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_big_1_glass", 0.3, is_shadows)
	create_lamp(v3f(156.786255,-10.79,111.093575),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_big_1_glass", 0.3, is_shadows)
	create_lamp(v3f(146.552338,-10.79,111.093575),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_big_1_glass", 0.3, is_shadows)
	create_lamp(v3f(156.786255,-10.79,125.917412),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_big_1_glass", 0.3, is_shadows)
	create_lamp(v3f(146.552338,-10.79,125.917412),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_big_1_glass", 0.3, is_shadows)
end

---------------------------------------------------------------------------------------------------
-- fourth method - Emergency lighting
---------------------------------------------------------------------------------------------------
function center_rotating()
	create_lamp(v3f(151.78, -13.28,  87.3),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_alarm_1", 1.0, is_shadows, -96238)
	create_lamp(v3f(151.78, -13.28, 104.0),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_alarm_1", 1.0, is_shadows, -96238)
	create_lamp(v3f(151.78, -13.28, 126.7),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_alarm_1", 1.0, is_shadows, -96238)
end

---------------------------------------------------------------------------------------------------
-- arena sign lamps
---------------------------------------------------------------------------------------------------
function shield_on()
	remove_sign_lamps()
	sign_lights_on()
end

function shield_off()
	remove_sign_lamps()
	sign_lights_off()
end

function remove_sign_lamps()
	for id=first_object, last_object do
		obj = alife():object(id)
		if obj then
			if string.find(obj:name(), "tb3d_aem_sign") then
				if TB3D_Modders.use_info_message then TB3D_Services.packet_alert("remove lamp["..obj:name().."]") end
				alife():release(obj, true)
			end
		end
	end
end

function sign_lights_on()
	if TB3D_Modders.use_info_message then TB3D_Services.packet_alert("aem sign on") end
	create_lamp(v3f(163.516,9.00,74.10),40163,1180, nil, "physics\\light\\lampa_walls_01", 1.0, is_shadows, -8878179, "tb3d_aem_sign")
	create_lamp(v3f(159.817,9.00,74.10),40163,1180, nil, "physics\\light\\lampa_walls_01", 1.0, is_shadows, -8878179, "tb3d_aem_sign")
end
function sign_lights_off()
	if TB3D_Modders.use_info_message then TB3D_Services.packet_alert("aem sign off") end
	create_lamp(v3f(163.516,9.00,74.10),40163,1180, nil, "physics\\light\\lampa_walls_01", 0, is_shadows, nil, "tb3d_aem_sign")
	create_lamp(v3f(159.817,9.00,74.10),40163,1180, nil, "physics\\light\\lampa_walls_01", 0, is_shadows, nil, "tb3d_aem_sign")
end

---------------------------------------------------------------------------------------------------
--restoration of lighting after the battle---------------------------------------------------------------------------------------------------

function lights_reset()
	remove_all_aem_lamps()
	--if has_alife_info("aem_megafone") then
		--shield_on()
		--turn_arena_lamps_on()
	--end
end

---------------------------------------------------------------------------------------------------
-- lighting in the battles at the time
---------------------------------------------------------------------------------------------------
	
-------
-- lighting when foul
-------
function foul()
	remove_all_aem_lamps()
	create_lamp(v3f(151.78, -13.28,  93.0),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_alarm_1", 1.0, is_shadows, -8454144)
	create_lamp(v3f(151.78, -13.28, 104.0),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_alarm_1", 1.0, is_shadows, -8454144)
	create_lamp(v3f(151.78, -13.28, 120.5),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_alarm_1", 1.0, is_shadows, -8454144)
end

-------
-- lighting with a draw
-------
function draw()
	remove_all_aem_lamps()
	create_lamp(v3f(151.78, -13.28,  93.0),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_alarm_1", 1.0, is_shadows, -96238)
	create_lamp(v3f(151.78, -13.28, 104.0),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_alarm_1", 1.0, is_shadows, -96238)
	create_lamp(v3f(151.78, -13.28, 120.5),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_alarm_1", 1.0, is_shadows, -96238)
end

-------
-- lighting with the victory
-------
function win()
	remove_all_aem_lamps()
	create_lamp(v3f(151.78, -13.28,  93.0),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_alarm_1", 1.0, is_shadows, -15435776)
	create_lamp(v3f(151.78, -13.28, 104.0),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_alarm_1", 1.0, is_shadows, -15435776)
	create_lamp(v3f(151.78, -13.28, 120.5),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_alarm_1", 1.0, is_shadows, -15435776)
end

---------------------------------------------------------------------------------------------------
-- lighting in the sweepstakes
---------------------------------------------------------------------------------------------------

-------
-- victory  team1
-------
function win_team1()
	remove_all_aem_lamps()
	create_lamp(v3f(151.78, -13.28,  93.0),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_alarm_1", 0.8, is_shadows, -8454144)
	create_lamp(v3f(151.78, -13.28, 120.5),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_alarm_1", 0.8, is_shadows, -15435776)
end

-------
-- victory  team2
-------
function win_team2()
	remove_all_aem_lamps()
	create_lamp(v3f(151.78, -13.28,  93.0),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_alarm_1", 0.8, is_shadows, -15435776)
	create_lamp(v3f(151.78, -13.28, 120.5),76465,1168, v3f(0,0,3.14), "physics\\light\\new_light\\light_alarm_1", 0.8, is_shadows, -8454144)
end

---------------------------------------------------------------------------------------------------
-- auxiliary functions
---------------------------------------------------------------------------------------------------

-------
-- returns lamp id of stake room
-------
function get_stake_room_lamp()
	local id, obj
	for id=first_object, last_object do
		obj = level.object_by_id(id)
		if obj ~= nil and
		   obj:section() == "lights_hanging_lamp" and
		   obj:name() == "light_alarm_glass_0017"
		then
			return id
		end
	end
	return -1
end

-------
-- turn on the lamp (light) is used "C++ class hanging_lamp : CGameObject"
-------
function turn_lamp_on(id)
	local obj = level.object_by_id(id)
	if obj ~= nil then
		local hl = obj:get_hanging_lamp()
		if hl ~= nil then
			hl:turn_on()
		end
	end
end

-------
-- turn off the lamp (light) is used "C++ class hanging_lamp : CGameObject"
-------
function turn_lamp_off(id)
	local obj = level.object_by_id(id)
	if obj ~= nil then
		local hl = obj:get_hanging_lamp()
		if hl ~= nil then
			hl:turn_off()
		end
	end
end

-------
-- arena lamps in the all.spawn _0000 thru _0007
-------
function turn_arena_lamps_on()
	local id, obj
	for id=first_object, last_object do
		obj = level.object_by_id(id)							--only returns objects for active level
		if obj ~= nil and
		   obj:section() == "lights_hanging_lamp" and
		   string.find(obj:name(), "light_big_glass_000")
		then
			--TB3D_Services.packet_alert("arena: lamp on["..obj:name().."]")
			local hl = obj:get_hanging_lamp()
			if hl ~= nil then
				hl:turn_on()
			end
		end
	end
end

-------
-- turn off all the stage lights
-------
function turn_arena_lamps_off()
	local id, obj, name, hl
	for id=first_object, last_object do
		obj = level.object_by_id(id)
		if obj ~= nil and
		   obj:section() == "lights_hanging_lamp" and
		   string.find(obj:name(), "light_big_glass_000")
		then
			--TB3D_Services.packet_alert("arena: lamp off["..obj:name().."]")
			local hl = obj:get_hanging_lamp()
			if hl ~= nil then
				hl:turn_off()
			end
		end
	end
end

-------
-- remove all online lamp mode ("aem_lamp")
-------
function remove_all_aem_lamps()
	local id, obj
	for id=first_object, last_object do
		obj = level.object_by_id(id)
		if obj ~= nil and obj:section() == "aem_lamp" then
			alife():release(alife():object(id), true)
		end
	end
	if TB3D_Modders.aem_dim_ambient then
		local tamt = amk.load_variable("sunhigh", -1)
		if tamt ~= -1 then
			get_console():execute("r2_sun_lumscale "..utils.to_str(tamt))					--109987
			amk.del_variable("sunhigh")
		end
		local tlow = amk.load_variable("sunlow", -1)
		if tlow ~= -1 then
			get_console():execute("r2_sun_lumscale_amb "..utils.to_str(tlow))					--109987
			amk.del_variable("sunlow")
		end
	end
end

-------
-- creation of the lamp
-------
function create_lamp(pos, lvid, gvid, dir, visual, brightness, shadow, color, alt_name)
	--local lvid = 76465
	--local gvid = 1168
	local light_flags = 56				-- 0x38==56, 0x1c==28
	if shadow then light_flags = light_flags + 2 end
	local packet = net_packet()
	packet:w_u16(gvid)
	packet:w_float(0.0)				-- distance
	packet:w_s32(1)
	packet:w_s32(lvid)
	packet:w_s32(-70)				-- 0xffffffba
	packet:w_stringZ("")
	packet:w_s32(-1)
	packet:w_s32(-1)
	packet:w_stringZ(visual)
	packet:w_u8(0)
	packet:w_stringZ("$editor")
	packet:w_u8(0)
	packet:w_u16(-1)
	if color ~= nil then
		packet:w_s32(color)
		packet:w_float(brightness)
		packet:w_stringZ("")
	else
		packet:w_s32(-1)
		packet:w_float(brightness)
		packet:w_stringZ("light\\light_omni_white_idle")
	end
	packet:w_float(14.0)
	packet:w_u16(light_flags)
	packet:w_stringZ("$editor")
	packet:w_stringZ("link")
	packet:w_float(100.0)
	packet:w_float(0.1)
	packet:w_float(4.0)
	packet:w_float(0.3)
	packet:w_stringZ("")
	packet:w_stringZ("")
	packet:w_stringZ("bone_lamp")
	packet:w_float(1.0)			-- make the beam wider than the standard
	packet:w_stringZ("")
	packet:w_float(0.7)
	packet:w_stringZ("bone_omni")
	local se_obj
	if alt_name ~= nil then
		se_obj = alife():create(alt_name, pos, lvid, gvid)
	else
		se_obj = alife():create("aem_lamp", pos, lvid, gvid)
	end
	se_obj:STATE_Read(packet, packet:w_tell())
	if dir ~= nil then
		se_obj.direction = vector():set(dir)
	end
	return se_obj
end

--[[
function print_lamp(se_obj)
	local packet = net_packet()
	cse_alife_object_hanging_lamp.STATE_Write(se_obj, packet)

	local game_vertex_id	= packet:r_u16()
	local distance		= packet:r_float()
	local direct_control	= packet:r_s32()
	local level_vertex_id	= packet:r_s32()
	local object_flags	= packet:r_s32()
	local custom_data	= packet:r_stringZ()
	local story_id		= packet:r_s32()
	local spawn_story_id	= packet:r_s32()
	local visual_name	= packet:r_stringZ()
	local visual_flags	= packet:r_u8()
	local skeleton_name	= packet:r_stringZ()
	local skeleton_flags	= packet:r_u8()
	local source_id		= packet:r_u16()
	local main_color	= packet:r_s32()
	local main_brightness	= packet:r_float()
	local main_color_animator = packet:r_stringZ()
	local main_range	= packet:r_float()
	local light_flags	= packet:r_u16()
	local lamp_editor	= packet:r_stringZ()
	local lamp_fixed_bones	= packet:r_stringZ()
	local health		= packet:r_float()
	local main_virtual_size	= packet:r_float()
	local ambient_radius	= packet:r_float()
	local ambient_power	= packet:r_float()
	local ambient_texture	= packet:r_stringZ()
	local main_texture	= packet:r_stringZ()
	local main_bone		= packet:r_stringZ()
	local main_cone_angle	= packet:r_float()
	local glow_texture	= packet:r_stringZ()
	local glow_radius	= packet:r_float()
	local ambient_bone	= packet:r_stringZ()

	printf("hanging_lamp('%s')", se_obj:name())
	printf(" cse_alife_object")
	printf("  gvid=%d", game_vertex_id)
	printf("  dist=%f", distance)
	printf("  ctrl=%d", direct_control)
	printf("  lvid=%d", level_vertex_id)
	printf("  flags=%x", object_flags)
	printf("  custom=%s", custom_data)
	printf("  sid=%d", story_id)
	printf("  ssid=%d", spawn_story_id)
	printf(" cse_visual")
	printf("  visual_name=%s", visual_name)
	printf("  visual_flags=%x", visual_flags)
	printf(" cse_ph_skeleton")
	printf("  skeleton_name=%s", skeleton_name)
	printf("  skeleton_flags=%x", skeleton_flags)
	printf("  source_id=%x", source_id)
	printf(" cse_alife_object_hanging_lamp")
	printf("  main_color=%x", main_color)
	printf("  main_brightness=%f", main_brightness)
	printf("  main_color_animator=%s", main_color_animator)
	printf("  main_range=%f", main_range)
	printf("  light_flags=%x", light_flags)
	printf("  lamp_editor=%s", lamp_editor)
	printf("  lamp_fixed_bones=%s", lamp_fixed_bones)
	printf("  health=%f", health)
	printf("  main_virtual_size=%f", main_virtual_size)
	printf("  ambient_radius=%f", ambient_radius)
	printf("  ambient_power=%f", ambient_power)
	printf("  ambient_texture=%s", ambient_texture)
	printf("  main_texture=%s", main_texture)
	printf("  main_bone=%s", main_bone)
	printf("  main_cone_angle=%f", main_cone_angle)
	printf("  glow_texture=%s", glow_texture)
	printf("  glow_radius=%f", glow_radius)
	printf("  ambient_bone=%s", ambient_bone)
end
]]--

---------------------------------------------------------------------------------------------------
-- server class lamps
---------------------------------------------------------------------------------------------------

class "se_lamp" (cse_alife_object_hanging_lamp)
function se_lamp:__init(section) super(section)
	--printf("se_lamp:__init")
end

-- to set the right direction rather repack a first call
--
function se_lamp:STATE_Write(packet)
	if self.direction ~= nil then
		repack_abstract(packet, self.direction)
		self.direction = nil
	end
	cse_alife_object_hanging_lamp.STATE_Write(self, packet)
end

-- repackaging cse_abstract
function repack_abstract(packet, dir)
	--printf("repack_abstract(dir=%f,%f,%f)", dir.x, dir.y, dir.z)
	local r_tell = packet:r_tell()
	--printf("tell=%d,%d", packet:w_tell(), packet:r_tell())
	--printf("unpack se_abstract:")
	packet:r_seek(0)
	local dummy16		= packet:r_u16()
	local section_name	= packet:r_stringZ()
	local name		= packet:r_stringZ()
	local s_gameid		= packet:r_u8()
	local s_rp		= packet:r_u8()
	local position		= packet:r_vec3()
	local direction		= packet:r_vec3()
	local respawn_time	= packet:r_u16()
	local unknown_id	= packet:r_u16()
	local parent_id		= packet:r_u16()
	local phantom_id	= packet:r_u16()
	local s_flags		= packet:r_u16()
	local version		= packet:r_u16()
	local script_version	= packet:r_u16()
	local unused_pad	= packet:r_u16()
	local unused_ext	= {}			-- Another obscurity
	if unused_pad > 0 then				-- it is possible that sometimes it is not true
		local num
		for num=1, unused_pad do
			unused_ext[num] = packet:r_u8()
		end
	end
	local spawn_id		= packet:r_u16()
	local extended_size	= packet:r_u16()
	--printf("tell=%d,%d", packet:w_tell(), packet:r_tell())
	--printf("pack se_abstract:")
	direction = dir
	packet:w_begin(dummy16)
	packet:w_stringZ(section_name)
	packet:w_stringZ(name)
	packet:w_u8(s_gameid)
	packet:w_u8(s_rp)
	packet:w_vec3(position)
	packet:w_vec3(direction)
	packet:w_u16(respawn_time)
	packet:w_u16(unknown_id)
	packet:w_u16(parent_id)
	packet:w_u16(phantom_id)
	packet:w_u16(s_flags)
	packet:w_u16(version)
	packet:w_u16(script_version)
	packet:w_u16(unused_pad)
	if unused_pad > 0 then
		local num
		for num=1, unused_pad do
			 packet:w_u8(unused_ext[num])
		end
	end
	packet:w_u16(spawn_id)
	packet:w_u16(extended_size)
	--printf("tell=%d,%d", packet:w_tell(), packet:r_tell())
	packet:r_seek(r_tell)
	--printf("tell=%d,%d", packet:w_tell(), packet:r_tell())
end

---------------------------------------------------------------------------------------------------
-- results of the function print_lamp
---------------------------------------------------------------------------------------------------
-- hanging_lamp('light_big_glass_0005')		one of the lights in the arena
--  cse_alife_object
--   gvid=1168
--   dist=0.000000
--   ctrl=1
--   lvid=76465
--   flags=ffffffba
--   custom=[collide]__ignore_static__
--   sid=-1
--   ssid=-1
--  cse_visual
--   visual_name=physics\light\new_light\light_big_1_glass
--   visual_flags=0
--  cse_ph_skeleton
--   skeleton_name=$editor
--   skeleton_flags=0
--   source_id=ffff
--  cse_alife_object_hanging_lamp
--   main_color=ffffffff
--   main_brightness=1.500000
--   main_color_animator=light\light_omni_white_idle
--   main_range=11.000000
--   light_flags=3a
--   cse_alife_object_hanging_lamp__unk1_sz=$editor
--   lamp_fixed_bones=link
--   health=100.000000
--   main_virtual_size=0.100000
--   ambient_radius=4.000000
--   ambient_power=0.300000
--   ambient_texture=
--   main_texture=
--   main_bone=bone_lamp
--   main_cone_angle=1.308997
--   glow_texture=
--   glow_radius=0.700000
--   ambient_bone=bone_omni
---------------------------------------------------------------------------------------------------
-- hanging_lamp('aem_lights27428')		Immediately after you create an object (a light without a source, is directed forward, ie, along x)
--  cse_alife_object
--   gvid=1180
--   dist=0.000000
--   ctrl=1
--   lvid=40037
--   flags=ffffffba
--   custom=
--   sid=-1
--   ssid=-1
--  cse_visual
--   visual_name=
--   visual_flags=0
--  cse_ph_skeleton
--   skeleton_name=$editor
--   skeleton_flags=0
--   source_id=ffff
--  cse_alife_object_hanging_lamp
--   main_color=ffffffff
--   main_brightness=1.000000
--   main_color_animator=
--   main_range=10.000000
--   light_flags=1c
--   cse_alife_object_hanging_lamp__unk1_sz=$editor
--   lamp_fixed_bones=
--   health=100.000000
--   main_virtual_size=0.100000
--   ambient_radius=10.000000
--   ambient_power=0.100000
--   ambient_texture=
--   main_texture=
--   main_bone=
--   main_cone_angle=2.094395
--   glow_texture=
--   glow_radius=0.700000
--   ambient_bone=
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
-- arena lamp
---------------------------------------------------------------------------------------------------
-- name='light_big_glass_0007'_pos=156.786255,-10.788004,80.203362
-- name='light_big_glass_0000'_pos=146.552338,-10.788004,80.203362
-- name='light_big_glass_0001'_pos=156.786255,-10.788004,95.740120
-- name='light_big_glass_0002'_pos=146.552338,-10.788004,95.740120
-- name='light_big_glass_0003'_pos=156.786255,-10.788004,111.093575
-- name='light_big_glass_0004'_pos=146.552338,-10.788004,111.093575
-- name='light_big_glass_0005'_pos=156.786255,-10.788004,125.917412
-- name='light_big_glass_0006'_pos=146.552338,-10.788004,125.917412

---------------------------------------------------------------------------------------------------
-- lamps are available in the game (visual)
---------------------------------------------------------------------------------------------------
-- physics\light\
-- lamp_mike_2_glass		- naked light bulb, is directed downward
-- lampa01_alarm		- red spinning in the vertical plane of light
-- lampa01_ugl			- miniprozhektor directed at an angle of 45 forwards and upwards
-- lampa01_ugl_2		- similarly
-- lampa01_ugl_3		- similarly
-- lampa01_v			- lamp with an iron foot downward
-- lampa_01_on			- table-lamp
-- lampa_abajur_01		- lamp on a chain with metal 'obozhurom' shines down
-- lampa_abajur_02		- similarly
-- lampa_abajur_03		- similarly
-- lampa_galogen_1_ph		- ...
-- lampa_galogen_4		- ...
-- lampa_provod_01		- light on the chain, shining down
-- lampa_provod_02		- similarly
-- lampa_walls_01		- bulb with L-shaped bracket to the wall, shining down
-- light_koster			- light without the object in the upper
-- light_torch			- flashlight
-- projector_01_nolight		- ...
-- rail_svetofor_blue		- traffic lights
-- rope_projector_01		- spotlight
-- physics\light\new_light\
-- light_alarm_1		- whirling in a horizontal plane Lamp
-- light_alarm_glass		- lamp shines in the upper
-- light_alarm_white_glass	- similarly
-- light_big_1_glass		- similarly
-- light_big_2_glass		- similarly
-- light_controll_monolith_glass - something big, shining in the upper
-- light_galogen_1_glass	- fluorescent lighting
-- light_galogen_rtut_1_glass	- the same, only a blue
-- light_osoznanie_glass	- again, something big, shining in the upper
-- light_sharnir_1		- bulb with L-shaped bracket to the floor, shining in the direction of
-- light_uglovaya_1_glass	- bulb with some corners of the world aside, and in the upper
-- light_white_glass		- light shines in the side and top
-- light_wire_1_glass		- light shines in the upper
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
-- main_color_animator - any flashing, lie in the file "lanims.xr"
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
-- Exposure to lamps of acdc_21aug from bardak
---------------------------------------------------------------------------------------------------
--package cse_alife_object_hanging_lamp;
--use strict;
--use constant flPhysic		=> 0x0001;
--use constant flCastShadow	=> 0x0002;
--use constant flR1		=> 0x0004;
--use constant flR2		=> 0x0008;
--use constant flTypeSpot	=> 0x0010;
--use constant flPointAmbient	=> 0x0020;
--use constant properties_info => (
--	{ name => 'main_color',		type => 'h32',	default => 0x00ffffff },# 0x134
--	{ name => 'main_brightness',	type => 'f32',	default => 0.0 },	# 0x140
--	{ name => 'main_color_animator',type => 'sz',	default => '' },	# 0x144
--	{ name => 'main_range',		type => 'f32',	default => 0.0 },	# 0x14c
--	{ name => 'light_flags',	type => 'h16',	default => 0 },		# 0x138
--	{ name => 'cse_alife_object_hanging_lamp__unk1_sz',	type => 'sz',	default => '$editor' },	# 0xe0
--	{ name => 'lamp_fixed_bones',	type => 'sz',	default => '' },	# 0x15c
--	{ name => 'health',		type => 'f32',	default => 1.0 },	# 0x178
--	{ name => 'main_virtual_size',	type => 'f32',	default => 0.0 },	# 0x150
--	{ name => 'ambient_radius',	type => 'f32',	default => 0.0 },	# 0x164
--	{ name => 'ambient_power',	type => 'f32',	default => 0.0 },	# 0x168
--	{ name => 'ambient_texture',	type => 'sz',	default => '' },	# 0x16c
--	{ name => 'main_texture',	type => 'sz',	default => '' },	# 0x148
--	{ name => 'main_bone',		type => 'sz',	default => '' },	# 0x158
--	{ name => 'main_cone_angle',	type => 'f32',	default => 0.0 },	# 0x160
--	{ name => 'glow_texture',	type => 'sz',	default => '' },	# 0x170
--	{ name => 'glow_radius',	type => 'f32',	default => 0.0 },	# 0x174
--	{ name => 'ambient_bone',	type => 'sz',	default => '' },	# 0x154
--);
--sub state_read {
--	cse_alife_dynamic_object_visual::state_read(@_);
--	cse_ph_skeleton::state_read(@_);
--	$_[1]->unpack_properties($_[0], properties_info);
--}
--
--package cse_alife_dynamic_object_visual;
--use strict;
--sub state_read {
--	cse_alife_object::state_read(@_);
--	cse_visual::state_read(@_);
--}
--
--package cse_alife_object;
--use strict;
--use constant flUseSwitches		=> 0x00000001;
--use constant flSwitchOnline		=> 0x00000002;
--use constant flSwitchOffline		=> 0x00000004;
--use constant flInteractive		=> 0x00000008; 
--use constant flVisibleForAI		=> 0x00000010;
--use constant flUsefulForAI		=> 0x00000020;
--use constant flOfflineNoMove		=> 0x00000040;
--use constant flUsedAI_Locations	=> 0x00000080;
--use constant flUseGroupBehaviour	=> 0x00000100;
--use constant flCanSave		=> 0x00000200;
--use constant flVisibleForMap		=> 0x00000400;
--use constant flUseSmartTerrains	=> 0x00000800;
--use constant flCheckForSeparator	=> 0x00001000;
--use constant flCorpseRemoval		=> 0x00002000;
--use constant properties_info => (
--	{ name => 'game_vertex_id',	type => 'u16',	default => 0xffff },	# 0xa4
--	{ name => 'distance',		type => 'f32',	default => 0.0 },	# 0xa8
--	{ name => 'direct_control',	type => 'u32',	default => 1 },		# 0xad
--	{ name => 'level_vertex_id',	type => 'u32',	default => 0xffffffff },# 0xb0
--	{ name => 'object_flags',	type => 'h32',	default => 0 },		# 0xb4
--	{ name => 'custom_data',	type => 'sz',	default => '' },	# 0x7c
--	{ name => 'story_id',		type => 's32',	default => -1 },	# 0xb8
--	{ name => 'spawn_story_id',	type => 's32',	default => -1 },	# 0xbc
--);
--
--package cse_visual;
--use strict;
--use constant flObstacle	=> 0x01;
--use constant properties_info => (
--	{ name => 'visual_name',	type => 'sz',	default => '' },	# 0x04
--	{ name => 'visual_flags',	type => 'h8',	default => 0 },		# 0x0c
--);
--
--package cse_ph_skeleton;
--use strict;
--use constant properties_info => (
--	{ name => 'skeleton_name',	type => 'sz',	default => '$editor' },	# smthg|0x08
--	{ name => 'skeleton_flags',	type => 'u8',	default => 0 },		# 0x08
--	{ name => 'source_id',		type => 'h16',	default => 0xffff },	# 0x48
--);
---------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------
-- Notes
---------------------------------------------------------------------------------------------------
-- * set the parameters by STATE_Read can only
--   the newly created light, any attempt to change the data after
--   effect was not given. So while we can only remove the old and
--   create a new
-- * by the lamp can break, somewhere must have flags,
--   during installation which can make them not destructible
-- * by placing the light source in the arena lights came awful
--   shadow of the grating is too thick, probably because the source
--   light spot. cut off its shadow.
-- * with disconnected lamp shades that shine through walls and other objects
-- * You can set the color of light 'main_color', only need to turn off
--   'main_color_animator' (="")
-- * have not tested the work on static
-- * if you turn off all the lights arena, we can see some light
--   Spot / lighting, I think with them nothing can be done
-- * with increasing main_cone_angle (beam divergence) to approximately PI
--   there may be glitches, some dark streaks across the screen,
--   certainly possible that this is just my particular graphics card...

