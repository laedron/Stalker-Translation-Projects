--TB3D 1.0.9.9.8.5 prizrak_finalzver_done, cleanup, relocate_n_items_section, flamethrower_quest_complete_parts
function my_ver() return "1.0.9.9.8.5" end
local math_random = math.random

--Options for the quest for a flamethrower.
-- flamethrower.script
local min_fuel = 150
local max_fuel = 300

function on_item_take(obj)
    if db.actor and has_alife_info("flamethrower_quest_start") and not has_alife_info("flamethrower_quest_complete_parts") then		--109985
		have_a_fire_kolobok()
		have_a_trubki()
		have_a_manometr()
		have_a_vodko()
		have_a_gorelka()
	end
end

function on_item_drop(obj)
    if db.actor and has_alife_info("flamethrower_quest_start") and not has_alife_info("flamethrower_quest_complete_parts") then		--109985
		have_a_fire_kolobok()
		have_a_trubki()
		have_a_manometr()
		have_a_vodko()
		have_a_gorelka()
	end
end

function remove_spot()
	local sobj=alife():story_object(481516)
	if sobj then
		level.map_remove_object_spot(sobj.id,"green_location")
	end
	local obj
	for a=first_object,last_object do
		obj = alife():object(a)
		if obj then
			if get_section(obj)=="trubka" then
				level.map_remove_object_spot(obj.id,"red_location")
				break
			end
		end
	end
end

function good_bye(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(trader, "af_fireball", "out")
	dialogs.relocate_item_section(trader, "trubka", "out")
	dialogs.relocate_item_section(trader, "gorelka", "out")
	dialogs.relocate_item_section(trader, "manometr", "out")
	relocate_n_items_section(trader, "vodka", "out", 10)
	dialogs.relocate_item_section(trader, "flamethrower_bad", "out")
end

function have_n_items(section,number)
	if TB3D_Modders.Global_Debug then TB3D_Services.info_alert("flamethrower: have n items") end
	return amk_utils.inventory_search(section, number)
end

function have_10_vodka()
	return have_n_items("vodka",10)
end

function give_flamethrower_worked(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(trader, "wpn_flame", "in")
  	dialogs.relocate_money(trader, 5000, "out")
	clear_parts(first_speaker, second_speaker)
	if actor then
		local flame = actor:object("wpn_flame")
		if flame ~= nil then
			flame:set_ammo_elapsed(max_fuel)
		end
	end	
end

function clear_parts(first_speaker, second_speaker)	
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	local obj = trader:object("manometr")
	if obj ~= nil then
		alife():release(alife():object(obj:id()), true)
	end
	obj = trader:object("trubka")
	if obj ~= nil then
		alife():release(alife():object(obj:id()), true)
	end
	obj = trader:object("gorelka")
	if obj ~= nil then
		alife():release(alife():object(obj:id()), true)
	end
	obj = trader:object("flamethrower_bad")
	if obj ~= nil then
		alife():release(alife():object(obj:id()), true)
	end
	obj = trader:object("af_fireball")
	if obj ~= nil then
		alife():release(alife():object(obj:id()), true)
	end
	TB3D_Services.give_info("flamethrower_quest_complete_parts")			--109985
end

function clear_fuel(first_speaker, second_speaker)	
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	trader:iterate_inventory( function (dummy,item)
		if item:section() == "amk_ballon" or item:section() == "amk_kanistra" or item:section() == "wpn_flame" then 
			alife():release(alife():object(item:id()), true)
		end
	end, nil)
end

function spawn_parts()
	alife():create("manometr", vector():set(-146.01,6.04,-201.16), 91750, 621)
	alife():create("trubka", vector():set(-57.36,22.54,-120.73), 118492, 298)
	alife():create("gorelka", vector():set(-79.62,-10.69,39.95), 233164, 1595)
end


function set_metka()
	for a=first_object,last_object do
		local obj = alife():object(a)
		if obj then
			if get_section(obj)=="trubka" then
				amk.add_spot_on_map(obj.id,"red_location","Tube")
				return
			end
		end
	end
end


function relocate_to_barman(first_speaker, second_speaker)
	dialogs.relocate_item_section(second_speaker, "gorelka", "in")
    dialogs.relocate_money(second_speaker, 250, "out")
end

function out_antirad(first_speaker, second_speaker)
	dialogs.relocate_item_section(second_speaker, "antirad", "out")
end

function transfer_deneg_blockpost(first_speaker, second_speaker)
    dialogs.relocate_money(second_speaker, 5000, "in")
end

function give_flamethrower(first_speaker, second_speaker)
	dialogs.relocate_item_section(second_speaker, "flamethrower_bad", "in")
end

function have_a_flamethrower_bad(stalker, player)
    return stalker:object ("flamethrower_bad") ~= nil
end

function give_1000(first_speaker, second_speaker)
    dialogs.relocate_money(second_speaker, 1000, "in")
end

function have_a_antirad(stalker, player)
    return stalker:object("antirad") ~= nil
end

function out_flamethrower(first_speaker, second_speaker)
	dialogs.relocate_item_section(first_speaker, "flamethrower_bad", "out")
    dialogs.relocate_money(second_speaker, 2500, "in")
end


function have_a_fire_kolobok()
    if db.actor ~= nil and db.actor:object("af_fireball") ~= nil and not has_alife_info("flamethrower_quest_fireball") then
		TB3D_Services.give_info("flamethrower_quest_fireball")
    end
end

function have_a_trubki()
    if db.actor ~= nil and db.actor:object("trubka") ~= nil and not has_alife_info("flamethrower_quest_trubki") then
		TB3D_Services.give_info("flamethrower_quest_trubki")
	end
end

function have_a_manometr()
    if db.actor and db.actor:object("manometr") ~= nil and not has_alife_info("flamethrower_quest_manometr") then
		TB3D_Services.give_info("flamethrower_quest_manometr")
    end
end

function have_a_vodko()
	if amk_utils.inventory_search("vodka", 10) then
		TB3D_Services.give_info("flamethrower_quest_vodka")
	else
		TB3D_Services.remove_info("flamethrower_quest_vodka")
	end
end

function have_a_gorelka()
    if db.actor and db.actor:object("gorelka") ~= nil and not has_alife_info("flamethrower_quest_gorelka") then
		TB3D_Services.give_info("flamethrower_quest_gorelka")
    end
end

function have_a_gorelka2(stalker, player)
    return stalker:object("gorelka") ~= nil
end

function have_a_manometr2(stalker, player)
    return stalker:object("manometr") ~= nil
end

function have_a_trubka2(stalker, player)
    return stalker:object("trubka") ~= nil
end

function have_a_af_fireball(stalker, player)
    return stalker:object("af_fireball") ~= nil
end

function have_a_drink()
    if db.actor and db.actor:object("vodka") ~= nil then
		return true
	end
	return false
end

function have_a_fuel()
	return have_a_ballon() and have_a_kanistra()
end

function have_30000()
	if db.actor and db.actor:money() >= 30000 then
		return true
	else
		return false
	end
end

function have_2000()
	if db.actor and db.actor:money() >= 2000 then
		return true
	else
		return false
	end
end

function have_a_ballon()
    if db.actor and db.actor:object("amk_ballon") ~= nil then
		return true
	end
	return false
end

function have_a_kanistra()
    if db.actor ~= nil and db.actor:object("amk_kanistra") ~= nil then
		return true
	end
	return false
end

function have_a_flamethrower()
    if db.actor ~= nil and db.actor:object("wpn_flame") ~= nil then
		return true
	end
	return false
end

function metka_na_npc()
	local obj = alife():create("gar_stalker_flame_quest23",vector():set(24.86,0.40,209.75),198510,359)
	local params=amk.read_stalker_params(obj)
	params.custom="[logic]\nactive=walker\n[walker]\npath_walk = garb_tambovski_path\npath_look = garb_tambovski_look\non_info= {+find_815} nil\ncombat_ignore_cond=always"
	params.sid=481516
	amk.write_stalker_params(params,obj)
	amk.add_spot_on_map(obj.id,'green_location','Lech Tambov')
end



function start_work(first_speaker, second_speaker)
	local gtime = amk.game_minutes()
	amk.save_variable("flame_start", gtime)
	clear_parts(first_speaker, second_speaker)
end

function is_ready(first_speaker, second_speaker)
	local gtime = amk.game_minutes()
	local ftime = amk.load_variable("flame_start", gtime)
	if (gtime - ftime) >= 1440 then		--60*24
		return true
	else
		return false
	end
end

function not_ready(first_speaker, second_speaker)
	local gtime = amk.game_minutes()
	local ftime = amk.load_variable("flame_start", gtime)
	if (gtime - ftime) >= 1440 then
		return false
	else
		return true
	end
end

function clear_ready(first_speaker, second_speaker)
	amk.del_variable("flame_start")
end

function start_reload(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_money(trader, 2000, "out")
	dialogs.relocate_item_section(trader, "vodka", "out")	
	dialogs.relocate_item_section(trader, "wpn_flame", "out")	
	local gtime = amk.game_minutes()
	amk.save_variable("flame_reload", gtime + 30)
	calc_reload(first_speaker, second_speaker)
	clear_flame(actor)
end

function start_find_and_reload(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_money(trader, 30000, "out")
	dialogs.relocate_item_section(trader, "vodka", "out")	
	dialogs.relocate_item_section(trader, "wpn_flame", "out")	
	local gtime = amk.game_minutes()
	amk.save_variable("flame_reload", gtime + math_random(12, 24) * 60)
	amk.save_variable("flame_reload_count", min_fuel)
	clear_flame(actor)
end

function is_reload_ready(first_speaker, second_speaker)
	local gtime = amk.game_minutes()
	local ftime = amk.load_variable("flame_reload", 0)
	if gtime >= ftime then
		return true
	else
		return false
	end
end

function is_reload_not_ready(first_speaker, second_speaker)
	local gtime = amk.game_minutes()
	local ftime = amk.load_variable("flame_reload", 0)
	if gtime <= ftime then
		return true
	else
		return false
	end
end

function is_reload_started(first_speaker, second_speaker)
	local ftime = amk.load_variable("flame_reload", -1)
	if ftime==-1 then
		return false
	else
		return true
	end
end

function finish_reload(first_speaker, second_speaker)
	reload(first_speaker, second_speaker)
	clear_fuel(first_speaker, second_speaker)
	clear_reload(first_speaker, second_speaker)
end

function clear_reload(first_speaker, second_speaker)
	amk.del_variable("flame_reload")
	amk.del_variable("flame_reload_count")
end

function relocate_n_items_section(victim, section, Type, count)
	--TB3D_Services.packet_alert("flamethrower: transfer item")
    if db.actor and victim then
		local cnt = count
		if cnt and cnt > 0 then
			if Type == "in" then
				for i=1, cnt do
					alife():create(section,
						db.actor:position(),
						db.actor:level_vertex_id(),
						db.actor:game_vertex_id(),
						db.actor:id())
				end
			elseif Type == "out" then
				if TB3D_Modders.use_inventory_message == true then TB3D_Services.packet_alert("flamethrower: relocate ["..utils.to_str(cnt).."] items iterate inventory") end
				db.actor:iterate_inventory(function (dummy,item) if item and item:section() == section and cnt > 0 then db.actor:transfer_item(item, victim) cnt = cnt - 1 end end, nil)
			end
			news_manager.relocate_item(db.actor, Type, section, count)	--109985
		end
    end
end
--[[function relocate_n_items_section(victim, section, type, n)
	if db.actor and victim then
		if type == "in" then
			for i=1,n do
				alife():create(section,     
					db.actor:position(),
					db.actor:level_vertex_id(),     
					db.actor:game_vertex_id(),
					db.actor:id())
			end
		elseif type == "out" then
			db.actor:iterate_inventory(function (dummy,item)
				if item:section()==section and n>0 then 
					db.actor:transfer_item(item, victim)
					n=n-1
				end
			end, nil)
		end
		news_manager.relocate_item(db.actor, type, section)
	end
end]]--

function calc_reload(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	if have_a_ballon() and have_a_kanistra() then
		local cnt_kanistra=0
		local cnt_ballon=0
		actor:iterate_inventory(function (dummy, item) if item:section()=="amk_kanistra" then cnt_kanistra=cnt_kanistra+1 end end, nil)
		actor:iterate_inventory(function (dummy, item) if item:section()=="amk_ballon" then cnt_ballon=cnt_ballon+1 end end, nil)
		local mm = math.min(cnt_kanistra, cnt_ballon)
		if mm == 1 then
			dialogs.relocate_item_section(trader, "amk_kanistra", "out")
			dialogs.relocate_item_section(trader, "amk_ballon", "out")
			--rpm in configuration 300, then half a minute - 150 minute and 300.
			amk.save_variable("flame_reload_count", min_fuel)
		elseif mm >= 2 then
			flamethrower.relocate_n_items_section(trader, "amk_kanistra", "out", 2)
			flamethrower.relocate_n_items_section(trader, "amk_ballon", "out", 2)
			amk.save_variable("flame_reload_count", max_fuel)
		end
	end
end

function reload(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	dialogs.relocate_item_section(trader, "wpn_flame", "in")
	if actor then
		local flame = actor:object("wpn_flame")
		if flame ~= nil then
			local ammo = amk.load_variable("flame_reload_count", 0)
			flame:set_ammo_elapsed(ammo)
		end
	end
end

function clear_flame(person)
	if person and person:object("wpn_flame") then
		alife():release(alife():object(person:object("wpn_flame"):id()), true)
	end
end

function set_ammo(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	if actor then
		local flame = actor:object("wpn_flame")
		if flame ~= nil then
			local ammo = amk.load_variable("flame_reload_count", 0)
			flame:set_ammo_elapsed(ammo)
		end
	end
	amk.del_variable("flame_reload_count")
end
