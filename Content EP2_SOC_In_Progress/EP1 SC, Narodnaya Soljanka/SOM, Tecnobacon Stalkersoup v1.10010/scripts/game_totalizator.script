 --------<!-- TB3D 1.1.0.0.1.0 translated phrases, optimized db.actor, Grimwald fix
function my_ver() return "1.1.0.0.1.0" end
--[[ ----------------------------------------
 File              : game_totalizator.script
 Description       : Tote v1.1
 Copyright         : 2010 © Erlik (aka Garry_Galler)
 Author            : Erlik (aka Garry_Galler)
 Last edit         : 25.09.2010 
Thank you for your assistance in developing singapur'a22
--]] ------------------------------------------------------------------------
local force_obinder = TB3D_Modders.use_obj_obinder				--110010, calls into game binder (alife)
if force_binder == nil then force_binder = true end

--********************************************************************************
  --VARIABLES
--********************************************************************************
local constanta           = 60*100          --// constant equal to one minute of real time
local last_time_info      = 0
local last_time_send      = 0
local last_time_dolg      = 0
local last_time_deposit   = 0
local last_time_news      = 0
local dolg                = 0 
local bank                = 0
local deposit             = 0
local pause               = 2                 --// break availability dialogue after the draw - stack with time_send_prize
local time_send_prize     = 120                --// time of arrival of messages about winning \ losing - in seconds
local time_send_dolg      = constanta*6        --// send reminders of the duty every hour of the game (the value in GMT) = 6 minutes real
local time_index_dolg     = constanta*6*12     --//index the debt every 12 game hours (value in GMT)
local time_index_deposit  = constanta*6*24     --//index the deposit every 24 game hours (value in GMT)
local Timer_Info
local Timer_News                      
local gameTime_0         
local gameTime_1 
local gameTime_2 
local text_news =""     

--********************************************************************************
  --Update
--********************************************************************************
function Update()
	timer_infoportion()
	timer_deposit()
	timer_dolg()
	timer_send()
	timer_news() 
end

--********************************************************************************
  -- TABLES
--********************************************************************************

local ts = { 
sums_1 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,        --\ 14 сумм по 50 
100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,100, 100, 100, 100, 100, 100, 
500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,     
1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  
1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,         
2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,                
2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,                       
5000, 5000, 5000, 5000, 5000, 5000, 5000,                             
7500, 7500, 7500, 7500, 7500, 7500,                              
10000, 10000, 10000, 10000, 10000,                                     
20000, 20000, 20000,                                            
30000, 30000,                                                      
40000,                                                               
50000
},                                                                       

sums_2 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,                           
50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,          --\ 14 сумм по 50 
100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,  
500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,       
1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,   
1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,          
2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,                 
2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,                        
5000, 5000, 5000, 5000, 5000, 5000, 5000,                              
7500, 7500, 7500, 7500, 7500, 7500,                              
10000, 10000, 10000, 10000, 10000,                                     
20000, 20000, 20000, 20000,                                           
30000, 30000,                                                      
40000,                                                               
50000
},                                                                     

sums_3 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,                         
50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,          --\ 14 сумм по 50 
100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,   
500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,   
1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  
1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,          
2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,              
2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,                       
5000, 5000, 5000, 5000, 5000, 5000, 5000,                             
7500, 7500, 7500, 7500, 7500, 7500,                              
10000, 10000, 10000, 10000, 10000,                                     
20000, 20000, 20000, 20000,                                           
30000, 30000,                                                      
40000,                                                               
50000
},                                                                      

sums_4 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,                         
50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,           --\ 14 сумм по 50 
100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 
500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,         
1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  
1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,          
2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,             
2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,                           
5000, 5000, 5000, 5000, 5000, 5000, 5000,                                   
7500, 7500, 7500, 7500, 7500, 7500,                              
10000, 10000, 10000, 10000, 10000,                                     
20000, 20000, 20000, 20000,                                           
30000, 30000, 30000,                                                     
40000, 40000,                                                              
50000
},                                                                       

sums_5 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,                         
50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,                --\ 14 сумм по 50 
100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,      
500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,           
1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,        
1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,        
2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,         
2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,                           
5000, 5000, 5000, 5000, 5000, 5000, 5000,                                    
7500, 7500, 7500, 7500, 7500, 7500,                              
10000, 10000, 10000, 10000, 10000,                                     
20000, 20000, 20000, 20000,                                           
30000, 30000, 30000,                                                     
40000, 40000,                                                              
50000
},                                                                         

sums_6 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,  
100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 
500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 
5000, 5000, 5000, 5000, 5000, 5000, 5000, 
7500, 7500, 7500, 7500, 7500, 7500,                              
10000, 10000, 10000, 10000, 10000,                                     
20000, 20000, 20000, 20000,                                           
30000, 30000, 30000,                                                     
40000, 40000,                                                              
50000
}, 

sums_7 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 
500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  
1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,
5000, 5000, 5000, 5000, 5000, 5000, 5000, 
7500, 7500, 7500, 7500, 7500, 7500,                              
10000, 10000, 10000, 10000, 10000,                                     
20000, 20000, 20000, 20000,                                           
30000, 30000, 30000,                                                     
40000, 40000,                                                              
50000
}, 

sums_8 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  
50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 
500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 
5000, 5000, 5000, 5000, 5000, 5000, 5000, 
7500, 7500, 7500, 7500, 7500, 7500,                              
10000, 10000, 10000, 10000, 10000,                                     
20000, 20000, 20000, 20000,                                           
30000, 30000, 30000,                                                     
40000, 40000,                                                              
50000
}, 


sums_9 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 
500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 
5000, 5000, 5000, 5000, 5000, 5000, 5000, 
7500, 7500, 7500, 7500, 7500, 7500,                              
10000, 10000, 10000, 10000, 10000,                                     
20000, 20000, 20000, 20000,                                           
30000, 30000, 30000,                                                     
40000, 40000,                                                              
50000
}, 

--\ for the maximum rate of decrease the number of lose-lose options and various small gains
sums_10 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,                                             
50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,                                       
100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,                            
500, 500, 500, 500, 500, 500, 500, 500, 500, 500,                        
1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,              
1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,       
2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,              
2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,                    
5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000,                           
7500, 7500, 7500, 7500, 7500, 7500, 7500,                             
10000, 10000, 10000, 10000, 10000,                                     
20000, 20000, 20000, 20000,                                           
30000, 30000, 30000,                                                     
40000, 40000,                                                              
50000
}                                                                            
}


local stavka = {100, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 5000}

local prize = {0, 50, 100, 500, 1000, 1500, 2000, 2500,  5000, 7500, 10000, 20000, 30000, 40000, 50000} --\ table of the winning amounts

local portion = {"frase_1","frase_2","frase_3","frase_4",  --\ infoporshni obsuslavlivayuschie rates
   "frase_5","frase_6","frase_7","frase_8","frase_9",
   "frase_10"}

local type_frase =
{"Received ",
"Preferred Storage ",
"Lost ",
"Video is in debt ",
"Total Account ",
"Total Debt "
}


--********************************************************************************
  -- CASH OPERATIONS 
--********************************************************************************

--==========================================================================================

--\ make bid
function transfer_stavka(npc, actor)
    local money = actor:money()
        for n, s in ipairs(stavka) do
            if  actor:has_info("frase_"..n) then
			    if  money > 0 and money < s then       --\ reduce the rate to Hector Cash - pick it - write the rest in debt
				actor:transfer_money(money, npc)--\ Cash pick up Hector
				talk_message(3,money)
				dolg = dolg +(s-money) --\ debt is equal to minus the rate that sho was taken from Hector - also need to add on the old debt if it is, if not - plus zero - all the rules
			    talk_message(4,s-money)
				talk_message(6,dolg)
				elseif money == 0 then  --\ if there is mani - give Ector play in debt
				dolg = dolg + s     --\ If you already have a duty plyusuem, if not, plus zero - all the rules
				talk_message(4,s)
				talk_message(6,dolg)
                elseif  money == s then   --\ nal equal to the rate if 
				actor:transfer_money(s, npc)   --\ pick up the stake ... a debt which is recorded and remains a
				talk_message(3,s)
				talk_message(6,dolg)
				elseif  money > s then  --\ Cash if Hector more bets
				actor:transfer_money(s, npc)  --\pick up the stake ... debt is what was ... if there was a general ... we will deduct after the draw
				talk_message(3,s)
				talk_message(6,dolg)
				--if dolg >= money then        --\ make conversion of debt (if any) if the debt is greater than or equal to the balance of Nala 
				--dolg = money - dolg          --\ subtract debt - Hector remains debt-free
				--dolg = 0
				end
			end
        end
	this.totalizator(actor, npc)
end	
   
 
--==========================================================================================
 --\ think win \ loss
function totalizator(actor, npc)
    local sums                            --\ create a local variable sums without a specific value
	local summa = 0                       --\ create a local variable with initial value summa 0 
	for s, v in ipairs(portion) do        --\ iterate the table and if the pistons had been issued one of them (one out of 10)
        if actor:has_info(v) then         --\ its use for the key assignment to the name of the table wins (one out of 10)
	    sums = ts["sums_"..s]             --\ assign a key as to the name of the paytable
	    summa = sums[math.random(#sums)]  --\ local variable summa randomly assigning a value to the sum of the index of the selected range of number of indexes on the table sums_x (number assigned earlier)
	    end
	end
            for k, v in ipairs(prize) do   	--TB3D chg _ to k
                if summa == v then   --\   looking at the table with prize number sovpdayuschie precipitated amount - and if a match is - define the index
                bank = summa         --\ accrue the amount of bank
				    break
				end
			end	
		disable_portion()    --\ disable issued Pistols	
    --==========================================================================================
	 --\ If winning was not and there is not a debt
	if dolg == 0 and bank == 0 then 
	    text_news = "Marked One, the bet has not paid off.\\nCome another time."
	    start_timer_infoportion(time_send_prize+pause)
	--==========================================================================================
	--\  but if the gain was also no debts and then 
	elseif dolg == 0 and bank > 0 then 
        text_news = "Marked One, your bet has paid off.\\nYou have won "..tostring(bank).." RU.\\nCome and pick up your winnings."
	    start_timer_infoportion(time_send_prize+pause)
	--==========================================================================================
		--\ if there is payback and then win passage 
    elseif dolg > 0 and bank == 0 then  
            text_news = "Marked One, the bet has not paid off.\\nYou now owe "..tostring(dolg).." RU.\\nRope and soap will give a jellyfish."		
		    start_timer_infoportion(time_send_prize+pause)
	--==========================================================================================
        --\ if Hector is a payback and a win  		
    elseif dolg > 0 and bank > 0 then
	    -- \and if the debt is less than the bank 
	    if dolg < bank then 
		    text_news = "Marked One, this time you're in luck.\\nYou have won "..tostring(bank).." RU.\\nBut for must still owe "..tostring(dolg).." RU. I immediately deducted the owed amount from your deposit.\\nSo your total winnings are "..tostring(bank - dolg).." RU. Can you come pick up?"
		    bank = bank - dolg    -- \ Total bank debt equals the sum minus - that is, and deliver Ector when it comes to winning - that is, in this case will not accumulate debt, but soon they will calculate
            dolg = 0   --\ Debt dumb
			start_timer_infoportion(time_send_prize+pause)
    --==========================================================================================
		--\ the same thing, but for the case if the debt is equal to the bank. Take away win, and Hector fig.
	    elseif dolg == bank then  
			    text_news = "Marked One, even though you won "..tostring(bank).." RU you the same amount.\\nSo you have nothing to receive and no money in the pot."
				dolg = 0   --\ Debt dumb
				bank = 0   --\ empty pot
				start_timer_infoportion(time_send_prize+pause)
    --==========================================================================================
		--\ if the debt is and who was winning, but maybe more debt payoff 
		elseif dolg > bank then   
		    dolg = dolg - bank  --\ subtract the gain from debt
			text_news = "Marked One, you win "..tostring(bank).." RU.\\nDo not get excited. I take the whole amount and you still owe "..tostring(dolg).." RU.\\nSo go shake your money-maker."   --\ Ector will issue a message with which he remained in debt and he does not rely Nitsche
			start_timer_infoportion(time_send_prize+pause)
			bank = 0  --\ whether it is necessary?
	--==========================================================================================
		end
	end
end


--==========================================================================================
--\ here we issue won loot
				
function give_prize(actor, npc)	
	actor:give_money(bank)   --\Ector give the amount recorded in the variable bank 
	talk_message(1,bank)
	bank = 0                --\ just zero out the bank
end 

--==========================================================================================
--\ here to give back - in full, rather than parts
function give_dolg(first_speaker, second_speaker)
	db.actor:transfer_money(dolg, second_speaker)
	talk_message(3,dolg)
	dolg = 0        --\ zero out the debt
end

--==========================================================================================
--\ Here we give the money deposited 

function transfer_bank()
    if deposit == 0 then  --\ if the deposit is empty and the bank is that human 
       deposit = bank     --\ will transfer to another variable 
       news_manager.send_tip_txt(db.actor, "Marked One, your deposit is "..tostring(deposit).." RU.", 5, "totalizator", 1000) --\ this will always be zero, so kind of odd
       talk_message(2,deposit)
	   talk_message(5,deposit)
	   bank = 0
       elseif deposit > 0 then
       deposit = deposit + bank
       news_manager.send_tip_txt(db.actor, "Marked One, balance was "..tostring(bank).." RU.\\nAccount balance is now "..tostring(deposit).." RU.", 5, "totalizator", 1000) --\ clarify message
       talk_message(2,bank)
	   talk_message(5,deposit)
	   bank = 0
    end
end

--==========================================================================================
--\here we take away all the accumulated back-breaking labor ... "Three cigarette case, two jackets suede..."

function transfer_deposit(npc, actor)
local summa = 0
    local t = {"dep_1","dep_2","dep_3"}
        if actor:has_info("dep_1") then
        summa = math.ceil(deposit/10)
        actor:give_money(summa)
        news_manager.send_tip_txt(db.actor, "Marked One, you have withdrawn "..tostring(summa).." RU.\\nAccount balance is "..tostring(deposit - summa).." RU.", 5, "totalizator", 1000)
        deposit = deposit - summa
		talk_message(1,summa)
		talk_message(5,deposit)
        summa = 0		
	    elseif actor:has_info("dep_2") then
	    summa = math.ceil(deposit/2)
	    actor:give_money(summa)
        news_manager.send_tip_txt(db.actor, "Marked One, you have withdrawn "..tostring(summa).." RU.\\nAccount balance is "..tostring(deposit - summa).." RU.", 5, "totalizator", 1000)
	    deposit =  deposit - summa
		talk_message(1,summa)
		talk_message(5,deposit)
		summa = 0
	    elseif actor:has_info("dep_3") then
	    actor:give_money(deposit)
	    news_manager.send_tip_txt(db.actor, "Marked One, you have withdrawn "..tostring(deposit).." RU.\\nAccount balance zero RU.\\nLooks like you are on the road to poverty...", 5, "totalizator", 1000)
	    talk_message(1,deposit)
		deposit = 0
		talk_message(5,deposit)
	    end
    for k,v in ipairs(t) do	--TB3D chg _ to k
           TB3D_Services.remove_info(v)
    end
end



--********************************************************************************
  --TIMER
--********************************************************************************

function timer_news()
    --==========================================================================================
	--\start to work only if the news
    if text_news and text_news~="" then 
    --==========================================================================================
        if Timer_News==nil then 
	--==========================================================================================
	    --\ if you do not have time to finish - for the remainder of the perevzvodim
	        if last_time_news ~= 0  then
	            Timer_News = time_global()+last_time_news  --/ platoon timer for the remainder of the 
	        --\ otherwise, a platoon at the default time
		    else
		        Timer_News= time_global()+100*time_send_prize
            end 
	    end 
	   --==========================================================================================
	    -- assigning the remainder of time before the end of the timer
        last_time_news =  Timer_News-time_global()
    --==========================================================================================
		--\ check whether it is time to do it
	    if Timer_News < time_global() then --/ check the current value
        Timer_News     = nil --/ turn off timer
	    last_time_news = 0
	--==========================================================================================
		   --\ issue a message
		set_message() 
        end
    end
end
 


--==========================================================================================
 --\ timer to turn off the dialogue with the inaccessibility infporshnya rates

function start_timer_infoportion(seconds) --/ (Re) start the timer (from Dialogue)
    Timer_Info = time_global() + seconds*100 --/ platoon timer min
end 

--==========================================================================================
--\ timer to turn off the dialogue with the inaccessibility infporshnya rates 

function timer_infoportion() 
    if Timer_Info==nil then 
	--==========================================================================================
	   --\ if you do not have time to finish - for the remainder of the perevzvodim
	   if last_time_info ~= 0  then
	   Timer_Info = time_global()+last_time_info  --/ platoon timer for the remainder of the 
	   end 
	--==========================================================================================
 	else 
	 -- assigning the remainder of time before the end of the timer
    last_time_info = Timer_Info-time_global()
    --get_console():execute("Timer="..string.gsub(tostring(last_time_info/100), " ", "_")) -- output to the console while in countdown	
	--==========================================================================================
		--\ check whether it is time to do it
	   if Timer_Info < time_global() then --/ check the current value
        enable_dialog()
        Timer_Info     = nil --/ turn off timer
	    last_time_info = 0
        end
    end
end


--==========================================================================================
--\ timer for the issuance of angry messages on duty
function timer_send()
    if dolg~= 0 then
        --\ perevzvodim
		--==========================================================================================
		if gameTime_0==nil then 
		    if last_time_send ~= 0 then
		    gameTime_0 = time_global()+last_time_send
		    else
		    gameTime_0 = time_global()+time_send_dolg 
            end 
		end
		--==========================================================================================
		--\ assume the remainder of the
         last_time_send= gameTime_0-time_global()
		--==========================================================================================
		--\ проверяем не пора ли делать дело
        if gameTime_0 < time_global() then
	    send()
        --==========================================================================================
		--\\ obnilivaem 
        gameTime_0 = nil
		last_time_send = 0
		end
       --==========================================================================================
		--\\ if the debt is no longer - obnilivaem 		
	else 
	gameTime_0 = nil
	last_time_send = 0
    end 
end 

--==========================================================================================
--\ timer for indexation of the debt
function timer_dolg()
  if dolg~= 0 then
        --\ perevzvodim
		--==========================================================================================
		if gameTime_1==nil then 
		    if last_time_dolg~= 0 then
		    gameTime_1 = time_global()+last_time_dolg
		    else
		    gameTime_1 = time_global()+time_index_dolg 
            end 
		end
		--==========================================================================================
		--\ assume the remainder of the
		last_time_dolg = gameTime_1-time_global()
		--get_console():execute("Timer="..string.gsub(tostring(last_time_dolg/100), " ", "_")) -- output to the console while in countdown	
		--==========================================================================================
		--\ check whether it is time to do it
        if gameTime_1 < time_global() then
	    percent_dolg()
        --==========================================================================================
		--\\ obnilivaem 
        gameTime_1 = nil
		last_time_dolg = 0
		end
       --==========================================================================================
		--\\ if the debt is no longer - obnilivaem		
	else 
	gameTime_1 = nil
	last_time_dolg = 0
    end 
end 

--==========================================================================================
--\ timer for indexing deposit
function timer_deposit()
    if deposit~= 0 then
        --\ perevzvodim
		--==========================================================================================
		if gameTime_2==nil then 
		    if last_time_deposit~= 0 then
		    gameTime_2 = time_global()+last_time_deposit
		    else
		    gameTime_2 = time_global()+time_index_deposit
            end 
		end
		--==========================================================================================
		--\ assume the remainder of the
		last_time_deposit = gameTime_2-time_global()
		--==========================================================================================
		--\ check whether it is time to do it
        if gameTime_2 < time_global() then
	    percent_deposit()
        --==========================================================================================
		--\\ obnilivaem 
        gameTime_2 = nil
		last_time_deposit = 0
		end
       --==========================================================================================
		--\\ if the deposit likivdirovan - obnilivaem 		
	else 
	gameTime_2 = nil
	last_time_deposit = 0
    end 
end 

--********************************************************************************
  --Indexing SUM and send messages
--********************************************************************************

--==========================================================================================
--\ interest function - activated by a timer after each game day
function percent_deposit()
	if deposit == 0 then 
		return
	elseif deposit > 0 and deposit < 5000 then
		deposit = math.ceil(deposit + deposit/100*math.random(1,10))
		news_manager.send_tip_txt(db.actor, "Marked One, your deposit has increased to "..tostring(deposit).." RU.", 5, "totalizator", 1000) 
	elseif deposit > 5000 and deposit < 10000 then
		deposit = math.ceil(deposit + deposit/100*math.random(1,6))
		news_manager.send_tip_txt(db.actor, "Marked One, your deposit has increased to "..tostring(deposit).." RU.", 5, "totalizator", 1000) 
	elseif deposit > 10000 and deposit < 30000 then
		deposit = math.ceil(deposit + deposit/100*math.random(1,3))
		news_manager.send_tip_txt(db.actor, "Marked One, your deposit has increased to "..tostring(deposit).." RU.", 5, "totalizator", 1000) 
	elseif deposit > 30000 and deposit < 300000 then
		deposit = math.ceil(deposit + deposit/100*math.random(1,2))
		news_manager.send_tip_txt(db.actor, "Marked One, your deposit has increased to "..tostring(deposit).." RU.", 5, "totalizator", 1000) 
	--\ after deposit exceeds 300,000ru, then no more interest 
	elseif deposit > 300000 then
	   if deposit > 699999 then 
	       deposit = deposit /2 --\ ...and halve it if it is 700K or higher (from old games)
		   news_manager.send_tip_txt(db.actor, "Marked One, your deposit is in error. It has been adjusted to "..tostring(deposit).." RU.", 5, "totalizator", 1000)
		else
		    news_manager.send_tip_txt(db.actor, "Marked One, your deposit is too large. I cannot pay interest on "..tostring(deposit).." RU.", 5, "totalizator", 1000)
		end 
	end
end

--==========================================================================================
--\ indexing function of debt - a timer is activated after 12 hours of game
function percent_dolg()
	if dolg == 0 then 
		return
	elseif dolg > 0 and dolg < 5000 then
		dolg = math.ceil(dolg + dolg/100*10) 
		news_manager.send_tip_txt(db.actor, "Marked One, your debt has grown to "..tostring(dolg).." RU.", 5, "totalizator", 1000) 
	elseif dolg > 5000 and dolg < 10000 then
		dolg = math.ceil(dolg + dolg/100*30)
		news_manager.send_tip_txt(db.actor, "Marked One, your debt has grown to "..tostring(dolg).." RU.", 5, "totalizator", 1000) 
	elseif dolg > 10000 and dolg < 30000 then
		dolg = math.ceil(dolg + dolg/100*50)
		news_manager.send_tip_txt(db.actor, "Marked One, your debt has grown to "..tostring(dolg).." RU.", 5, "totalizator", 1000) 
	elseif dolg > 30000 then
		dolg = math.ceil(dolg + dolg/100*70)
		news_manager.send_tip_txt(db.actor, "Marked One, your debt has grown to "..tostring(dolg).." RU.", 5, "totalizator", 1000) 
	end
end

--==========================================================================================
--\ here are beginning to threaten sending him messages Ector of duty

function send()
	if dolg == 0 then 
		return
	elseif dolg > 500 and dolg < 30000 then
		news_manager.send_tip(db.actor, "dolg_1", 0, "totalizator_dolg", 1500)
	elseif dolg > 30000 and dolg < 5000 then 
		news_manager.send_tip(db.actor, "dolg_2", 0, "totalizator_dolg", 1500)
	elseif dolg > 5000 and dolg < 80000 then 
		news_manager.send_tip(db.actor, "dolg_3", 0, "totalizator_dolg", 1500)
	elseif dolg > 80000 and dolg < 11000 then 
		news_manager.send_tip(db.actor, "dolg_4", 0, "totalizator_dolg", 1500)
	elseif dolg > 11000 and dolg < 15000 then 
		news_manager.send_tip(db.actor, "dolg_5", 0, "totalizator_dolg", 1500)
	elseif dolg > 15000 and dolg < 20000 then 
		news_manager.send_tip(db.actor, "dolg_6", 0, "totalizator_dolg", 1500)
	elseif dolg > 20000 and dolg < 30000 then 
		news_manager.send_tip(db.actor, "dolg_7", 0, "totalizator_dolg", 1500)
	elseif dolg > 30000 and dolg < 40000 then 
		news_manager.send_tip(db.actor, "dolg_8", 0, "totalizator_dolg", 1500)
	elseif dolg > 40000 and dolg < 50000 then 
		news_manager.send_tip(db.actor, "dolg_9", 0, "totalizator_dolg", 1500)
	elseif dolg > 50000 then 
		news_manager.send_tip(db.actor, "dolg_10", 0, "totalizator_dolg", 1500)
	end
end


--********************************************************************************
  --PREKONDISHENY AND OTHER SUPPORT FUNCTIONS
--********************************************************************************
--  prekondishen for dialogue receive winnings
function precond()
	return bank > 0 
end

--  prekondishen for dialogue with the rates

function precond_2()
	return bank == 0
end


--\ return to dialogue debt  
function precond_3()
	local money = db.actor:money()
	return dolg > 0 and money >= dolg and bank == 0
end


--\ removal of the deposit for a dialogue
function precond_4()
	return deposit > 0
end


--\ phrases for refusal 
function precond_5()
	return dolg > 10000
end

--\ for the phrase 
function precond_6()
	return dolg < 10000
end

--\ function randomly choosing phrases YY - a phrase with the rates
function random_dialog()
    local i = math.random(10)
    TB3D_Services.give_info("frase_"..tostring(i))
	--SendMessage("We provide pistol ".."frase_"..tostring(i))
end


--\message with an icon in the dialog box
function talk_message(id,num)
	local  task_texture, task_rect 
	if id == 3 or id == 4 or id==6 then
		task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	else
		task_texture, task_rect = get_texture_info("ui_iconsTotal_found_money")
	end
	news_manager.give_talk_message(type_frase[id]..tostring(num).." RU", task_texture, task_rect, "iconed_answer_item")
end

--\ make dialogue with the rates available
function enable_dialog()
	--if has_alife_info("totalizator") then 
		TB3D_Services.remove_info("totalizator")
	--end
end

--\ turn off all issued infoporshni
function disable_portion()
    for k, v in pairs(portion) do
           TB3D_Services.remove_info(v)
		   --SendMessage("Turning off the pistol "..v)
    end
end


function set_message()
    if text_news and text_news~="" then 
       news_manager.send_tip_txt(db.actor, text_news, 0 , "totalizator", 1500)
	   text_news= ""
   end
end 

--********************************************************************************
  --Debugging functions
--********************************************************************************
function Console(info)
	if TB3D_Modders.Global_Debug then TB3D_Services.info_alert("GAME TOT["..utils.to_str(info).."]") end
end

function SendMessage(text)
	news_manager.send_tip_txt(db.actor, text, 0, "totalizator", 1000)
end

--********************************************************************************
  -- Support for loading and saving data
--********************************************************************************

function init(obj)
    local torch = torch_binder(obj)
    obj:bind_object(torch)
end

class "torch_binder" (object_binder)
	function torch_binder:__init(obj) super(obj)
end 


function torch_binder:reload(section)
	if force_obinder then object_binder.reload(self, section) end			--110010
end

function torch_binder:reinit()
	if force_obinder then object_binder.reinit(self) end			--110010
end

function torch_binder:update(delta)
	if force_obinder then object_binder.update(self, delta) end			--110010
	Update()
end

function torch_binder:net_spawn(data)
	if force_obinder then
		return object_binder.net_spawn(self, data)			--110010
	else
		return true
	end
end

function torch_binder:net_destroy()
	--if self and self.object then
		if force_obinder then object_binder.net_destroy(self) end			--110010
	--end
end

function torch_binder:net_save_relevant()
	return true
end

function torch_binder:save(p)
	if force_obinder then object_binder.save(self, p) end			--110010
	p:w_u32(dolg)
	p:w_u32(bank)
	p:w_u32(deposit)
	p:w_u32(last_time_dolg)
	p:w_u32(last_time_deposit)
	p:w_u32(last_time_send)
	p:w_u32(last_time_info)
	p:w_u32(last_time_news)
	p:w_stringZ(text_news)
end

function torch_binder:load(r)
	if force_obinder then object_binder.load(self, r) end			--110010
	dolg              = r:r_u32()
	bank              = r:r_u32()
	deposit           = r:r_u32()
	last_time_dolg    = r:r_u32()
	last_time_deposit = r:r_u32()
	last_time_send    = r:r_u32()
	last_time_info    = r:r_u32()
	last_time_news    = r:r_u32()
	text_news         = r:r_stringZ()
end
