-- TB3D 1.1.0.0.0.4 optimized, added force weapon hide, GC on inv close, removed garbagecollect, bioradar and belt size check, translate, inv_count
function my_ver() return "1.1.0.0.0.4" end

belt = {}					--actually whole inventory, not the belt slots
belt_id = {}
belt_status = false

local need_update = true
local inventory_open = false
local separator_spawned = false
local separator = "separator"
local translate = game.translate_string

local flag
local first_scan
local inv_count
--local belt_count
function get_inv_count()
	if inv_count then
		return inv_count
	else
		return 0
	end
end
function update()
	if need_update == true then
		if TB3D_Modders.use_inventory_message == true and belt_status == true then TB3D_Services.info_alert("belt_status=false") end
		belt_status = false
		-- Spawn separating y element
		if (separator_spawned == false) then
			alife():create(separator,
				db.actor:position(),
				db.actor:level_vertex_id(),
				db.actor:game_vertex_id(),
				db.actor:id())
			separator_spawned = true
			if TB3D_Modders.use_inventory_message == true then TB3D_Services.info_alert("separator_spawned") end
			return
		end
		belt = {}
		belt_id = {}
		flag = 0
		-- Scan tools
		inv_count = flag
		--belt_count = flag
		db.actor:inventory_for_each(scan_inv)
		if not first_scan then TB3D_Services.packet_alert("BSTALK: actor inventory count["..utils.to_str(inventory.get_inv_count()).."]") first_scan = true end
		need_update = false
		-- Remove the separating y element
		db.actor:inventory_for_each(del_separator)
		separator_spawned = false
		if TB3D_Modders.use_inventory_message == true and belt_status == false then TB3D_Services.packet_alert("inventory: belt_status[false]") end
		belt_status = true
		remove_duplicate()	--artifacts on belt
		TB3D_Services.remove_info("tb3d_bioradar_on")
		local sect
		local sobj
		local cnt = 0
		for i,k in pairs(belt) do
			cnt = cnt + 1
			if i and i == "bioradar" then TB3D_Services.give_info("tb3d_bioradar_on") end
			if TB3D_Modders.use_inventory_message == true then
				TB3D_Services.packet_alert("inventory: belt nmbr["..utils.to_str(cnt).."] item["..utils.to_str(i).."] qty["..utils.to_str(k).."]")
			end
		end
		if cnt > 24 then TB3D_Services.remove_info("tb3d_bioradar_on") end		-- was during startup
		if TB3D_Modders.use_ammo_belt == true then
			belt_ammo.on_update()
			belt_grenade.update_tbl()
		end
		--if inventory_open == false then
			--collectgarbage("collect") end				-- force memory cleanup
		--end
	end
end

-- Bust inventory items
function scan_inv(item)
	local section = item:section()
	if section == separator then
		flag = 1
		return
	end
	if flag == 1 then
		if slot_item(item) ~= nil then
			flag = 2
			return
		else
			insert_to_table(belt, section)
			belt_id[item:id()] = true
			--belt_count = belt_count + 1
			return
		end
	end
	inv_count = inv_count + 1
end

-- Adding a table
function insert_to_table(tbl, section)
	if tbl[section] == nil then
		tbl[section] = 1
	else
		tbl[section] = tbl[section] + 1
	end
end

-- Removal of dividing the subject
function del_separator(item)
	if item:section() == separator then
		alife():release(alife():object(item:id()), true)
		if TB3D_Modders.use_inventory_message == true then TB3D_Services.info_alert("separator_removed") end
	end
end

-- Determination of lean subject in one of the slots
function slot_item(item)
local obj
	for i=0,12 do
		obj = db.actor:item_in_slot(i)
		if obj and item:id() == obj:id() then
			return i
		end
	end
	return nil
end

-- Lifting the object
function on_item_take(item)
	if TB3D_Modders.use_inventory_message == true then TB3D_Services.packet_alert("inventory: item_take ["..utils.to_str(item:id()).."] ["..utils.to_str(item:section()).."]") end
	if TB3D_Modders.use_ammo_belt == true then               -- DMX MOD
		belt_ammo.on_item_take(item)
		belt_grenade.on_item_take(item)
    end
	if item:section() == separator then return end
	if (inventory_open == false) then
		if (separator_spawned == true) then
			db.actor:inventory_for_each(del_separator)
			separator_spawned = false
		end
		need_update = true
	end
	if TB3D_Modders.use_inventory_message == true then TB3D_Services.packet_alert("inventory: item_take ["..utils.to_str(item:id()).."] ["..utils.to_str(item:section()).."] done") end
end

-- Release of the subject
function on_item_drop(item)
	if TB3D_Modders.use_ammo_belt == true  then belt_grenade.on_item_drop(item) end  -- DMX MOD
	if item:section() == separator then return end
	if (inventory_open == false) then
		if (separator_spawned == true) then
			db.actor:inventory_for_each(del_separator)
			separator_spawned = false
		end
		need_update = true
		if TB3D_Modders.use_inventory_message == true then TB3D_Services.packet_alert("item_drop ["..utils.to_str(item:id()).."] ["..utils.to_str(item:section()).."]") end
	end
end

-- Opening / closing inventory
function on_inventory_info(info_id)
	if info_id == "ui_inventory" then
		inventory_open = true
		if TB3D_Modders.use_ammo_belt == true then belt_ammo.on_inventory_open() end -- DMX MOD
		bind_stalker.hide_weapon(true)				--force hiding the weapon
		if TB3D_Modders.use_inventory_message == true then TB3D_Services.info_alert("inventory: [open]") end
	elseif info_id == "ui_inventory_hide" then
		inventory_open = false
		need_update = true
		if TB3D_Modders.use_ammo_belt == true then belt_ammo.on_inventory_close() end -- DMX MOD
		bind_stalker.restore_weapon()
		--collectgarbage("collect")				-- force memory cleanup
		if TB3D_Modders.use_inventory_message == true then TB3D_Services.info_alert("inventory: [close]") end
	end
end

function check_blood()
--   if belt_status == true then
      if belt["af_blood"]~=nil and belt["af_blood"]>0 then -- that is, when setting the belt [af_blood] is 1, 2, 3 .. How to hang Stones.
             news_manager.amk_send_tip(translate("Blood_Stone_on_belt"))
          end
--   end
end

local unique_sect = {
["af_caterpillar"] = true,
["af_arhara_globus"] = true,
["af_vyvert_green"] = true,
["af_blood_green"] = true,
["af_dummy_spring_red"] = true,
["af_dummy_battery_red"] = true,
["af_dummy_pellicle_red"] = true,
["af_babka_3"] = true,
["af_babka_4"] = true,
["af_armor_4"] = true,
["af_cry_3"] = true,
["af_dik_4"] = true,
["af_kol_3"] = true,
["af_kol_4"] = true,
["af_pudd_4"] = true,
["af_spirit_3"] = true,
["af_spirit_4"] = true,
["af_gold_fish"] = true,
["af_eye_voron"] = true
}

--leaves the zone by one (Fig, now two) of each type of artifact
function remove_duplicate()
	local sobj
	local text=""
	local sect
	local t = check_duplicate()
	for k, v in pairs(belt_id) do
		sobj = alife():object(k)
		if sobj then
			sect = get_section(sobj)
			if not sect then
				sect = sobj:section()		--110000
				if not sect then sect = "nil" end
			end
			if unique_sect[sect] and t[sect] ~= nil and t[sect] > 0 then
				alife():release(sobj, true)
				text=translate("Unnecessary_artifact_0").." "..translate(amk.get_inv_name(sect)).." "..translate("moved_from_belt_pack")
				news_manager.send_tip_txt(db.actor, text, nil, nil, nil)
				amk.spawn_item_in_inv(sect, db.actor)
				t[sect] = t[sect] - 1
			end
		end
	end
end

--Old duplicate collects on the belt
--returns a table of the form [Section Art] = the number of unnecessary artov>
function check_duplicate()
	local result = {}
	for k, v in pairs(belt) do
		if v > 2 then
			result[k] = v - 2
		end
	end
	return result
end

--returns true, if the subject should be on the belt in the singular
--[[function is_unique(section)
	local result = false
        for i=1,table.getn(unique_sect) do
            if section == unique_sect[i] then
                result = true
                break
            end
        end
	return (section ~= nil and unique_sect[section] == true)
	return result
end]]

-- DMX MOD on
function start()
	need_update = true
end
-- DMX MOD off
