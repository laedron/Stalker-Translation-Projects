--TB3D 1.0.9.9.1 
function my_ver() return "1.0.9.9.1" end

--' The mental state of the body
--' we are in need of state?
class "eva_state_mgr_mental" (property_evaluator)
function eva_state_mgr_mental:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_mental:evaluate()
	return (state_lib.states[self.st.target_state].mental == nil) or
		   (state_lib.states[self.st.target_state].mental == self.object:target_mental_state())
end
--' Do we really need to be able to FREE
class "eva_state_mgr_mental_free" (property_evaluator)
function eva_state_mgr_mental_free:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_mental_free:evaluate()
	return state_lib.states[self.st.target_state].mental == anim.free
end
--' whether we are now in FREE
class "eva_state_mgr_mental_free_now" (property_evaluator)
function eva_state_mgr_mental_free_now:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_mental_free_now:evaluate()
	return self.object:target_mental_state() == anim.free
end


--' Do we really need to be able to DANGER
class "eva_state_mgr_mental_danger" (property_evaluator)
function eva_state_mgr_mental_danger:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_mental_danger:evaluate()
	return state_lib.states[self.st.target_state].mental == anim.danger
end
--' whether we are now in
class "eva_state_mgr_mental_danger_now" (property_evaluator)
function eva_state_mgr_mental_danger_now:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_mental_danger_now:evaluate()
	return self.object:target_mental_state() == anim.danger
end

--' Do we really need to be able to PANIC
class "eva_state_mgr_mental_panic" (property_evaluator)
function eva_state_mgr_mental_panic:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_mental_panic:evaluate()
	return state_lib.states[self.st.target_state].mental == anim.panic
end
--' whether we are now in PANIC
class "eva_state_mgr_mental_panic_now" (property_evaluator)
function eva_state_mgr_mental_panic_now:__init(name, st) super (nil, name)
	self.st = st
end
function eva_state_mgr_mental_panic_now:evaluate()
	return self.object:target_mental_state() == anim.panic
end


--' Includes free state
class "act_state_mgr_mental_free" (action_base)
function act_state_mgr_mental_free:__init(name) super (nil, name)
end
function act_state_mgr_mental_free:initialize()
	action_base.initialize(self)
	self.object:set_mental_state(anim.free)
end
function act_state_mgr_mental_free:execute()
	action_base.execute(self)
	self.object:set_mental_state(anim.free)
end
function act_state_mgr_mental_free:finalize()
	action_base.finalize(self)
end

--' Turn on the excited state
class "act_state_mgr_mental_danger" (action_base)
function act_state_mgr_mental_danger:__init(name) super (nil, name)
end
function act_state_mgr_mental_danger:initialize()
	action_base.initialize(self)
	self.object:set_mental_state(anim.danger)
end
function act_state_mgr_mental_danger:execute()
	action_base.execute(self)
	self.object:set_mental_state(anim.danger)
end
function act_state_mgr_mental_danger:finalize()
	action_base.finalize(self)
end

--' Include panic mode
class "act_state_mgr_mental_panic" (action_base)
function act_state_mgr_mental_panic:__init(name) super (nil, name)
end
function act_state_mgr_mental_panic:initialize()
	action_base.initialize(self)
	self.object:set_mental_state(anim.panic)
end
function act_state_mgr_mental_panic:execute()
	action_base.execute(self)
	self.object:set_mental_state(anim.panic)
end
function act_state_mgr_mental_panic:finalize()
	action_base.finalize(self)
end