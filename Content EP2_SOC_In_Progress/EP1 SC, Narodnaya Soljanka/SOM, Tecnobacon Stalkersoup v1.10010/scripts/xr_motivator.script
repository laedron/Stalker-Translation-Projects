--TB3D 1.1.0.0.1.0 cleanup, added story id protection in net_spawn, new hit actions, dmx135, dav updates, death_hit,
-- db.clearobj location, dmx blood vice amk, death hit to victim not actor, chg particles, added anomoly evasion,
-- object checks, drop weapon tweaks (dAVROs) and removal of gut shot, blowout_scheme.hit_callback, invulnerables, zombie team,
-- immortals, net spawn, isolate shustry hit amount, stall hits, ogse companions, radar_monolit_dead, generic_m_story_id,
-- hit_table, companion message, db.check_corpse_looted, db, cleanup, fotoman, debug, companions, spawn_enemy_at, update,
-- agro soldiers health, krysuk, death callback, "NIL" to "nil", optimized can_remove_dead, motivator_delta, dead_character_use,
-- opt, hit by eagle, motivator + delta, lname, debug, obinder, is_disconnecting

function my_ver() return "1.1.0.0.1.0" end
--[[------------------------------------------------------------------------------------------------------------------
Author: Ruslan Didenko (Stohe)
how to call methods of Binder:
reload
reinit
load
net_spawn
--------------------------------------------------------------------------------------------------------------------]]
local table_remove = table.remove
local string_find = string.find
local string_sub = string.sub
local particles={}
local hit_max = 1 + TB3D_Modders.hits_to_kill_invuln
local hit_head = 1 + (TB3D_Modders.hits_to_kill_invuln / TB3D_Modders.hits_to_head_invuln)
local lname = level:name()		--110009
local force_obinder = TB3D_Modders.use_xr_obinder				--110010, calls into game binder (alife)
if force_binder == nil then force_binder = true end
----------------------------------------------------------------------------------------------------------------------
prefetch("sr_territory")
prefetch("death_manager")

class "motivator_binder" (object_binder)

function motivator_binder:__init (obj) super(obj)
	self.loaded = false
	self.last_update = 0
	self.prev_ammo = -1
    self.first_update = false
	self.treasure_processed = false
	self.particles = {}
end

function motivator_binder:extrapolate_callback(cur_pt)
	if self.object == nil then
		if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("xr motivator: extrapolate[Nil self.object]") end
		return
	end
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "extrapolate_callback")
		self.st.move_mgr:extrapolate_callback(self.object)
	end
	if patrol(self.object:patrol()):flags(cur_pt):get() == 0 then
		return true
	end
	return false
end

function motivator_binder:reinit()
	if self.object == nil then
		if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("xr motivator: reinit[Nil self.object]") end
		return
	end
	if force_obinder then object_binder.reinit(self) end	--110010
    -- Callback is posed NOT! It is still unknown the active circuit.
    -- Put in a callback method update in the distinguished commentary site.
    local char_ini = self.object:spawn_ini() or ini_file("scripts\\dummy.ltx")
	---------------------------------------------------------------------------------
	-- Common scripts
	---------------------------------------------------------------------------------
    db.set_followers(self)		--109976
    self.st = db.storage[self.object:id()]
    --' Creating a manager controls provisions of the body
	self.st.state_mgr = state_mgr.bind_manager(self.object)
	self.st.move_mgr = move_mgr.move_mgr(self.object)
	self.st.move_mgr:initialize()
end
----------------------------------------------------------------------------------------------------------------------
function motivator_binder:net_spawn(sobject)
	local is_report = false
	if _g.is_disconnecting then return end			--110010
	if TB3D_modders.Global_Debug then
		TB3D_Services.packet_alert("XR MOTIVATOR: net_spawn["..game.get_game_time():timeToString(game.CTime.TimeToMilisecs).."]")
	end
	if sobject and self and self.object then
		local sim = alife()
		local npc = self.object
		--local sname = amk.load_variable("level_on_save", lname)		--109983
		local sobj_name = sobject:name()
		if sobj_name == nil then sobj_name = nil end
		local npc_name = npc:name()
		if npc_name == nil then npc_name = "nil" end
		local npc_id = npc:id()
		if TB3D_Modders.use_spawn_message or (TB3D_Modders.use_state_message and string_find(npc_name, TB3D_Modders.npc_to_log)) then is_report = true end
		if npc_id then
			local is_alive = npc.alive and npc:alive()
			if is_report or TB3D_Modders.use_info_message then
				TB3D_Services.packet_alert("xr motivator: net spawn["..npc_name.."]["..sobj_name.."] id["..utils.to_str(npc_id).."] is alive["..utils.to_str(is_alive).."] level["..utils.to_str(lname).."]")
			end
			if not is_alive then
				TB3D_Services.check_the_dead(npc_name)									--110005, make sure task spot is removed
				if lname ~= TB3D_Services.level_on_save() then
					if TB3D_Services.can_remove_dead(lname, npc_name) then				--109996, interactive corpse cleaner
						if not db.check_corpse_looted(npc) and protected_items.obj_has_protected_item(npc) == false then             
							if is_report or TB3D_Modders.use_info_message then			--110000
								TB3D_Services.packet_alert("XR MOTIVATOR: dead["..npc_name.."] removed")
							end
							--sim:object(npc_id).dont_spawn_online = true
							sim:release(sim:object(npc_id))
							return false
						end
					end
				end
			end
			if force_obinder and object_binder.net_spawn(self, sobject) == nil then									--110010
				TB3D_Services.packet_alert("XR MOTIVATOR: object_binder net_spawn  - ["..npc_name.."] [failed] !!!!")
				return false
			end
			if is_report then
				TB3D_Services.packet_alert("XR MOTIVATOR: net_spawn["..npc_name.."] ["..sobj_name.."]")
			end
			if TB3D_Modders.zombie_team == true then 
				local zomb=amk.load_table("zombies")
				if zomb then
					for k,v in pairs(zomb) do
						if (k) and (v) and k==npc_id then
							if (v.master) and sim:object(v.master) and sim:object(v.master).alive and (not sim:object(v.master):alive()) then
								if amk_mod.dezombify(k,v) then
									zomb[k]=nil
								end
							end
						end
					end
					--TB3D_Services.packet_alert("XR MOTIVATOR: saving zombies["..npc_name.."]["..utils.to_str(zomb).."]")
					amk.save_table("zombies",zomb)
				--else
					--zomb = {}
				end
				local char_ini = npc:spawn_ini()
				if char_ini and char_ini:section_exist("dont_spawn_online") then
					--TB3D_Services.packet_alert("XR MOTIVATOR: net_spawn["..npc_name.."] zombied offline")
					sim:object(npc_id).dont_spawn_online = true
				end
			end
			if sim:object(npc_id) then
				local sid = sim:object(npc_id).m_story_id
				if sid then
					if sid ~= generic_m_story_id then									--just key npc
						--TB3D_Services.packet_alert("XR MOTIVATOR: net spawn["..sobj_name.."] sid["..utils.to_str(sid).."]")
						dmx_mod.mapspot_npc(sid,npc_id)
					end
				else
					if is_report then TB3D_Services.packet_alert("XR MOTIVATOR: net spawn["..sobj_name.."] id["..utils.to_str(npc_id).."] not in story registry") end
				end
			end
			db.spawn_stalker(npc)									--109940
			-- All CALLBACK-and put here:
			npc:set_patrol_extrapolate_callback(motivator_binder.extrapolate_callback, self)
			npc:set_callback(callback.hit, motivator_binder.hit_callback, self)
			npc:set_callback(callback.death, motivator_binder.death_callback, self)
			npc:set_callback(callback.use_object, motivator_binder.use_callback, self)
			--memusage.collect_info(npc, "after__callback")
			if TB3D_Modders.use_perception_message == true then
				npc:set_callback(callback.sound, motivator_binder.hear_callback, self)
			end
			--' Download stories for the camp.
			if self.loaded == false then
				local char_ini = npc:spawn_ini() or ini_file("scripts\\dummy.ltx")
				xr_info.loadInfo(npc, char_ini)
			end
			------------------- TB3D - USED for DEBUGGING ------------------------------
			--if npc_name == "dcity_nach_oxran" then TB3D_Services.jump_to_npc(npc) end
			----------------------------------------------------------------------------
			local particle_param = getIniValueString(npc:section(), "bones_particles", nil, nil)
			if not is_alive then
				if is_report then TB3D_Services.info_alert("XR MOTIVATOR: net spawn["..npc_name.."] dead") end
				if particle_param and system_ini():section_exist(particle_param) then
					local tmp=amk.parse_ini_section_to_array_new(nil,particle_param)
					local t = {}
					for k,v in pairs(tmp) do
						t = {}
						t = amk.parse_ini_section_to_array_new(nil, v)
						if t ~= nil then
							t.obj = npc
							if not t.stop_on_death then play_particle(npc, t) end
						end
					end
				end
				if TB3D_Services.is_collector(401) then
					if xr_companion.is_companion(npc_id) then
						xr_companion.save_var_companion(npc_id, "is_companion", 0)
					end
				end
				return true
			end
			-- tell all non-npc to not evade anomolies
			local commun = npc:character_community()
			--[ [
			if npc_name == "val_bandit_krisyk" then					--109989
				--he needs to evade them
			elseif TB3D_Modders.ai_anomoly_evade == false or				-- no one evades them
				npc_name == "bar_ecolog_professor" or			-- for wild territory tunnel
				commun == "nebo" or			--!!!!TB3D causes CTDs in swamp
				commun == "zombied"	
			--] ]				
			--[[												-- for isolation testing
			if TB3D_Modders.ai_anomoly_evade == true and
				commun ~= "lastday" and
				commun ~= "ecolog" and
				commun ~= "sniper" and
				--commun ~= "nebo" and		--!!!!TB3D causes CTDs in swamp
				commun ~= "dolg" and
				commun ~= "green" and
				commun ~= "freedom" and
				commun ~= "bandit" and
				commun ~= "military" and
				commun ~= "killer" and
				commun ~= "stalker" and
				commun ~= "monolith"
				--]]
			then
				local manager = npc:motivation_action_manager()
				manager:remove_evaluator(stalker_ids.property_anomaly)
				manager:add_evaluator(stalker_ids.property_anomaly, property_evaluator_const(false))
			end
			if TB3D_Services.is_collector(402) then			--109950 ogse
				local manager = npc:motivation_action_manager()
				manager:add_evaluator(xr_companion.property_need_companion, property_evaluator_const(false))
				manager:add_evaluator(xr_companion.property_need_run, property_evaluator_const(false))
			end
			if ogsm_hideout then							--109950 ogse
				local manager = npc:motivation_action_manager()
				manager:add_evaluator(ogsm_hideout.property_blowout, property_evaluator_const(false))
				manager:add_evaluator(ogsm_hideout.property_hideout_lost, property_evaluator_const(false))
				manager:add_evaluator(ogsm_hideout.property_inhide, property_evaluator_const(false))
				manager:add_evaluator(ogsm_hideout.property_psyzoned, property_evaluator_const(false))
			end
			xr_sound.load_sound(npc)				--' Loading Voice
			xr_gulag.setup_gulag_and_logic_on_spawn( npc, self.st, sobject, modules.stype_stalker, self.loaded )
			--if TB3d_Modders.use_packet_message then TB3D_Services.info_alert("XR MOTIVATOR: net spawn gulag done "..npc_name) end
			--amk.on_npc_spawn(npc)					--110000, only called from here, not used
			amk.on_net_spawn(npc)					--110000, adds to btr table, called from bind_monster and bind_physic_object also
			if particle_param and system_ini():section_exist(particle_param) then
				local tmp=amk.parse_ini_section_to_array_new(nil,particle_param)
				local t = {}
				for k,v in pairs(tmp) do
					t = {}
					t = amk.parse_ini_section_to_array_new(nil, v)
					if t ~= nil then
						t.obj = npc
						play_particle(npc, t)
					end
				end
			end
			if TB3D_Services.is_collector(403) then			--109950 ogse
				if xr_companion.is_companion(npc_id) then
					if db.actor then
						news_manager.send_companion_message(npc, "sms_companion_sig_found", "sms_companion_sig_proximity", 0, 15)
					end
					sobject:smart_terrain_task_deactivate()
				end
			elseif commun == "fotoman" then
				npc:set_custom_panic_threshold(0.0)			--109976 try and force them to stay in place
			end
			if TB3d_Modders.Global_Debug then
				TB3D_Services.packet_alert("XR MOTIVATOR: net spawn["..npc_name.."]["..game.get_game_time():timeToString(game.CTime.TimeToMilisecs).."] done[true]")
			end
			return true
		else
			TB3D_Services.abort_alert("XR MOTIVATOR: net_spawn - ["..npc_name.."] npc.id[nil] !!!!")
		end
	else
		TB3D_Services.abort_alert("XR MOTIVATOR: net_spawn - sobject[nil] or self[nil] or self.object[nil] !!!!")
	end
	if TB3D_modders.Global_Debug then
		TB3D_Services.packet_alert("XR MOTIVATOR: net_spawn["..game.get_game_time():timeToString(game.CTime.TimeToMilisecs).."] done[false]")
	end
	return false
end

function motivator_binder:net_destroy()				--goes offline
	--if _g.is_disconnecting then return end
	local is_report = false
	local s_obj = self.object
	local sname
	if s_obj then
		if (s_obj.name) then
			sname = s_obj:name()
		else
			sname = "nil"
		end
		--TB3D_Services.abort_alert("xr motivator: net destroy["..utils.to_str(sname).."]")
		if TB3D_Modders.use_destroy_message or (TB3D_Modders.use_state_message and string_find(sname, TB3D_Modders.npc_to_log)) then is_report = true end
		if is_report then
			TB3D_Services.packet_alert("xr motivator: net destroy["..sname.."]")
		end
		if TB3D_Modders.use_xtrm_ai and xrs_ai then xrs_ai.npc_net_destroy(s_obj) end
		rx_ai.npc_switch_offline(s_obj)
		if self.particles ~= nil then
			if #self.particles > 0 then
				for kk,vv in pairs(self.particles) do
					if not vv:is_finished() then
						vv:stop()
						self.particles[kk]=nil
					end
				end
			end
		end
		amk.on_npc_go_offline(s_obj)						-- added by xStream for AMK miniSDK
		if (s_obj.id) then
			local id = s_obj:id()
			local st_obj=alife():object(id)
			if st_obj then
				local tbl=amk.read_stalker_params(st_obj)
				tbl.crvu32u16u2={}
				amk.write_stalker_params(tbl,st_obj)
				local sid = st_obj.m_story_id													--109955
				if sid then dmx_mod.remove_mapspot_npc(sid,id) end
			elseif is_report then 
				TB3D_Services.packet_alert("xr motivator: net_destroy["..sname.."] no story object!!!!")
			end
			local st = db.storage[id]
			if st then
				if (st.active_scheme) then
					xr_logic.issue_event(s_obj, st[st.active_scheme], "net_destroy", s_obj)
				end
				if st.state_mgr then			--109974
					st.state_mgr = nil
				end
			end
		else
			if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("xr motivator: net_destroy[Nil self.object.id]") end
		end
		self:clear_callbacks()
		s_obj:set_callback(callback.use_object, nil)
		if TB3D_Modders.use_perception_message == true then
			s_obj:set_callback(callback.hear, nil)
		end
		db.destroy_stalker(s_obj)				--109940
		db.del_sound(s_obj)						--109974
	else
		if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("xr motivator: net_destroy[Nil self.object]") end
	end
	if force_obinder then object_binder.net_destroy(self) end			--110010
	if is_report then
		TB3D_Services.packet_alert("xr motivator: net_destroy["..utils.to_str(sname).."] done")
	end
	--TB3D_Services.packet_alert("xr motivator: net destroy done")
end

function motivator_binder:clear_callbacks()
	if self.object == nil then
		if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("xr motivator: clear callbacks[Nil self.object]") end
		return
	end
	self.object:set_patrol_extrapolate_callback(nil)
	self.object:set_callback(callback.hit, nil)
	self.object:set_callback(callback.death, nil)
	if TB3D_Modders.use_perception_message == true then
		self.object:set_callback(callback.hear, nil)
	end
end

local foto_monolits = {
["foto_monolitovets"] = true,
["milit_zapas_fotomuzhik"] = true,
["military_fotomuzhik"] = true,
["zapasnoy_foto_muzhik"] = true,
["esc_foto_muzhik"] = true
}
-------health CANNOT be changed here as it can cause update errors
function motivator_binder:hit_callback(obj, amnt, local_direction, who, bone_index)
	--TB3D_Services.packet_alert("xr motivator: HIT_CALLBACK["..obj:name().."]")
	if _g.is_disconnecting then return end			--110010
	if obj and self.object then
		local is_report = false
		local obj_name = obj:name()
		local who_name = who:name()
		if TB3D_Modders.use_state_message and obj_name == TB3D_Modders.npc_to_log then is_report = true end
		if is_report then TB3D_Services.packet_alert("xr motivator: hit callback npc["..obj_name.."] by["..who_name.."] amount["..utils.to_str(amt).."] start") end
		local amount = amnt or 0
		local bone_group = 0
		local se_obj = alife():object(obj_name)
		if se_obj and (IAmAStalker[se_obj:clsid()]) then
			if who and who.object and se_obj.community then
				local se_who = alife():object(who_name)
				if se_who and se_who.community and se_obj:community() == se_who:community() then
					if is_report then TB3D_Services.packet_alert("xr motivator: HIT_CALLBACK done npc["..obj_name.."] [C=C]") end
					return
				end			-- don't bother with it
			end
			if TB3D_Services.is_immortal(obj) == true then						--immortals, give full health then drop to reatcions section
				if is_report or TB3D_Modders.show_hit_invulnerable == true then
					TB3D_Services.packet_alert("xr motivator: immortal["..obj_name.."] amount["..utils.to_str(amount).."] by["..who_name.."]")
				end
			elseif foto_monolits[obj:name()] then								--110007, invisible stalkers for photo quests
				TB3D_Services.abort_alert("xr motivator: hit callback[foto monolitovetz] !!!!")
				xr_logic.issue_event(self.object, self.st.hit, "hit_callback", obj, 1, local_direction, who, 18)
				return
			else
				-- use bone groups to check armor/gloves/helmets to adjust amount and hp before issuing events
				if bone_index == 0 then											--armor
					if amount > 0 then 											--penetrated
						bone_group = 10
					else
						if is_report then TB3D_Services.packet_alert("xr motivator: HIT_CALLBACK npc["..obj_name.."] done [0-0]") end
						return
					end
				elseif bone_index > 10 and bone_index < 18 then						--head
					--check helmet here
					bone_group = 1
				elseif bone_index == 10 or bone_index == 18 or bone_index == 31 then	--chest
					--check armor here
					bone_group = 2
				elseif bone_index == 9 then										--waist
					--check armor here
					bone_group = 3
				elseif bone_index < 9 then										-- legs
					--check armor here
					bone_group = 4
				elseif bone_index == 19 or bone_index == 20 then				-- left arm
					--check armor here
					bone_group = 5
				elseif bone_index == 32 or bone_index == 33 then				-- right arm
					--check armor here
					bone_group = 6
				elseif bone_index > 20 and bone_index < 31 then					-- left hand
					--check gloves here
					bone_group = 7
				elseif bone_index > 33 and bone_index < 44 then					-- right hand
					--check gloves here
					bone_group = 8
				end
				if is_report or TB3D_Modders.use_combat_message then
					TB3D_Services.packet_alert("xr motivator: HIT_CALLBACK["..obj_name.."] by["..who_name.."] amount["..utils.to_str(amount).."] bone["..utils.to_str(bone_index).."]")
				end
				if TB3D_Services.is_invulnerable(obj) == true then
					if is_report or TB3D_Modders.show_hit_invulnerable == true then
						TB3D_Services.packet_alert("xr motivator: invulnerable["..obj_name.."] bone group["..utils.to_str(bone_group).."] amount["..utils.to_str(amount).."]  by["..who_name.."]")
					end
					if db.stalker[obj:id()].hits or TB3D_Services.check_invuln_can_die(obj) == true then		-- if quest to kill him
						if bone_group == 1 then									--head shot
							if db.stalker[obj:id()].hits then
								db.stalker[obj:id()].hits = db.stalker[obj:id()].hits + hit_head
								if is_report or TB3D_Modders.show_hit_invulnerable == true then
									TB3D_Services.packet_alert("xr motivator: invulnerable["..obj_name.."] hit table inc["..utils.to_str(db.stalker[obj:id()].hits).."] by["..who_name.."]")
								end
							else
								db.stalker[obj:id()].hits = hit_head
							end
						elseif bone_group > 1 then
							if db.stalker[obj:id()].hits then
								db.stalker[obj:id()].hits = db.stalker[obj:id()].hits + 1
								if is_report or TB3D_Modders.show_hit_invulnerable == true then
									TB3D_Services.packet_alert("xr motivator: invulnerable["..obj_name.."] hit table inc["..utils.to_str(db.stalker[obj:id()].hits).."] by["..who_name.."]")
								end
							else
								db.stalker[obj:id()].hits = 1
							end
						end
						if db.stalker[obj:id()].hits and db.stalker[obj:id()].hits > hit_max then
							obj:kill(obj)
							db.stalker[obj:id()].hits = nil
						end
					elseif bone_group == 1 and who:id() == db.actor:id() then						--actor wants him dead so make mortal
						db.stalker[obj:id()].hits = hit_head
					end
					if string_find(obj_name, "esc_shustryi") then
						amount = 0																	--skip reaction, shustry will react to bandits otherwise
					end
				elseif self.object:section() == "stalker_monolith" then
					if bone_group == 1 then															--head shot
						if db.stalker[obj:id()].hits then
							db.stalker[obj:id()].hits = db.stalker[obj:id()].hits + hit_head
							if is_report or TB3D_Modders.show_hit_invulnerable == true then
								TB3D_Services.packet_alert("xr motivator: monolith["..obj_name.."] hit table inc["..utils.to_str(db.stalker[obj:id()].hits).."] by["..who_name.."]")
							end
						else
							db.stalker[obj:id()].hits = hit_head
						end
					elseif bone_group > 1 then
						if db.stalker[obj:id()].hits then
							db.stalker[obj:id()].hits = db.stalker[obj:id()].hits + 1
							if is_report or TB3D_Modders.show_hit_invulnerable == true then
								TB3D_Services.packet_alert("xr motivator: monolith["..obj_name.."] hit table inc["..utils.to_str(db.stalker[obj:id()].hits).."] by["..who_name.."]")
							end
						else
							db.stalker[obj:id()].hits = 1
						end
					end
					if db.stalker[obj:id()].hits and db.stalker[obj:id()].hits > hit_max then
						obj:kill(obj)
						db.stalker[obj:id()].hits = nil
					end
				else -- not invulnerable or monolith
					-- random weapon dropping if shot in arm or hand 				--- By dAVROs --19073, redone 109932 TB3D
					local need_drop = false
					if bone_group == 5 or bone_group == 6 then 						-- right or left arm hit 
						if bone_index > 33 or bone_index == 20 then 
							need_drop = (math.random(100)<10)						--forearm	moderate chance 10%
						else
							need_drop = (math.random(100)<5)						--upper arm	low chance 5%
						end
					elseif bone_group == 7 or bone_group == 8 then 					-- Either hand/fingers hit
						need_drop = (math.random(100)<20)							-- high chance 20%
					elseif bone_group == 10 then									-- hit protection
						if who:id() == db.actor:id() then return end				-- if actor then aiming condition so trash it
					end
					if need_drop and amount > 0 then
						if is_report then TB3D_Services.packet_alert("xr motivator: need drop weapon["..obj_name.."] hit by["..who_name.."] amount["..utils.to_str(amount).."] bone["..utils.to_str(bone_index).."]") end
						local act_item = self.object:active_item()
						if act_item then self.object:drop_item(act_item) end
					end
				end --is_invulnerable
			end	--is_immortal
			-- set active circuits in scheme, reactions section, 0 amount still gets relation change
			if is_report or TB3D_Modders.use_combat_message then
				TB3D_Services.packet_alert("xr motivator: HIT_CALLBACK["..obj_name.."] by["..who_name.."] amount["..utils.to_str(amount).."] bone["..utils.to_str(bone_index).."] set reactions")
			end
			if self.st.active_section then
				xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "hit_callback", obj, amount, local_direction, who, bone_index)
			end
			if self.st.combat_ignore then
				xr_logic.issue_event(self.object, self.st.combat_ignore, "hit_callback", obj, amount, local_direction, who, bone_index)
			end
			if self.st.combat then
				xr_logic.issue_event(self.object, self.st.combat, "hit_callback", obj, amount, local_direction, who, bone_index)
			end
			if self.st.hit then
				xr_logic.issue_event(self.object, self.st.hit, "hit_callback", obj, amount, local_direction, who, bone_index)
			end																										-- set active circuits done
			if TB3D_Services.is_collector(405) then																	--110006 ogse
				if xr_companion.is_companion(self.object:id()) then
					if amount < 0.3 then
						xr_sound.set_sound(self.object, nil)
						stop_play_sound(self.object)
					end
					xr_companion.we_are_hit(self.object, who, true)
				end	
			end
			--TB3D_Services.packet_alert("xr motivator: HIT_CALLBACK["..obj_name.."] by["..who_name.."] amount["..utils.to_str(amount).."] bone["..utils.to_str(bone_index).."] set relations")
			if amount > 0 or bone_group > 0 then
				--blowout_scheme.hit_callback(obj)			--done in blowout scheme if hit_npc_blowout = true, TB3D 109932
				if sr_territory then sr_territory.issue_event(self.object, "hit_callback", obj, amount, local_direction, who, bone_index) else TB3D_Services.packet_alert("xr motivator: death callback sr_territory[nil]") end	--determine enemy relation
				xr_wounded.hit_callback(self.object:id())																--medkit use and physcological state
				rx_ai.npc_hit(obj,amount,local_direction,who,bone_index,self.object)									--set rx callbacks
				amk.on_npc_hit(obj, amount, local_direction, who, bone_index)											--calc adrenaline
			end
		end	--se_obj
	--elseif TB3D_Modders.use_abort_message == true then
		--TB3D_Services.abort_alert("xr motivator: [self.object] [Nil] !!!!")											--110010, HAPPENS CONSTANTLY
	end
	--TB3D_Services.packet_alert("xr motivator: HIT_CALLBACK done")
end

function motivator_binder:death_callback(victim, who)
	if self.object == nil then
		if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("xr motivator: death callback self.object[Nil]!!!!") end
		return
	end
	if _g.is_disconnecting then return end			--110010
	local is_report = false
	if TB3D_Modders.use_state_message and string_find(victim:name(), TB3D_Modders.npc_to_log) then is_report = true end
	if TB3D_Modders.use_combat_message then
		TB3D_Services.packet_alert("xr motivator: death callback s_object["..utils.to_str(self.object:name()).."] victim["..utils.to_str(victim:name()).."] who["..utils.to_str(who:name()).."]")
	end
	db.del_stalker(self.object)			-- remove from the Soul Cube register
	--TB3D_Services.info_alert("xr motivator: death callback 1")
	bb_mod.npcondeath(victim, who)		-- BB Mod
	if TB3D_Modders.use_xtrm_ai then xrs_ai.npc_death_callback(self.object) end
	rx_ai.npc_death(self.object,who)
	if who:id() == db.actor:id() then
		dmx_mod.blood_hud_will(victim)				--!!!!TB3D   dmx135
		xr_statistic.addKillCount(self.object)		--109998
		bind_soul_cube.add_soul()					-- Cube Shadow
	end
	if self.st.death then
		xr_logic.issue_event(self.object, self.st.death, "death_callback", victim, who)
	end
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "death_callback", victim, who)
	end
	--TB3D_Services.info_alert("xr motivator: death callback 2")
	if sr_territory then sr_territory.issue_event(self.object, "death_callback", victim, who) else TB3D_Services.packet_alert("xr motivator: death callback sr_territory[nil]") end
	sr_light.check_light(self.object)
	smart_terrain.on_death( self.object:id() )
	amk.on_death(victim, who)										-- added by xStream for AMK miniSDK
	local community = self.object:character_community()
	if community == nil then
		community = "nil"					--109995
	elseif community == "zombied" then		--not registered in ranking
		TB3D_Services.inc_targets_dead(1)
	elseif community == "monolith" then		--not registered in ranking
		TB3D_Services.inc_targets_dead(2)
	elseif community == "arena_enemy" then
		--not registered in ranking
	else	--registered in ranking
		if community == "bandit" then
			TB3D_Services.inc_targets_dead(3)
		elseif community == "killer" then
			TB3D_Services.inc_targets_dead(4)
		elseif community == "lastday" then
			TB3D_Services.inc_targets_dead(5)
		end
		actor_stats.remove_from_ranking(self.object:id())
	end
	local se_obj = alife():object(self.object:id())
	if se_obj then
		if se_obj.death_droped == false then
			if death_manager then 												--some npc do not get this class attached
				death_manager.drop_manager(self.object):check_dead_info()		--give death infos
				death_manager.drop_manager(self.object):check_dead_weapons()	--randomly changes condition
				death_manager.drop_manager(self.object):check_dead_items()		--see if all.spawn npc with no inventory except pda
			end
			se_obj.death_droped = true
		end
	end
	if TB3D_Modders.death_hit == true then TB3D_hit_styles.death_hit(victim, self.object) end	--' Draw little momentum forward.
	self:clear_callbacks()
	if #self.particles > 0 then
		for kk,vv in pairs(self.particles) do
			vv:on_death()
		end
	end
	if TB3D_Services.is_collector(406) then xr_companion.companion_death(self.object) end		--109950 ogse	
	if is_report or TB3D_Modders.use_combat_message then
		TB3D_Services.packet_alert("xr motivator: death callback victim["..utils.to_str(victim:name()).."] done")
	end
end

function motivator_binder:use_callback(obj, who)
	if TB3D_Modders.Global_Debug then
		TB3D_Services.info_alert("xr motivator: callback")
	end
	if _g.is_disconnecting then return end			--110010
	if self.object == nil then
		if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("xr motivator: use[Nil self.object]") end
		return
	end
	if self.object:alive() then
		xr_use.notify_on_use(obj, who)
		if self.st.active_section then
			xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "use_callback", obj, who)
		end
	else
		if self.treasure_processed == false then
			treasure_manager:get_treasure_manager():use(self.object)
			self.treasure_processed = true
		end
	end
	if self.object ~= nil then
		if string.find(self.object:section(),"zombie") ~= nil then
			sak.zombie_checkup()
		end
	end
	amk.on_use(obj, who)	-- added by xStream for AMK miniSDK
	if TB3D_Modders.Global_Debug then
		TB3D_Services.info_alert("xr motivator: callback done")
	end
end

local motivator_delta = TB3D_Modders.delta_motivator
function motivator_binder:update(delta)
	if _g.is_disconnecting then return end				--110010
	if TB3D_Modders.Global_Debug then
		TB3D_Services.packet_alert("xr   motivator: update["..game.get_game_time():timeToString(game.CTime.TimeToMilisecs).."] delta["..utils.to_str(delta).."]")
	end
	if amk.oau_watchdog~=0 then TB3D_Services.crash_alert() end
	local self_object = self.object						--109983
	local self_object_id = self.object:id()
	if self_object == nil or self_object_id == nil then
		if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("xr motivator: update[Nil self.object]") end
		return
	end
	local self_name = self.object:name()				--109983
	local is_report = false
	if not self.first_update then						--109999, force first update
		self.last_update = 0
	end
	if self.last_update < time_global() then			--109999
		if force_obinder then object_binder.update(self, delta) end								--110010
		self.last_update = time_global() + motivator_delta	-- + delta								--110010, don't use delta here
		if TB3D_Modders.use_state_message and string_find(self_name, TB3D_Modders.npc_to_log) then is_report = true end
		if is_report then TB3D_Services.packet_alert("xr motivator: updating npc["..utils.to_str(self_name).."]") end
		if particles[self_object_id] and #particles[self_object_id] > 0 then
			if is_report then TB3D_Services.packet_alert("xr motivator: updating npc["..utils.to_str(self_name).."] removing from particle list") end
			for kk,vv in pairs(particles[self_object_id]) do
				table.insert(self.particles,amk_particle.amk_particle(vv))
				table_remove(particles[self_object_id],kk)
			end
		end
		if #self.particles > 0 then
			if is_report then TB3D_Services.packet_alert("xr motivator: updating npc["..utils.to_str(self_name).."] removing self particles") end
			for kk,vv in pairs(self.particles) do
				if vv then
					if vv:is_finished() then
						self.particles[kk]=nil
					else
						vv:update(delta)
					end
				end
			end
		end
		if self_object:alive() then
			if self.first_update == false then
				self.first_update = true
				death_manager.drop_manager(self_object):check_npc_loadout()
				if TB3D_Services.is_collector(70) then xr_companion.is_companion_se(self_object) end		--109978
				if is_report then
					TB3D_Services.packet_alert("xr motivator: updating npc["..utils.to_str(self_name).."] lname["..utils.to_str(lname).."] sname["..utils.to_str(TB3D_Services.level_on_save()).."] health["..utils.to_str(self_object.health).."] first update")
				end
			else
				if amk.get_npc_relation(self_object,db.actor)=="enemy" and self_object.health > 0.01 then
					if is_report then TB3D_Services.packet_alert("xr motivator: updating npc["..utils.to_str(self_name).."] an enemy so check visible") end
					if self_object:see(db.actor) then
						amk.enemy_see_actor(self_object,"npc")
					end
					if db.actor:see(self_object) then
						amk.actor_see_enemy(self_object,"npc")
					end
				end
				sr_light.check_light(self_object)
				if self.st.state_mgr then
					if is_report then TB3D_Services.packet_alert("xr motivator: updating npc["..utils.to_str(self_name).."] updating state manager") end
					if self.st.state_mgr.combat == false and self.st.state_mgr.alife == false then
						if is_report then TB3D_Services.packet_alert("xr motivator: updating npc["..utils.to_str(self_name).."] updating trade manager") end
						if trade_manager.update(self_object) then
							if self_name == "ds_tweed" then
								TB3D_Triggers.spawn_enemy_at(self_object)						--109981, need motivate non-mob traders
							end
						end
					end
					self.st.state_mgr:update()
				end
				local wpn = utils.wpn_info_get(self_object)
				if wpn["ammo"]~=nil then
					local enemy = self_object:best_enemy()
					if enemy and enemy:id()==db.actor:id() and self_object:see(db.actor) and self.prev_ammo>wpn["ammo"] then
						amk.npc_shot_actor(self_object)
					end
					self.prev_ammo = wpn["ammo"] or 0
				else
					self.prev_ammo = 0
				end
				xr_sound.update(self_object)
				if self_object:is_talk_enabled() then
					self_object:set_tip_text("character_use")
				else
					self_object:set_tip_text("")
				end
				self_object:info_clear()
				local best_enemy = self_object:best_enemy()
				if best_enemy then
					self_object:info_add("enemy -- " .. best_enemy:name())
				end
				local active_section = db.storage[self_object_id].active_section
				if active_section then
					self_object:info_add("section -- " .. active_section)
				end
				self_object:info_add("name -- " .. self_object:name())
				if TB3D_Modders.use_xtrm_ai and xrs_ai then xrs_ai.npc_update(self) end
				rx_ai.npc_update(self_object,self.st,delta)										--110008, added delta
				if dmx_cars.actor_inside_btr() then
					if self_object:position():distance_to(db.actor:position()) <= 3 then
						TB3D_Hit_Styles.small_hit(self_object, 2)								--109980, hit by btr
					elseif dmx_cars.actor_target(self_object) then
						dmx_cars.set_target(self_object_id)										--else add to targets
					end
				elseif dmx_cars.actor_inside_car() then
					if self_object:position():distance_to(db.actor:position()) <= 3 then
						TB3D_Hit_Styles.small_hit(self_object, 1)								--109980, hit by vehicle
					end
				end
			end
		else																					--dead dude
			if self.first_update == false then
				if is_report then TB3D_Services.packet_alert("xr motivator: updating npc["..utils.to_str(self_name).."] first update dead") end
				sr_light.check_light(self_object)
				self.first_update = true
				local se_obj = alife():object(self_object_id)									--spawned dead so won't trigger death callback
				if se_obj then
					--TB3D_Services.packet_alert("xr motivator: ["..utils.to_str(self_name).."] spawned dead")
					if se_obj.death_droped == false then
						death_manager.drop_manager(self_object):check_dead_weapons()			--randomly changes condition and unloads them for check dead items
						death_manager.drop_manager(self_object):check_dead_items()				--see if all.spawn npc with no inventory except pda
						se_obj.death_droped = true
					end
				end
			else
				if self.st.state_mgr then														--Update manager states of the body
					if is_report then TB3D_Services.packet_alert("xr motivator: updating npc["..utils.to_str(self_name).."] updating state manager") end
					self.st.state_mgr:update()
					--self.st.state_mgr = nil													--do not do here, dead bodies are re-entrant
				end
				self_object:set_tip_text_default()
				--self_object:set_tip_text("dead_character_use")								--110004
				self_object:info_clear()
			end
		end
		if TB3D_Services.is_collector(407) then xr_companion.process_enemy(self_object) end		--109950 ogse	
		if is_report then TB3D_Services.packet_alert("xr motivator: updating npc["..utils.to_str(self_name).."] done") end
	end
	if TB3D_Modders.Global_Debug then
		TB3D_Services.packet_alert("xr   motivator: update["..game.get_game_time():timeToString(game.CTime.TimeToMilisecs).."] done")
	end
end

function motivator_binder:reload(section)
	if force_obinder then object_binder.reload(self, section) end	--110010
	--self.object:set_pda_callback(pda_callback)
end

function motivator_binder:net_save_relevant()
	return true
end

function motivator_binder:save(packet)
	if _g.is_disconnecting then return end			--110010
	if TB3D_Modders.use_packet_message then TB3D_Services.packet_alert("xr motivator: binder:save["..utils.to_str(self.object:name()).."]") end
	if force_obinder then object_binder.save(self, packet) end		--110010
	packet:w_bool(self.treasure_processed)
	xr_logic.save_obj(self.object, packet)
	dialog_manager.save(self.object, packet)
	trade_manager.save(self.object, packet)
end

function motivator_binder:load(reader)
	if _g.is_disconnecting then return end			--110010
	local is_report = true
	--if TB3D_Modders.use_state_message and self.object:name() == TB3D_Modders.npc_to_log then is_report = true end
	if is_report then TB3D_Services.packet_alert("xr motivator: load npc["..self.object:name().."] start") end
	self.loaded = true
	if force_obinder then object_binder.load(self, reader) end		--110010
	if reader:r_eof() then
		if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("motivator: binder:load["..self.object:name().."] SAVE FILE IS CORRUPT!!!!") end
		remove_zavis.remove_obj(self.object)
		if not self.object then
			return
		end
	end
	self.treasure_processed = reader:r_bool()
	xr_logic.load_obj(self.object, reader)
	if alife():object(self.object:id()) then
		self.npc_script_version = alife():object(self.object:id()).script_version		--109961, 4,5,6,7 supported by engine
	end
	local old_ver = self.npc_script_version
	if old_ver == nil then																--many third party models
		if is_report then
			TB3D_Services.packet_alert("xr motivator: load npc["..self.object:name().."] unspecified version[nil] set to["..utils.to_str(TB3D_Services.dm_flag_version).."]")
		end
		old_ver = 4
		self.npc_script_version = TB3D_Services.dm_flag_version
	elseif old_ver == 0 then											--models without death info
		if is_report then
			TB3D_Services.packet_alert("xr motivator: load npc["..self.object:name().."] no death info needed")
		end
	elseif old_ver < 7 then												--old models (early soc) and respawns
		if is_report then
			TB3D_Services.packet_alert("xr motivator: load npc["..self.object:name().."] unsupported version["..utils.to_str(self.npc_script_version).."] set to["..utils.to_str(TB3D_Services.dm_flag_version).."]")
		end
		self.npc_script_version = TB3D_Services.dm_flag_version
	elseif old_ver > 7 then												--newer versions: should not occur
		--if is_report then
			TB3D_Services.abort_alert("xr motivator: load npc["..self.object:name().."] unsupported version["..utils.to_str(self.npc_script_version).."] set to["..utils.to_str(TB3D_Services.dm_flag_version).."] !!!!")
		--end
		self.npc_script_version = TB3D_Services.dm_flag_version
	elseif is_report then
		TB3D_Services.packet_alert("xr motivator: load npc["..self.object:name().."] supported version["..utils.to_str(self.npc_script_version).."]")
	end
	dialog_manager.load(self.object, reader, old_ver)
	trade_manager.load(self.object, reader)
	if is_report then TB3D_Services.packet_alert("xr motivator: load npc["..self.object:name().."] done") end
end

function motivator_binder:hear_callback(self, who, sound_type, sound_position, sound_power)
	if _g.is_disconnecting then return end			--110010
	if who:id() == db.actor:id() then
		local type = "nil"		--109995
		if sound_type then
			if sound_type == 134217856 then							--collision like landing or hitting an object 
				type = "Collision"
			elseif bit_and(sound_type, snd_type.weapon) == snd_type.weapon then
				type = "WPN"
				if bit_and(sound_type, snd_type.weapon_shoot) == snd_type.weapon_shoot then
				  type = "WPN_shoot"
				elseif bit_and(sound_type, snd_type.weapon_empty) == snd_type.weapon_empty then
				  type = "WPN_empty"
				elseif bit_and(sound_type, snd_type.weapon_bullet_hit) == snd_type.weapon_bullet_hit then
				  type = "WPN_hit"
				elseif bit_and(sound_type, snd_type.weapon_reload) == snd_type.weapon_reload then
				  type = "WPN_reload"
				end
			elseif bit_and(sound_type, snd_type.item) == snd_type.item then
				type = "ITM"
				if bit_and(sound_type, snd_type.item_pick_up) == snd_type.item_pick_up then
				  type = "ITM_pckup"
				elseif bit_and(sound_type, snd_type.item_drop) == snd_type.item_drop then
				  type = "ITM_drop"
				elseif bit_and(sound_type, snd_type.item_hide) == snd_type.item_hide then
				  type = "ITM_hide"
				elseif bit_and(sound_type, snd_type.item_take) == snd_type.item_take then
				  type = "ITM_take"
				elseif bit_and(sound_type, snd_type.item_use) == snd_type.item_use then
				  type = "ITM_use"
				end
			elseif bit_and(sound_type, snd_type.monster) == snd_type.monster then
				type = "MST"
				if bit_and(sound_type, snd_type.monster_die) == snd_type.monster_die then
				  type = "MST_die"
				elseif bit_and(sound_type, snd_type.monster_injure) == snd_type.monster_injure then
				  type = "MST_damage"
				elseif bit_and(sound_type, snd_type.monster_step) == snd_type.monster_step then
				  type = "MST_step"
				elseif bit_and(sound_type, snd_type.monster_talk) == snd_type.monster_talk then
				  type = "MST_talk"
				elseif bit_and(sound_type, snd_type.monster_attack) == snd_type.monster_attack then
				  type = "MST_attack"
				elseif bit_and(sound_type, snd_type.monster_eat) == snd_type.monster_eat then
				  type = "MST_eat"
				end
			else
				type = sound_type
			end
		end
		TB3D_Services.packet_alert("xr motivator: npc["..utils.to_str(self:name()).."] heard["..utils.to_str(who:name()).."] type["..utils.to_str(type).."] dist["..utils.to_str(self:position():distance_to(who:position())).."] power["..utils.to_str(sound_power).."]")
	end
end

function AddToMotivator(npc)		--just the actor
	if alife() then
		npc:bind_object(this.motivator_binder(npc))
	end
end

-- Evaluatory that have higher priority, and thus interrupt the other scripts are
function addCommonPrecondition(action)
	--action:add_precondition (world_property(xr_evaluators_id.reaction,false))
	action:add_precondition (world_property(xr_evaluators_id.stohe_meet_base + 1,false))
	action:add_precondition (world_property(xr_evaluators_id.sidor_wounded_base + 0,  false))
	action:add_precondition (world_property(xr_evaluators_id.chugai_heli_hunter_base, false))
	action:add_precondition (world_property(xr_evaluators_id.abuse_base, false))
	action:add_precondition (world_property(m_bar.evid_bar_facer, false)) -- DMX MOD
	action:add_precondition (world_property(blowout_scheme.evid_outside, false))
	action:add_precondition (world_property(blowout_scheme.evid_blowout, false))
	action:add_precondition (world_property(blowout_scheme.evid_preblowout, false))
	action:add_precondition(world_property(blowout_scheme.evid_anomaly, false))
	if ricochet_scheme then			--109983, scheme does not exist yet
		action:add_precondition(world_property(ricochet_scheme.evid_ricochet_danger, false))
	end
	if ogsm_hideout then			--109950, scheme does not exist yet
		action:add_precondition(world_property(ogsm_hideout.property_blowout, false))
		action:add_precondition(world_property(ogsm_hideout.property_hideout_lost, false))
		action:add_precondition(world_property(ogsm_hideout.property_inhide, false))
		action:add_precondition(world_property(ogsm_hideout.property_psyzoned, false))
	end
	action:add_precondition(world_property(watcher_act.evid_see_stuff, false))
	if TB3D_Modders.use_xtrm_ai and xrs_ai then xrs_ai.addCommonPrecondition(action) end
	rx_ai.addCommonPrecondition(action)
	if anomaly_evader then			--109950, scheme does not exist yet
		action:add_precondition (world_property(1099,false))
	end	
end

function play_particle(obj,params)
    if obj then
        local id = obj:id()
        if not particles[id] then
             particles[id]={}
        end
        particles[id][#particles[id]+1] = params
    end
end
