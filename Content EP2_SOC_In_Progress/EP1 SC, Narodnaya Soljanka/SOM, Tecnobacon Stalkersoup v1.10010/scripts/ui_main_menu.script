--<!-- TB3D 1.1.0.0.0.7   more options, The Collector, dmx135, removed peudoquicksave, connect message, ddof moved,
-- removed duplicate cheat_spawner, cleanup, auto levels, added red forest, level_intro, disconnecting, db report,
-- load_pause Mini texture init aleks1970, pause menu volume, mp, alias_name, save game
function my_ver() return "1.1.0.0.0.7" end
--TB3D re-written 08/15/2011
-- File:        UI_MAIN_MENU.SCRIPT
-- Description: Load Dialog for STALKER
-- Created:     28.10.2004
-- Lasd edit:	18.01.2006  ------  TB3D re-written 8/15/2011
-- Copyright:   2004 GSC Game World
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Version:     0.9
-- amk_version   = "1.4.1"   --!!!!TB3D  ver used in this mod integration
-- amk_revision   = "(010608-1540)"
-- DMX version 135

pause_menu_init = true

class "main_menu" (CUIScriptWnd)

function main_menu:__init() super()
	self.mbox_mode = 0
   self:InitControls()
   self:InitCallBacks()
	 if level.present() and pause_menu_init then
		self:Show(false)
		local xml = CScriptXmlInit()
		xml:ParseFile("dmx_mod.xml")
		self.load_window = xml:InitStatic("game_load_window", self)
		self.load_window = xml:InitStatic("game_load_window_pause", self) -- new texture aleks1970
		self.level_intro = CUIStatic()
		self.level_intro:SetAutoDelete(true)
		self.level_intro:SetStretchTexture(true)
		self.level_intro:Init("Intro\\intro_dmx_"..level.name(),275,369,475,257) --pause_dmx_folder
		self:AttachChild(self.level_intro)
		self.sound_volume_music = get_console():get_float("snd_volume_music")
		local vol = TB3D_Modders.volume_on_pause or 1						-- range: 0 to 1.0
		get_console():execute("snd_volume_music "..utils.to_str(vol))		-- 109982
		level.set_snd_volume(0)
		level.hide_indicators()
	 end
end

function main_menu:__finalize()
end

function main_menu:InitControls()
	self:Init(0,0,winx,winy)			  
	self:SetAutoDelete(true)		--109975
    local xml = CScriptXmlInit()
	if TB3D_Modders.menu_show_keys then --and amk.check_game() then
		xml:ParseFile("ui_mm_main_keys.xml")
	else
		xml:ParseFile("ui_mm_main.xml")
	end
    xml:InitStatic("back_movie", self)
    xml:InitStatic("background", self)
    self.shniaga = xml:InitMMShniaga("shniaga_wnd",self)
	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box, "msg_box")
	local mm = _G.main_menu.get_main_menu()
	local _ver = xml:InitStatic("mod_version",self)
	if mm.GetGSVer and mm:GetGSVer() ~= nil then
		_ver:SetText(" GSC["..mm:GetGSVer().."] STALKERSOUP "..TB3D_Services.title_ver())
	else
		TB3D_Services.packet_alert("GSC Version 1.0006/1.0008ww only")
		_ver:SetText("GSC[1.0004] STALKERSOUP "..TB3D_Services.title_ver())
	end
	_ver:SetTextColor(255,60,100,180)
end

function main_menu:Show(f)
	self.shniaga:SetVisibleMagnifier(f)
end

function main_menu:InitCallBacks()
	-- new game
	self:AddCallback("btn_novice",		ui_events.BUTTON_CLICKED,			self.OnButton_new_novice_game,		self)
	self:AddCallback("btn_stalker",		ui_events.BUTTON_CLICKED,			self.OnButton_new_stalker_game,		self)
	self:AddCallback("btn_veteran",		ui_events.BUTTON_CLICKED,			self.OnButton_new_veteran_game,		self)
	self:AddCallback("btn_master",		ui_events.BUTTON_CLICKED,			self.OnButton_new_master_game,		self)
	self:AddCallback("btn_collector",	ui_events.BUTTON_CLICKED,			self.OnButton_new_collector_game,	self)	--!!!!TB3D
	self:AddCallback("btn_spawn",		ui_events.BUTTON_CLICKED,			self.OnButton_load_spawn,			self)
	-- options																											
	self:AddCallback("btn_options",     ui_events.BUTTON_CLICKED,			self.OnButton_options_clicked,		self)
	-- load																												
	self:AddCallback("btn_load",        ui_events.BUTTON_CLICKED,			self.OnButton_load_clicked,			self)
	-- save																												
	self:AddCallback("btn_save",		ui_events.BUTTON_CLICKED,			self.OnButton_save_clicked,			self)
	-- multiplayer																										
	--self:AddCallback("btn_multiplayer", ui_events.BUTTON_CLICKED,			self.OnButton_multiplayer_clicked,	self)
	-- quit																												
	self:AddCallback("btn_quit",		ui_events.BUTTON_CLICKED,			self.OnButton_quit_clicked,			self)
	self:AddCallback("btn_quit_to_mm",	ui_events.BUTTON_CLICKED,			self.OnButton_disconnect_clicked,	self)
	self:AddCallback("btn_ret",			ui_events.BUTTON_CLICKED,			self.OnButton_return_game,			self)
	self:AddCallback("btn_lastsave",	ui_events.BUTTON_CLICKED,			self.OnButton_last_save,			self)
	self:AddCallback("btn_credits",		ui_events.BUTTON_CLICKED,			self.OnButton_credits_clicked,		self)
	-- message box																										
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_OK_CLICKED,		self.OnMsgOk,						self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_CANCEL_CLICKED,	self.OnMsgCancel,					self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_YES_CLICKED,		self.OnMsgYes,						self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_NO_CLICKED,		self.OnMsgNo,						self)
	self:AddCallback("msg_box",		ui_events.MESSAGE_BOX_QUIT_GAME_CLICKED,self.OnMessageQuitGame,				self)
	self:AddCallback("msg_box",		ui_events.MESSAGE_BOX_QUIT_WIN_CLICKED,	self.OnMessageQuitWin,				self)
	--amk
	self:AddCallback("btn_amk",		ui_events.BUTTON_CLICKED,				self.amk_options,		self)

end
function main_menu:OnMsgOk()
	self.mbox_mode = 0
end

function main_menu:OnMsgCancel()
	self.mbox_mode = 0
end

function main_menu:OnMsgYes()
	
	if 	self.mbox_mode == 1 then
		self:LoadLastSave()	
	end

	self.mbox_mode = 0
end

function main_menu:OnMsgNo()
	self.mbox_mode = 0
end

function main_menu:LoadLastSave()
	local					console = get_console()
	console:execute			("main_menu off")
	console:execute			("load_last_save")
end

function main_menu:OnButton_last_save()
	if (alife() == nil) then
		self:LoadLastSave	();
		return
	end
	self.mbox_mode			= 1
	self.message_box:Init	("message_box_confirm_load_save")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnButton_credits_clicked()
--	local console = get_console()
--	console:execute("main_menu off")
	game.start_tutorial("credits_seq")
end

function main_menu:OnButton_quit_clicked()
	self.message_box:Init("message_box_quit_windows")
	self:GetHolder():start_stop_menu(self.message_box, true)
end


function main_menu:OnButton_disconnect_clicked()
	self.message_box:Init("message_box_quit_game")
	if (level.game_id() ~= 1) then		
		self.message_box:SetText("ui_mm_disconnect_message")	-- MultiPlayer
	else
		self.message_box:SetText("ui_mm_quit_game_message")		-- SinglePlayer
	end
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnMessageQuitGame()
	TB3D_Services.start_disconnect()
	local console = get_console()
	console:execute("disconnect")
end

function main_menu:OnMessageQuitWin()
	TB3D_Services.start_disconnect()
	local console = get_console()
	console:execute("quit")
end

function main_menu:OnButton_return_game()
	local console = get_console()
	console:execute("main_menu off")
end

function main_menu:OnButton_new_novice_game()
	self:StartGame(0)	
end

function main_menu:OnButton_new_stalker_game()
	self:StartGame(1)
end

function main_menu:OnButton_new_veteran_game()
	self:StartGame(2)
end

function main_menu:OnButton_new_master_game()
	self:StartGame(3)
end

--local start_collector = false
function main_menu:OnButton_new_collector_game()	--!!!!TB3D
	self:StartGame(4)
end

function main_menu:StartGame(index)
	local console = get_console()
	if (alife() ~= nil) then
		TB3D_Services.start_disconnect()
		console:execute	("disconnect")	
	end
	if index == 4 then
		console:execute("g_game_difficulty gd_master")
		console:execute("mm_net_srv_name gd_collector")	--!!!!TB3D Starts Free Play as The Collector
	elseif index ==3 then
		console:execute("g_game_difficulty gd_master")
		console:execute("mm_net_srv_name gd_master")
	elseif index ==2 then
		console:execute("g_game_difficulty gd_veteran")
		console:execute("mm_net_srv_name gd_veteran")
	elseif index == 1 then
		console:execute("g_game_difficulty gd_stalker")
		console:execute("mm_net_srv_name gd_stalker")
	else
		console:execute("g_game_difficulty gd_novice")
		console:execute("mm_net_srv_name gd_novice")
	end
	console:execute("flush")
	console:execute("start server(all/single/alife/new) client(localhost)")
	console:execute("main_menu off")
end

function main_menu:OnButton_load_spawn()
	if self.spawn_dlg == nil then
		self.spawn_dlg = ui_spawn_dialog.spawn_dialog()
		self.spawn_dlg.owner = self
	end
	self:GetHolder():start_stop_menu(self.spawn_dlg, true)
	self:GetHolder():start_stop_menu(self, true) --new
	self:Show(false)
end

function main_menu:OnButton_save_clicked()
	if self.save_dlg == nil then
		self.save_dlg = ui_save_dialog.save_dialog()
		self.save_dlg.owner = self
	end
	self:GetHolder():start_stop_menu(self.save_dlg, true)
	self:GetHolder():start_stop_menu(self, true) --new
	self:Show(false)
end

function main_menu:OnButton_options_clicked()
	if self.opt_dlg == nil then
		self.opt_dlg = ui_mm_opt_main.options_dialog()
		self.opt_dlg.owner = self
	end
	self.opt_dlg:UpdateControls()
	self:GetHolder():start_stop_menu(self.opt_dlg, true)
	self:GetHolder():start_stop_menu(self, true) --new
	if biodetector then biodetector.force_update() end
	self:Show(false)
  --amk_mod.hud_update=true
end

function main_menu:OnButton_load_clicked()
	if self.load_dlg ==nil then
		self.load_dlg = ui_load_dialog.load_dialog()
		self.load_dlg.owner = self
	end
	self:GetHolder():start_stop_menu(self.load_dlg, true)
	self:GetHolder():start_stop_menu(self, true) --new
	self:Show(false)
end

--[[
function main_menu:OnButton_multiplayer_clicked()
	if self.mp_dlg ==nil then
		self.mp_dlg = ui_mp_main.mp_main()
		self.mp_dlg.owner = self
	end
	self.mp_dlg:UpdateControls()
	self:GetHolder():start_stop_menu(self.mp_dlg, true)
	self:GetHolder():start_stop_menu(self, true) --new
	self:Show(false)
	--local console			= get_console()
	--console:execute			("check_for_updates 0")
	self.mp_dlg:OnRadio_NetChanged()
end

function main_menu:Dispatch(cmd, param)  --virtual function
	if cmd == 2 then
		self:OnButton_multiplayer_clicked()
	end
	return true
end
--]]

---------------!!!!TB3D Modders tools --------------------
function main_menu:tele()
  if TB3D_Services.isGameOn() == true then
    get_console():execute("main_menu off")
    local spwn = ui_TB3D_Teleport.ui_TB3D_Teleport(get_hud())
    level.start_stop_menu(spwn,true)
  end
end
function main_menu:cheat_spawner(action)
  if TB3D_Services.isGameOn() == true then
    get_console():execute("main_menu off")
    local spwn = ui_cheat_spawner.spawner(get_hud(),action)
    level.start_stop_menu(spwn,true)
  end
end
function main_menu:start_atlas2(action)
	if TB3D_Services.isGameOn() == true then
		get_console():execute("main_menu off")
    	local target = ui_atlas2.atlas(get_hud(),action)
    	level.start_stop_menu(target, true)
	end
end
function main_menu:start_atlas3(action)
	if TB3D_Services.isGameOn() == true then
		get_console():execute("main_menu off")
		local target = ui_atlas3.atlas(get_hud(),action)
		level.start_stop_menu(target, true)
	end
end
function main_menu:OnButton_spawns_clicked()
	if TB3D_Services.isGameOn() == true then
		-- get_console():execute("main_menu off")
		if self.spawn_dlg == nil then
			self.spawn_dlg = ui_si.spawn_item_dialog()
			self.spawn_dlg.owner = self
		end
		self:GetHolder():start_stop_menu(self.spawn_dlg, true)
		self:Show(false)
	end
end
function main_menu:setweather()
  if TB3D_Services.isGameOn() == true then
    get_console():execute("main_menu off")
    local spwn = ui_weather.ui_ms_weather(get_hud(),action)
    level.start_stop_menu(spwn,true)
  end
end
-------------------------------------------------------------

function main_menu:OnKeyboard(dik, keyboard_action)  --virtual function
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	local bind = dik_to_bind(dik)
	local console = get_console()
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		-- DMX MOD on
		if self.load_window then
			self:DetachChild(self.level_intro)
			console:execute("snd_volume_music "..self.sound_volume_music)
			console:execute("main_menu off")
			level.set_snd_volume(1)
			level.show_indicators()
			set_inactivate_input_time(5)
			pause_menu_init = false
			news_main.connection_message()
		--end
		-- DMX MOD off
		elseif dik == DIK_keys.DIK_ESCAPE then
			--if level.present() and (db.actor ~= nil) and db.actor:alive() then
				console:execute("main_menu off")
			--end
			--TB3D Modders tools --------------------
		elseif 	dik == DIK_keys.DIK_F1 then	--show game vertex info
			ui_cheat_spawner.show_actor_position()
			console:execute("main_menu off")
		elseif 	dik == DIK_keys.DIK_F2 then	--teleporter
			self:tele()			
		elseif 	dik == DIK_keys.DIK_F3 then		--remove anoms in 10 mtr radius
			if level.present() and (db.actor ~= nil) and db.actor:alive() then
				if anom_remover then anom_remover.remove_anoms() end
			end
			console:execute("main_menu off")
		elseif 	dik == DIK_keys.DIK_F4 then	--spawn item into game
			self:cheat_spawner("spawn")
		elseif 	dik == DIK_keys.DIK_F5 then	--remove item from level
			self:cheat_spawner("remove")
			----------------------------------------------------
		-- The system saves the game fast
		elseif dik == DIK_keys.DIK_F6 then
			if level.present() and (db.actor ~= nil) and db.actor:alive() then
				--local console = get_console()
				console:execute("main_menu off")
				console:execute("save ".."tb3d_quicksave")
			end
		elseif dik == DIK_keys.DIK_F7 then
			if ui_load_dialog.file_exist("tb3d_quicksave.sav") then
				--local console = get_console()
				if (alife() == nil) then
					TB3D_Services.start_disconnect()
					console:execute("disconnect")	
					console:execute("start server(".."tb3d_quicksave".."/single/alife/load) client(localhost)")	
				else
					TB3D_Services.start_disconnect()
					console:execute("load ".."tb3d_quicksave")	
				end
			end
		elseif dik == DIK_keys.DIK_F8 then
			if level.present() and (db.actor ~= nil) and db.actor:alive() then									--110007
				local save_alias = utils.to_str(TB3D_Services.get_game_time()).."_"..utils.to_str(TB3D_Services.get_level_up()).."_"
				if TB3D_Modders.alias_name then
					save_alias = save_alias..TB3D_Modders.alias_name.."_"
				end
				console:execute("main_menu off")
				console:execute("save "..save_alias..level.name())
			end
		elseif dik == DIK_keys.DIK_Q then
			self:OnMessageQuitWin()
		--TB3D Modders tools --------------------
		elseif dik == DIK_keys.DIK_A then	--ammo into backpack
			self:start_atlas3("spawn")
		elseif 	dik == DIK_keys.DIK_F then		--change attitude of npc
			self:cheat_spawner("set_npc_goodwill")
		elseif 	dik == DIK_keys.DIK_R then		--ressurect the dead below your feet
			if level.present() and (db.actor ~= nil) and db.actor:alive() then
				ui_cheat_spawner.deadman_to_life()
			end
		elseif dik == DIK_keys.DIK_W then		--spawn weapon in bp
			self:start_atlas2("spawn")
		elseif	dik == DIK_keys.DIK_S then			--spawn menu
			self:OnButton_spawns_clicked()
		elseif	dik == DIK_keys.DIK_E then			--environment (weather)
			self:setweather()
		elseif	dik == DIK_keys.DIK_H then			--headbob off
			--if level.present() and (db.actor ~= nil) and db.actor:alive() then
				console:execute("main_menu off")
				console:execute("cam_inert 0")
			--end
		elseif	dik == DIK_keys.DIK_B then			--headbob on
			--if level.present() and (db.actor ~= nil) and db.actor:alive() then
				console:execute("main_menu off")
				console:execute("cam_inert 0.4")
			--end
		elseif	dik == DIK_keys.DIK_N then			--toggle digital nv
			if TB3D_Services.give_info("tb3d_nv_always") == false then
				TB3D_Services.remove_info("tb3d_nv_always")
			end
			console:execute("main_menu off")
		elseif	dik == DIK_keys.DIK_0 then			--toggle debug trace
			TB3D_Modders.Global_Debug = not TB3D_Modders.Global_Debug
			console:execute("main_menu off")
		elseif	dik == DIK_keys.DIK_EQUALS then				--hyper time
			level.set_time_factor(500)
			console:execute("main_menu off")
		elseif	dik == DIK_keys.DIK_MINUS then			--normal time
			TB3D_Services.time_resync()	--resync time of day
			console:execute("main_menu off")
		elseif	dik == DIK_keys.DIK_D then			--data base report
			db.show_counts()
			console:execute("main_menu off")
--[[		elseif	dik == DIK_keys.DIK_1 then			--normal time
			level.set_time_factor(1)
			console:execute("main_menu off")
		elseif	dik == DIK_keys.DIK_2 then			--normal time
			level.set_time_factor(2)
			console:execute("main_menu off")
		elseif	dik == DIK_keys.DIK_3 then			--normal time
			level.set_time_factor(3)
			console:execute("main_menu off")
		elseif	dik == DIK_keys.DIK_4 then			--normal time
			level.set_time_factor(4)
			console:execute("main_menu off")
		elseif	dik == DIK_keys.DIK_5 then			--normal time
			level.set_time_factor(5)
			console:execute("main_menu off")]]--
		--elseif	dik == DIK_keys.DIK_9 then			--clear actor inventory, for testing only
			--amk.clear_npc_inventory(db.actor)
			--console:execute("main_menu off")
		-------------------------------------------------	
		end
	end
	return true
end

function main_menu:amk_options()
-- if you have never called, then we put our new script
	if self.amk_options_dlg == nil then
		self.amk_options_dlg = ui_amk_options.amk_options()
		self.amk_options_dlg.owner = self
	end
-- stop the parent element, run its own, but the parents show.
	self:GetHolder():start_stop_menu(self.amk_options_dlg, true)
	self:GetHolder():start_stop_menu(self, true)
	self:Show(false)
end

function AddTextDigit(str, dig)
	if (dig > 9) then
		str = str .. dig
	else
		str = str .. "0" .. dig
	end
	return str
end
