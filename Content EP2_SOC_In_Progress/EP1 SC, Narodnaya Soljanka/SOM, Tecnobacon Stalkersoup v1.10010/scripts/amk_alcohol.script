-- TB3D 1.0.9.9.1.5 hit styles
function my_ver() return "1.0.9.9.1.5" end
-- Alcohol addiction by Terrapack. Osnovnoye function.
-- Also edit the file amk.script, amk_mod.script
-- translate
---------------------------------------------------------------------------------------------------------------------------------------------------------------
local translate = game.translate_string
--===	Variables	===--
-- old buffer
local ap_old={}
		-- service flags for timers
		ap_old.alco_drink_flag = 0
		ap_old.must_drink_flag = 0
		ap_old.abstinent_step_flag = 0
		ap_old.alcoholic_lose_hp_flag = 0
		ap_old.sober_step_flag = 0
		ap_old.poison_death_flag = 0
		ap_old.alco_dream_flag = 0
		ap_old.alco_good_morning_flag = 0
		
		ap_old.alco_drink_timer = 0
		ap_old.must_drink_timer = 0
		ap_old.abstinent_step_timer = 0
		ap_old.alcoholic_lose_hp_timer = 0
		ap_old.sober_step_timer = 0
		ap_old.poison_death_timer = 0
		ap_old.alco_dream_timer = 0
		ap_old.alco_good_morning_timer = 0
		
		ap_old.amk_gg_bottle_drinked = 0
		ap_old.amk_gg_bottle_summary_drinked = 0
		ap_old.amk_gg_is_alcoholic = 0
		ap_old.alco_objectid = -1
--
-- new buffer
local ap={}
		-- service flags for timers
		ap.a0 = 0	--ap_old.alco_drink_flag
		ap.a1 = 0	--ap_old.alco_drink_timer
		
		ap.b0 = 0	--ap_old.must_drink_flag
		ap.b1 = 0	--ap_old.must_drink_timer
		
		ap.c0 = 0	--ap_old.abstinent_step_flag
		ap.c1 = 0	--ap_old.abstinent_step_timer
		
		ap.d0 = 0	--ap_old.alcoholic_lose_hp_flag
		ap.d1 = 0	--ap_old.alcoholic_lose_hp_timer
		
		ap.e0 = 0	--ap_old.sober_step_flag
		ap.e1 = 0	--ap_old.sober_step_timer
		
		ap.f0 = 0	--ap_old.poison_death_flag
		ap.f1 = 0	--ap_old.poison_death_timer
		
		ap.g0 = 0	--ap_old.alco_dream_flag
		ap.g1 = 0	--ap_old.alco_dream_timer
		
		ap.h0 = 0	--ap_old.alco_good_morning_flag
		ap.h1 = 0	--ap_old.alco_good_morning_timer
		
		ap.a = 0	--ap_old.amk_gg_bottle_drinked
		ap.b = 0	--ap_old.amk_gg_bottle_summary_drinked
		ap.c = 0	--ap_old.amk_gg_is_alcoholic
		ap.d = -1	--ap_old.alco_objectid
--

local alc_todo_alcoholic = 35	--pieces - how many bottles dopeshsya to alcoholism[35]

local alc_to_drink_alcoholic = 24	--hours - how many hours need to drink a bottle if you have alcohol dependence [24]

local alc_unlike_time = 5	--days - days after which occurs the next stage disaccustoming alcohol [5]
local alc_unlike_step = 5	--pieces - a step disaccustoming (decrease alcohol dependence) (if gg_bottle_summary_drinked < alc_unlike_step то gg_bottle_drinked=0) [5]

local sober_time = 8		--how many hours of sober HS
local alc_hp_lose_after_sober = 0.1		--the number of HP, which HS loses after sober (my head hurts and all that)

local alc_time_lose_hp = 4	--hours - just how many hours are lost hp with alcohol dependence if you do not drink vodka
local alc_hp_lose = 0.1		--how many are losing hp if time does not drink as an alcoholic

local alc_max_drink_bottles_to_death = 5	--pieces - how many bottles of vodka - a lethal dose[5]

local alc_max_drink_bottles = 4		--much as you can drink a bottle of vodka, after which the hero falls asleep[4]
local alc_max_drink_to_dream_timer = 15	--minutes - how many minutes YY asleep, if the maximum number of drinks of vodka
local alc_max_drink_dream_time = 12	--hours - how much will oversleep hero after the maximum number of drinks of vodka

-- service flags
local must_drink_flag = 0		--HS-alcoholic to drink [timer 95]
local abstinent_step_flag = 0	--step to reduce alcohol dependence [timer 96]
local alcoholic_lose_hp_flag = 0		--Flag of loss of health, if an alcoholic does not drink [the timer 97]
local sober_step_flag = 0		--HS sober [timer 98]
--
--
--
--= function =--
--
-- Converter from old data type to a new
function convert_variables()
	ap_old = amk.unpack_array_from_string(amk.load_variable("amk_alcohol_params",amk.pack_array_to_string(ap_old)))
	ap = amk.unpack_array_from_string(amk.load_variable("alcpar",amk.pack_array_to_string(ap)))
	ap.a0 = ap_old.alco_drink_flag
	ap.a1 = ap_old.alco_drink_timer
	
	ap.b0 = ap_old.must_drink_flag
	ap.b1 = ap_old.must_drink_timer
	
	ap.c0 = ap_old.abstinent_step_flag
	ap.c1 = ap_old.abstinent_step_timer
	
	ap.d0 = ap_old.alcoholic_lose_hp_flag
	ap.d1 = ap_old.alcoholic_lose_hp_timer
	
	ap.e0 = ap_old.sober_step_flag
	ap.e1 = ap_old.sober_step_timer
	
	ap.f0 = ap_old.poison_death_flag
	ap.f1 = ap_old.poison_death_timer
	
	ap.g0 = ap_old.alco_dream_flag
	ap.g1 = ap_old.alco_dream_timer
	
	ap.h0 = ap_old.alco_good_morning_flag
	ap.h1 = ap_old.alco_good_morning_timer
	
	ap.a = ap_old.amk_gg_bottle_drinked
	ap.b = ap_old.amk_gg_bottle_summary_drinked
	ap.c = ap_old.amk_gg_is_alcoholic
	ap.d = ap_old.alco_objectid
	amk.save_variable("alcpar",amk.pack_array_to_string(ap))
	--flag that had already converted, and no longer need to
	amk.del_variable("amk_alcohol_params")
	amk.save_variable("alcv", 1)
end
-- Reactions to update actor
function check_alcohol()
	--sets the parameters
	-- getting playing time
	local time = amk.game_minutes()
	-- decompression states and flags timers, variables
	if amk.load_variable("alcv", 0) == 0 then
		convert_variables()
	end
	ap = amk.unpack_array_from_string(amk.load_variable("alcpar",amk.pack_array_to_string(ap)))
	--conditions on the drawdown, "timer"
	-- drink vodka
	if ap.a0 == 1 then
		if ap.a1 <= time then 
			if alife():object(ap.d) == nil then
				ap.a0 = 0
				ap.a1 = 0
				ap.d = -1
				alcohol_drink(time)
			end
		end
	end
	--
	-- pomiranie
	if ap.f0 == 1 then
		if ap.f1 <= time then
			reset_dream()
			reset_sober()
			reset_lose_hp()
			ap.f0 = 0 
			ap.f1 = 0 
			amk_alcohol_poison_death()
		end
	end
	--
	-- sleep
	if ap.g0 == 1 then
		if ap.g1 <= time then
			reset_sober()
			ap.g0 = 0
			ap.g1 = 0
			reset_sober()
			amk_alcohol_dream(time)
		end
	end
	--
	--Morning Hangover
	if ap.h0 == 1 then
		if ap.h1 <= time then
			ap.h0 = 0
			ap.h1 = 0
			amk_alcohol_good_morning()
		end
	end
	--
	--protrezvlenie (not sleeping, that is, less than 4 bottles)
	if ap.e0 == 1  then
		if ap.e1 <= time then
			ap.e0 = 0
			ap.e1 = 0
			amk_alcohol_good_morning()
		end
	end
	--
	--time did not drink - soon pokosyachit
	if ap.b0 == 1 then
		if ap.b1 <= time then
			amk_need_alcohol(time)
		end
	end
	--
	--harm if an alcoholic does not drink
	if ap.d0 == 1 then
		if ap.d1 <= time then
			amk_lose_hp(time)
		end
	end
	--
	--step disaccustoming alcohol dependence
	if ap.c0 == 1 then
		if ap.c1 <= time then
			amk_abstinent_step(time)
		end
	end
	--  packing states and flags timers, variables
	amk.save_variable("alcpar",amk.pack_array_to_string(ap))
	
end
--
--Verification of drinking a bottle of vodkafunction drink_vodka(obj)
function drink_vodka(obj)
	-- getting playing time
	local time = amk.game_minutes()
	local section = obj:section()
	local oid = obj:id()
	if (section=="vodka") then
		ap.d  = oid
		ap.a0 = 1
		ap.a1 = time
	end
	amk.save_variable("alcpar",amk.pack_array_to_string(ap))
end
--
function alcohol_drink(game_time)
	--Update variables
	ap.a = ap.a + 1
	ap.b = ap.b +1
	--if you have exceeded a threshold of max. number of bottles, then death
	if ap.a >= alc_max_drink_bottles_to_death then
		reset_dream()
		reset_sober()
		reset_lose_hp()
		ap.a = 0
		ap.b = 0
		ap.f0 = 1
		ap.f1 = game_time + 5 --minute
		news_manager.amk_send_tip(translate("alc_too_much_die"),nil,nil,5)
	end
	--
	--checking whether to "sleep" HS - he drank a max. the number of bottles, but less deadly peak
	if ap.a == alc_max_drink_bottles then
		ap.g0 = 1
		ap.g1 = game_time + alc_max_drink_to_dream_timer --minutes
		news_manager.amk_send_tip(translate("alc_too_much"),nil,nil,5)
	end
	--
	--checking for the appearance of alcoholism
	if ap.c == 0 then
		--character is not an alcoholic, but has now become :)
		if ap.b > alc_todo_alcoholic then
			news_manager.amk_send_tip(translate("alc_todo_alcoholic"),nil,nil,5)
			ap.c = 1
			--there must be a start timer to require acceptance of vodka after n hours
			--timer to the desire of alcohol and Unlearning from it (in theory ought to be that it was after protrezvleniya)
			ap.c0 = 1
			ap.c1 = game_time + alc_to_drink_alcoholic*60 --hours
			ap.b0 = 1
			ap.b1 = game_time + alc_unlike_time*24*60 --days
		end
	elseif ap.c == 1 then
		--if the hero drank vodka amount harvested in less than a dream, then start the timer needs (in theory ought to be that it was after protrezvleniya)
		--
		if ap.a >= 1 then
			if ap.a < alc_max_drink_bottles then
				if ap.b0 == 1 then
					ap.b1 = game_time + alc_to_drink_alcoholic*60 --hours
				end
				if ap.b0 == 0 then
					ap.b0 = 1
					ap.b1 = game_time + alc_to_drink_alcoholic*60 --hours
				end
				--launch disaccustoming immediately after drinking (in theory ought to be that it was after protrezvleniya)
				if ap.c0 == 1 then
					ap.c1 = game_time + alc_unlike_time*24*60 --days
				end
				if ap.c0 == 0 then
					ap.c0 = 1
					ap.c1 = game_time + alc_unlike_time*24*60 --days
				end
			end
		end
	end
	--
	--check timer sobering
	if ap.e0 == 0 then
		ap.e0 = 1
		ap.e1 = game_time + sober_time*60 --hours
	elseif ap.e0 == 1 then
		ap.e1 = game_time + sober_time*60 --hours
	end
end
--
-- functions for timers
--
--death by overdose - a test function, it is necessary to finalize the effectors
function amk_alcohol_poison_death()
	level.add_cam_effector("camera_effects\\head_shot.anm", 5001, false, "")
	db.actor:kill(db.actor)
end
--
--HS sleeps with booze
function amk_alcohol_dream(game_time)
	ap.h0 = 1
	ap.h1 = game_time + alc_max_drink_dream_time*60+10	--hours
	sleep_manager.main(alc_max_drink_dream_time)
end
--
--HS "get" the hangover
function amk_alcohol_good_morning()
	if TB3D_Modders.alcohol_hit == true then
		TB3D_hit_styles.burn(db.actor, db.actor, lc_hp_lose_after_sober, 1, vector():set(0, 0, 0))
		level.add_pp_effector("alcohol.ppe", 3000, false)
	end
   	ap.a = 0
end
--
--Alcoholic needs vodka
function amk_need_alcohol(game_time)
	if ap.b0 == 1 then
		if ap.d0 == 0 then
			ap.d0 = 1
			ap.d1 = game_time + alc_time_lose_hp*60 --hours
			news_manager.amk_send_tip(translate("alc_need_drink"),nil,nil,5)
		end
		if alcoholic_lose_hp_flag == 1 then
			ap.d1 = game_time + alc_time_lose_hp*60 --hours
			news_manager.amk_send_tip(translate("alc_need_drink"),nil,nil,5)
		end
	end
end
--
--Harm to health, if time does not drink
function amk_lose_hp(game_time)	
	if TB3D_Modders.alcohol_hit == true and ap.b0 == 1 then
		TB3D_hit_styles.burn(db.actor, db.actor, alc_hp_lose, 1, vector():set(0, 0, 0))
		ap.d0 = 1
		ap.d1 = game_time + alc_time_lose_hp*60 --hours
		news_manager.amk_send_tip(translate("alc_need_drink_big"),nil,nil,5)
	end
	if ap.b0 == 0 then
		alcoholic_lose_hp_flag = 0
		ap.d0 = 0
		ap.d1 = 0
	end
end
--
--Step disaccustoming worked
function amk_abstinent_step(game_time)
	if ap.c0 == 1 then
		local tmp1 = ap.b
		local tmp2 = tmp1 - alc_unlike_step
		if tmp2 <= 0 then
			ap.b0 = 0
			ap.b1 = 0
			ap.d0 = 0
			ap.d1 = 0
			ap.c0 = 0
			ap.c1 = 0
			ap.b = 0
			ap.c = 0
			news_manager.amk_send_tip(translate("alc_coded"),nil,nil,5)
		end
		if tmp2>0 then
			if tmp2 < alc_todo_alcoholic then
				ap.b0 = 0
				ap.b1 = 0
				ap.d0 = 0
				ap.d1 = 0
				ap.c0 = 1
				ap.c1 = game_time + alc_unlike_time*24*60 --days
				news_manager.amk_send_tip(translate("alc_no_more_need"),nil,nil,5)
			end
			if tmp2 > alc_todo_alcoholic then
				ap.c0 = 1
				ap.c1 = game_time + alc_unlike_time*24*60 --days
			end
			ap.b = ap.b  - alc_unlike_step
		end
	end
end
--
--Reset functions of various flags
--
--Reset flag and the sleep timer
function reset_dream()
	ap.g0 = 0
	ap.g1 = 0
end
--
--Reset flag and the timer protrezvleniya
function reset_sober()
	ap.e0 = 0
	ap.e1 = 0
end
--
--Reset flag and the timer loss of health if the alcoholic does not drink
function reset_lose_hp()
	ap.d0 = 0
	ap.d1 = 0
end
--
--=========================--

