--<!-- TB3D 1.0.9.9.7.4 localized to string_table_arhara.xml, optimized db.actor, cleanup, removed spots, removed autojump
function my_ver() return "1.0.9.9.7.4" end

local level_scripts = {
	escape_tasks,
	garbage_tasks,
	agroprom_tasks,
	darkvalley_tasks,
	bar_rostok_tasks,
    yantar_tasks,
    mil_tasks,
	radar_tasks,
	pripyat_tasks
}

--[[
local jump_level_by_name = {
	l01_escape				= "l02_garbage",
	l02_garbage				= "l03_agroprom",
	l03_agroprom			= "l03u_agr_underground",
	l03u_agr_underground	= "l04_darkvalley",
	l04_darkvalley			= "l04u_labx18",
	l04u_labx18				= "l05_bar",
	l05_bar					= "l06_rostok",
	l06_rostok				= "l07_military",
	l07_military			= "l08_yantar",
	l08_yantar				= "l08u_brainlab",
	l08u_brainlab			= "l10_radar",
	l10_radar				= "l10u_bunker",
	l10u_bunker				= "l11_pripyat",
	l11_pripyat				= "l12_stancia",
	l12_stancia				= "l12u_sarcofag",
	l12u_sarcofag			= "l12u_control_monolith",
	l12u_control_monolith	= "l12_stancia_2",
	l12_stancia_2			= "l01_escape"
}
--]]

function proceed()
	if db.actor then
		for k, v in pairs( level_scripts ) do
			v.proceed()
		end
	--	if has_alife_info("autojump_enabled") then
	--		local jname = jump_level_by_name[level.name()]
	--		if jname ~= nil then
	--			TB3D_Services.info_alert("jump_to_level "..jname)
	--		end
	--	end
	end
end

--function autojump()
	--if not has_info("autojump_enabled") then
		--TB3D_Services.give_info("autojump_enabled")
	--end
--end

function process_info_portion(info_id)			--called from bind stalker on info
	if TB3D_Modders.Global_Debug then TB3D_Services.info_alert("LEVEL TASKS: process info portion") end
	if db.actor then
		for k, v in pairs( level_scripts ) do
			if v.process_info_portion(info_id) then
				return
			end
		end
	end
end

function add_location(sid, location, hint)
	local sim = alife()
	if sim then
		local obj = sim:story_object(sid)
		if obj and level.map_has_object_spot(obj.id, location) == 0 then
			if hint then
				level.map_add_object_spot(obj.id, location, hint)
			else
				level.map_add_object_spot(obj.id, location, "")
			end
		end
	end
end

function remove_location(sid, location)
	local sim = alife()
	if sim then
		local obj = sim:story_object(sid)
		if obj and level.map_has_object_spot(obj.id, location) then
			level.map_remove_object_spot(obj.id, location)
		end
	end
end

function remove_location_safe(sid, location)
	local sim = alife()
	if sim then
		local obj = sim:story_object(sid)
		if obj then
		   for a = 1, level.map_has_object_spot(obj.id, location), 1 do
			   level.map_remove_object_spot(obj.id, location)
		   end	
		end
	end
end

function is_map_spot_present(sid, location)
	local sim = alife()
	if sim then
		local obj = sim:story_object(sid)
		if obj and level.map_has_object_spot(obj.id, location) then
		   return true
		end
	end
	return false
end

function set_task_state(id_state, id_task, id_subtask)
	if db.actor then
		db.actor:set_task_state(id_state, id_task, id_subtask)
	end
end

function notify_new_task()
end
