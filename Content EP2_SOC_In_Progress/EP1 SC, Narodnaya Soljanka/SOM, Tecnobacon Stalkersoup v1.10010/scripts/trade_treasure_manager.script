--TB3D 1.1.0.0.0.1, translate and text color - aleks1970, trade directory, give treasure
function my_ver() return "1.1.0.0.0.1" end

local translate = game.translate_string
local text_color_treasure = TB3D_Services.get_text_color("treasure")

local solid_list = {
--novice section (<300)
 "wpn_mp5_m2",
 "wpn_beretta",
 "wpn_groza",
 "ammo_vog-25p",
 "ammo_m209",
 "ammo_9x39_pab9",
 "ammo_9x39_ap",
 "ammo_9x39_sp5",
 "af_fuzz_kolobok",
 "af_rusty_sea_urchin",
 "af_dummy_glassbeads",
 "af_dummy_pellicle",
 "af_dummy_battery",
 "af_dummy_dummy",
 "af_ameba_mica",
-- experienced section(300 - 600)
 "af_dummy_spring",
 "af_soul",
 "af_cristall",
 "af_gold_fish",
 "af_night_star",
 "af_electra_moonlight",
 "ammo_7.62x54_7h1",
 "ammo_7.62x54_ap",
 "ammo_7.62x54_7h14",
 "ammo_og-7b",
 "outfit_svoboda_m1",
 "protection_outfit",
 "wpn_val",
 "wpn_groza_m1",
 "wpn_val_m1",
 "wpn_rpg7",
 -- veteran section(600 - 900)
 "wpn_fn2000",
 "specops_outfit",
 "af_buliz",
 "af_spirit_1",
 "af_cry_1",
 "af_babka_1",
 "af_pudd_1",
 "af_dik_1",
 "af_kol_1",
 "af_armor_1",
 "af_spirit_2",
 "af_cry_2",
 "af_babka_2",
 "af_pudd_2",
 "af_dik_2",
 "af_kol_2",
 "af_armor_2",
 -- master section(>900)
 "ammo_gauss",
 "wpn_vintorez",
 "wpn_svu",
 "wpn_rg-6",
 "wpn_rg6_m1",
 "wpn_svd",
 "wpn_svd_m1",
 "af_spirit_3",
 "af_cry_3",
 "af_babka_3",
 "af_pudd_3",
 "af_dik_3",
 "af_kol_3",
 "af_armor_3",
 "af_simbion",
 "exo_outfit",
 "af_spirit_4",
 "af_pudd_4",
 "af_dik_4",
 "af_kol_4",
 "af_armor_4",
 "outfit_exo_m1",
 "wpn_gauss"
}

local treasure_manager = nil
local n_rank 

function parse_spawns(line)
	if line == nil then
		return {}
	end
	--' if the default-s is greater than the values ??in the ini, then the score, missing the last value from the ini
	local t = se_respawn.parse_names(line)
	local n = table.getn(t)
	local ret_table = {}
	local k = 1
	local spawn = {}
	local p
	while k <= n do
		spawn = {}
		spawn.section = t[k]
		-- Check that this is not the last record
		if t[k+1] ~= nil then
			p = tonumber(t[k+1])
			-- check that the second number specifies the probability, rather than another section spawn
			if p then
				-- hammering number
				spawn.prob = p
				k = k + 2
			else
				-- hammered defaulted 1
				spawn.prob = 1
				k = k + 1
			end
		else
			spawn.prob = 1
			k = k + 1
		end
		table.insert(ret_table, spawn)
	end
	return ret_table
end


class "CTreasure"
function CTreasure:__init()
if TB3D_Modders.Global_Debug then TB3D_Services.info_alert("trade trsr mgr: treasure init") end
	--' At Designer proofreads LTX and create a piece of quests.
	self.ini = ini_file("trade\\treasure_manager.ltx")	-- changed misc to trade!!! - aleks1970
	--' We iterate over all settings phrases
	if not self.ini:section_exist("list") then
		if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("trade trsr mgr: There is no section [list] in treasure_manager.ltx") end
	end
	local n = self.ini:line_count("list")
	local id, value = "",""
	--' initial setup
	self.treasure_info = {}
	local community
	for i=0,n-1 do
		result, id, value	= self.ini:r_line("list",i,"","")
		self.treasure_info[id] = {}
		self.treasure_info[id].target		= utils.cfg_get_number(self.ini, id, "target", nil, true)
		self.treasure_info[id].name			= utils.cfg_get_string(self.ini, id, "name", nil, true, "")
		self.treasure_info[id].description	= utils.cfg_get_string(self.ini, id, "description", nil, true, "")
		self.treasure_info[id].items		= parse_spawns(utils.cfg_get_string(self.ini, id, "items", nil, true, ""))
		community	= parse_names(utils.cfg_get_string(self.ini, id, "community", nil, false, "", "stalker, bandit, dolg, freedom"))
		self.treasure_info[id].community = {}
		for k,v in pairs(community) do
			self.treasure_info[id].community[v] = true
		end
		if self.treasure_info[id].items == nil then
			if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("trade trsr mgr: cant find 'items' in  "..id) end
		end
		self.treasure_info[id].condlist		= xr_logic.parse_condlist(db.actor, "treasure_manager", "condlist", utils.cfg_get_string(self.ini, id, "condlist", nil, false, "", ""))
		--' It should be noted as a new cache
		self.treasure_info[id].active = false
		self.treasure_info[id].done = false
		--if TB3D_Modders.show_tables then show_tables(self.treasure_info, nil, "trade trsr mgr") end
	end
	--' Auxiliary tables for easy retrieval
	self.treasure_by_target = {}
	for k,v in pairs(self.treasure_info) do
		self.treasure_by_target[v.target] = k	
	end
	if TB3D_Modders.Global_Debug then TB3D_Services.info_alert("trade trsr mgr: treasure init DONE") end
end

--' Yuzanie initiator (to issue a cache)
function CTreasure:use(npc)
	--printf("TREASURE USE")
	local rarets = 70
	if npc ~= nil then
		n_rank = npc:character_rank()
	else 
		n_rank = 0
	end
	if TB3D_Modders.Global_Debug then
		rarets=0
	end
	if math.random(100) < rarets then 
		return
	end
	--' Need to randomly select one of the caches.
	local avail = {}
	local tr_sum = 0
	local treasure_prob
	for k,v in pairs(self.treasure_info) do
		if v.done == false and v.active == false and v.community[npc:character_community()] == true then
			treasure_prob = xr_logic.pick_section_from_condlist(db.actor, npc, v.condlist)

			if treasure_prob == "" or treasure_prob == nil then
				treasure_prob = 0
			end

			if tonumber(treasure_prob) >= 0 and
			v.community[npc:character_community()] == true and
			v.active == false
			then
				if tonumber(treasure_prob) == 100 then
					self:give_treasure(k)
				else
					table.insert(avail, {k = k, prob = treasure_prob})
					tr_sum = tr_sum + treasure_prob
				end
			end
		end
	end
	if tr_sum == 0 or
		math.random(100) < 65
	then
		return
	end
	local tr_w = math.random(tr_sum)
	for k,v in pairs(avail) do
		tr_w = tr_w - v.prob
		if tr_w <= 0 then
			self:give_treasure(v.k)
			break
		end
	end
end

--' Conservation
function CTreasure:check()
	if TB3D_Modders.use_trade_message then TB3D_Services.info_alert("TRADE TREASURE MGR: check") end
	for k,v in pairs(self.treasure_info) do
		self:give_treasure(k)
	end
	if TB3D_Modders.use_trade_message then TB3D_Services.info_alert("TRADE TREASURE MGR: check DONE") end
end

--' Issue Cache
function CTreasure:give_treasure(k)
	if TB3D_Modders.use_trade_message then TB3D_Services.info_alert("TRADE TREASURE MGR: give treasure") end
	local v = self.treasure_info[k]
	local obj = alife():story_object(v.target)
	if obj ~= nil and level.map_has_object_spot(obj.id, "treasure") == 0 then
		news_manager.send_treasure(v.name)		
		local text = text_color_treasure..translate(v.name).."\n%c[default]"..translate(v.description)
		level.map_add_object_spot_ser(obj.id, "treasure", text)
		-- check what type of cache is selected, if the cache is not a classic, and not nominal, then replace the contents
		if amk.load_variable("option_treasure", 0) ~= 0 and self:named_treasure(v) == false then
		v.items = self:give_item_list()
		end  
		--' Generate things
		for kk,vv in pairs(v.items) do
			if ammo_section[vv.section] == true then
				se_respawn.create_ammo(vv.section,	
						obj.position,
						obj.m_level_vertex_id,	
						obj.m_game_vertex_id,
						obj.id,
						vv.prob)
			else
				for i=1,vv.prob do
					alife():create(vv.section,
							obj.position,
							obj.m_level_vertex_id,	
							obj.m_game_vertex_id,
							obj.id)
				end
			end
		end
		--' Mark the cache as issued
		self.treasure_info[k].active = true
		self.treasure_info[k].done = true
		-- Send in an offline cache
		local sim = alife ()
		if sim ~= nil and obj.online then
			sim:set_switch_online(obj.id, false)
			sim:set_switch_offline(obj.id, true)
			amk.convert_npc[obj.id]=true 										--110001 put in place for withdrawal in the online
		end
	else
	if TB3D_Modders.use_trade_message then TB3D_Services.info_alert("TRADE TREASURE MGR: treasure not exist ["..utils.to_str(k).."]") end
	end
	if TB3D_Modders.use_trade_message then TB3D_Services.info_alert("TRADE TREASURE MGR: give treasure done") end
end

--' Remove the checkmark from the cache
function CTreasure:treasure_empty(box, box_story_id)
	if TB3D_Modders.use_trade_message then TB3D_Services.info_alert("TRADE TREASURE MGR: treasure empty") end
	local k = self.treasure_by_target[box_story_id]

	if k == nil or self.treasure_info[k] == nil then 
		return
	end

	self.treasure_info[k].active = false
	
	-- if the cache is not nominal, then transferred it to the line for the next issue
	if self:named_treasure(self.treasure_info[k]) == false then
	  self.treasure_info[k].done = false
	end
	
	level.map_remove_object_spot(box:id(), "treasure")
end

--' Conservation
function CTreasure:save(p)
	--' Save the table size
	local size = 0
	for k,v in pairs(self.treasure_info) do
		size = size + 1
	end
	p:w_u16(size)
	for k,v in pairs(self.treasure_info) do
		p:w_u16(v.target)
		p:w_bool(v.active)
		p:w_bool(v.done)
	end
end

--' Download
function CTreasure:load(p)
	local t = p:r_u16()
	local k
	for i = 1,t do
		k = self.treasure_by_target[p:r_u16()]
		self.treasure_info[k].active = p:r_bool()
		self.treasure_info[k].done = p:r_bool()
	end
end


function CTreasure:my_random(k, rank)
-- is generated random number range given grade issuer
-- how perdmetov is listed by rank
 local part = math.floor(k/4)-2
 if part < 1 then part = 1 end
-- top rank list available 
 local amin = (rank-1)*part+1

-- buy a little chaos 
 if rank < 4 then 
  -- if we are very lucky, we get access to the best things 
  if math.random(100)>80 then 
     rank = 4
   -- and if we're lucky a little smaller, then nepisya in the treasure can drop things, "not by rank"
  elseif math.random(100)>50 then 
     rank = rank+1 
  end
 end  
 -- end accessible to the rank list
 local amax = math.floor((k/4)*rank)
 
  
-- I do not know exactly how the floor, because insure
 if amax >= k-1 then amax = k end
-- very very insure :)
 if amin < 1 then amin = 1 end
 
 -- random selection of numbers from the range available to the rank of
 local i = math.random(amin, amax+2)
 -- if the number was in the top of the range, it will reduce the probability of getting cool stuff
 -- in connection with the transition to a system of ranks, maybe it's not necessary, must-law
 if i>(amin+amax)/2 then
   i = math.random(amin, amax+2)
 end  
-- Well-established habit and insure 
 if i>amax then i = amax end
 if i<1 then i = 1 end
 
 return i
end



function CTreasure:give_item_list()

 local rank = 1
 local tabla = {}
 -- How many types of items will be in the cache
 local i = math.random(1, 3)

local opt = amk.load_variable("option_treasure", 0)
 
  --~ -- define the rank nepisya
 --~ if nepis~= nil then
--   rank = n_rank --nepis.character_rank ()
   if n_rank == nil then n_rank = math.random(1, 9)*100 end
   if n_rank <= 300 then
     rank = 1
	elseif n_rank <=600 then
     rank = 2
    elseif n_rank <= 900 then
     rank = 3
    else 
     rank = 4
    end	 
 --~ else
   --~ rank = 1
 --~ end
   local cnt
   local spawn = {}
	local ini = system_ini()
	local num_in_box
	local h
	local s
	for j = 1, i, 1 do
		cnt = 0
		spawn = {}
		if  opt == 1 then
			spawn.section = solid_list[self:my_random(table.getn(solid_list), rank)]
		else
			spawn.section = rare_list[self:my_random(table.getn(rare_list), rank)]
		end	 

	if ammo_section[spawn.section] == true then
		num_in_box = ini:r_u32(spawn.section, "box_size")
		h = math.random(1, 10)
		cnt = math.random(1, h) * num_in_box
	else
		s = tostring(spawn.section)
		if string.find(s, "outfit") ~= nil  then
			cnt = 1
		elseif string.find(s, "addon") ~= nil or string.find(s, "af") ~= nil or string.find(s, "mutant") ~= nil then
			cnt = math.random(1,2)
		elseif string.find(s, "wpn") ~= nil then
			cnt = 1
		else 
			cnt = math.random(1, 5)
		end   
	end
  
	-- Old store the current object
	spawn.prob = cnt
	table.insert(tabla, spawn)
end
 return tabla
end

function CTreasure:named_treasure(v)
 -- checking whether a cache named. If so, what its content is not changed
 if   v.name == "agr_secret_0000_name" --Cache Gray
   or v.name == "bar_secret_0011_name" --Arnie's stash
   or v.name == "esc_secret_0013_name" --Cache Vorpala
   or v.name == "gar_secret_0002_name" --Things Grizzlies
   or v.name == "gar_secret_0011_name" --Warehouse Group Arrow
   or v.name == "gar_secret_0021_name" --Backpack Dohlyaka
   or v.name == "pri_secret_0003_name" --Khabar Fang
   or v.name == "pri_secret_0004_name" --Stocks Liberty Leader
   or v.name == "rad_secret_0000_name" --GOLD surly
   or v.name == "rad_secret_0004_name" --Reserve team desperate
   or v.name == "ros_secret_0015_name" --Cache Lucky
   or v.name == "ros_secret_0018_name" --Medicine chest
   or v.name == "val_secret_0028_name" --Hog's stash
   or v.name == "x18_secret_0000_name" --Smoked stash
   or v.name == "yan_secret_0011_name" --Cache scientist
   or v.name == "aver_arhara_secret_1"
   or v.name == "aver_arhara_secret_2"
   or v.name == "aver_arhara_secret_3"
   or v.name == "aver_arhara_secret_4"
   or v.name == "aver_arhara_secret_5"
   or v.name == "warlab_arhara_secret_1"
   or v.name == "warlab_arhara_secret_2"
   or v.name == "warlab_arhara_secret_3"
   or v.name == "village_arhara_secret_1" --Micah's stash
   or v.name == "village_arhara_secret_2" --Local cache
   or v.name == "village_arhara_secret_3" --Backpack Captain
   or v.name == "village_arhara_secret_4" --Cache Lieutenant
   or v.name == "generators_arhara_secret_1" --Backpack Monolith
   or v.name == "generators_arhara_secret_2" --Cache countryman
   or v.name == "generators_arhara_secret_3" --Khabar guard
   or v.name == "generators_arhara_secret_4" --Fritz's stash
   or v.name == "generators_arhara_secret_5" --Unknown Cache
   or v.name == "atp_arhara_secret_1" --Cache inveterate spy
   or v.name == "atp_arhara_secret_2" --Stash Shnyrov
   or v.name == "atp_arhara_secret_3" --Khabar China
   or v.name == "dead_city_secret_1" --Stash fugitive
   or v.name == "dead_city_secret_2" --Things zombie
   or v.name == "dead_city_secret_3" --Nychka Swoon
   or v.name == "dead_city_secret_4" --Caches old-timer
   or v.name == "dead_city_secret_5" --Dedkiny things
   or v.name == "lost_village_inventory_box" --110001, Stash of ghost
 then
   return true
 else
   return false
 end    
end

function get_treasure_manager()
	if TB3D_Modders.use_trade_message then TB3D_Services.info_alert("TRADE TREASURE MGR: get treasure mgr") end
	if treasure_manager == nil then
		treasure_manager = CTreasure()
	end
	if TB3D_Modders.use_trade_message then TB3D_Services.info_alert("TRADE TREASURE MGR: get treasure mgr done") end
	return treasure_manager
end

function take_item_from_box(box, box_story_id)
	--printf("!!! take item from box %s", tostring(box:is_inv_box_empty()))
--	if box:is_inv_box_empty() == true then
		get_treasure_manager():treasure_empty(box, box_story_id)
--	end
end

function save(p)
	get_treasure_manager():save(p)
end
function load(p)
	get_treasure_manager():load(p)
end
function clear_treasure_manager()
	treasure_manager = nil
end