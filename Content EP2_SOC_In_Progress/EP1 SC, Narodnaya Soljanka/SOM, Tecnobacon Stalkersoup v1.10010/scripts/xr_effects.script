--TB3D 1.1.0.0.1.0 commented out lamps, added forced weapon hiding, changed end game after credits, fixed arena box and items
--activate_bolt commented out, cleanup, military_dolg_dead, optimized, rad_barrels, pripyat, localized, kostya_restrictors,
-- translate, debug, skip groups, send_tip_id optimization, gold bars, sar_monolit_send, start small reject, debug, aem lights,
-- teleport, after_credits, aem debug
function my_ver() return "1.1.0.0.1.0" end
----------------------------------------------------------------------------------------------------
-- General functions
----------------------------------------------------------------------------------------------------
local string_find = string.find

function disable_ui_elements(actor, npc, p)
    for i, v in pairs(p) do
        if v == "all" then
            bind_stalker.hide_weapon(true)
            level.disable_input()
            level.hide_indicators()
            break
        elseif v == "weapon" then
            bind_stalker.hide_weapon(true)
        elseif v == "input" then
            level.disable_input()
        elseif v == "hud" then
            level.hide_indicators()
        end
    end
    --TB3D_Services.packet_alert("xr_effects <disable_ui_elements>")
end

function enable_ui_elements(actor, npc, p)
    for i, v in pairs(p) do
        if v == "all" then
            level.show_indicators()
            level.enable_input()
            bind_stalker.restore_weapon()
            break
        elseif v == "hud" then
            level.show_indicators()
        elseif v == "input" then
            level.enable_input()
        elseif v == "weapon" then
            bind_stalker.restore_weapon()
        end
    end
end

function disable_ui(actor, npc)
    bind_stalker.hide_weapon(true)
    level.disable_input()
    level.hide_indicators()
    --TB3D_Services.packet_alert("xr_effects <disable_ui>")
end

function enable_ui(actor, npc)
    level.show_indicators()
    level.enable_input()
    bind_stalker.restore_weapon()
    --TB3D_Services.packet_alert("xr_effects <enable_ui>")
end

function run_cam_effector(actor, npc, p)
	--if TB3D_Services.is_collector(2000) == false then
		if p[1] then
			local loop, num = false, (1000 + math.random(100))
			if p[2] and type(p[2]) == "number" and p[2] > 0 then
				num = p[2]
			end
			if p[3] and p[3] == "true" then
				loop = true
			end
			TB3D_Services.packet_alert("xr effects: run cam effector("..utils.to_str(p[1])..".ppe]")
			--level.add_pp_effector(p[1] .. ".ppe", num, loop)
		  level.add_cam_effector("camera_effects\\" .. p[1] .. ".anm", num, loop, "")                   
		end
	--end
end

function stop_cam_effector(actor, npc, p)
    if p[1] and type(p[1]) == "number" and p[1] > 0 then
        level.remove_cam_effector(p[1])
    end
end

function run_postprocess(actor, npc, p)
    if p[1] then
		if p[1] == "agr_u_fade" then
			if TB3D_Services.is_collector(2000)
			  or has_alife_info("tb3d_skip_group1") then
				if level.name() == "l01_escape" then return end
			end
		end
        local loop, num = false, (2000 + math.random(100))
        if p[2] and type(p[2]) == "number" and p[2] > 0 then
            num = p[2]
        end
        if p[3] and p[3] == "true" then
            loop = true
        end
		if TB3D_Modders.use_info_message then TB3D_Services.packet_alert("xr effects: run post proc("..utils.to_str(p[1])..".ppe]") end
        level.add_pp_effector(p[1] .. ".ppe", num, loop)
    end
end

function stop_postprocess(actor, npc, p)
    if p[1] and type(p[1]) == "number" and p[1] > 0 then
        level.remove_pp_effector(p[1])
    end
end

function run_tutorial(actor, npc, p)
	TB3D_Services.packet_alert("xr effects: run tutorial["..utils.to_str(p[1]).."]")
	game.start_tutorial(p[1])
end

function run_tutorial_if_newbie(actor, npc, p)
	if has_alife_info("esc_trader_newbie") then
		game.start_tutorial(p[1])
	end
end

function teleport_actor(actor, npc, p)
	local point = patrol(p[1])
	local look = patrol(p[2])
	--TB3D_Services.packet_alert("xr effects: teleport actor")
	db.actor:set_actor_position(point:point(0))
	local dir = look:point(0):sub(point:point(0))
	db.actor:set_actor_direction(-dir:getH()) 
end

-----------------------------------------------------------------------------
local drop_point, drop_object = 0, 0
local function drop_object_item(item)
    drop_object:drop_item_and_teleport(item, drop_point)
end

function drop_actor_inventory(actor, npc, p)
    if p[1] then
        drop_point  = patrol(p[1]):point(0)
        drop_object = db.actor
        db.actor:inventory_for_each(drop_object_item)
    end
end

function drop_npc_inventory(actor, npc, p)										-- FIXME: drop_npc_inventory doesn't work
    if p[1] then
        drop_point  = patrol(p[1]):point(0)
        drop_object = npc
        npc:inventory_for_each(drop_object_item)
    end
end

function drop_npc_item(actor, npc, p)
    if p[1] then
        local item = npc:object(p[1])
        if item then
			npc:drop_item(item)
		end
    end
end

function drop_npc_items(actor, npc, p)
    local item = 0
	for i, v in pairs(p) do
        item = npc:object(v)
        if item then
			npc:drop_item(item)
        end
    end
end

function give_item(actor, npc, p)
    if p[1] then
        alife():create(p[1], npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id())
    end
end

function give_items(actor, npc, p)
    local pos, lv_id, gv_id, npc_id = npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id()
	for i, v in pairs(p) do
        alife():create(v, pos, lv_id, gv_id, npc_id)
    end
end

function respawner_spawn(actor, npc, p)
    if p[1] then
		se_respawn.spawn(p[1])
    end
end

function play_particle_on_path(actor, npc, p)
    local name = p[1]
    local path = p[2]
    local point_prob = p[3]
    if name and path then
		if point_prob == nil then
			point_prob = 100
		end
		local path = patrol(path)
		local count = path:count()
		local particle
		for a = 0,count-1,1 do   
			particle = particles_object(name)
			if math.random(100) <= point_prob then
				particle:play_at_pos(path:point(a))
			end
		end
	end		
end

-----------------------------------------------------------------------------
function monster_berserk(actor, npc)
    npc:berserk()
end

function activate_bolt(actor, npc)
	--db.actor:activate_slot(5)
end

--[[
send_tip(news_id:sender:sender_id)			--called from l04_darkvalley.ltx (val_sos_pda), val_exit_zone.ltx (val_monolith_trader_pda1)
    1. news_id
    2. sender*
    3. sender_id*
    * - not necessary
--]]
function send_tip(actor, npc, p)
	if TB3D_Services.is_collector(2000) then
		if p[1] == "val_sos_pda" then
			--109950  need do something
		elseif p[1] == "val_monolith_trader_pda1" then
			--109950  need do something
		end
	else
		--TB3D_Services.info_alert("xr effects: sending tip["..utils.to_str(p[1]).."]")
		news_manager.send_tip(db.actor, p[1], nil, p[2], nil, p[3])
	end
end

--[[
Give the stalker a little kick. For example, to throw him to the dais.
parameters: actor, npc, p[direction,bone,power,impulse,reverse=false]
    1. direction - if the string is considered that the name and path in the direction of
        first point is tolchek. If this number, it
        regarded as story_id character of which is to do a hit.
    2. bone - line. Name the bones on which to strike.
    3. power - impact force
    4. impulse - pulse
    5. reverse (true/false) - change in the direction of impact. default false
--]]
function hit_npc(actor, npc, p)
	if TB3D_Modders.default_hit == true then
		local rev = p[5] and p[5] == 'true'
		local draftsman = npc
		local direction = npc:position()
		if type(p[1]) == 'number' then
			local hitter = level_object_by_sid(p[1])
			if hitter and rev then
				draftsman = hitter
				direction = hitter:position():sub(npc:position())
			end
		else
			if rev then
				draftsman = nil
				direction = npc:position():sub(patrol(p[1]):point(0))
			else
				direction = patrol(p[1]):point(0):sub(npc:position())
			end
		end
		TB3D_hit_styles.wound(npc, draftsman, p[2], p[3], p[4], direction)
	end
end

--[[
Writing object, given story_id, hit.
parameters: actor, npc, p[sid,bone,power,impulse,hit_src=npc:position()]
    1. sid - story_id Object, on which applied a hit.
    2. bone - line. Name the bones on which to strike.
    3. power -impact force
    4. impulse - pulse
    5. hit_src - If the number is regarded as story_id object, by
        which applied a hit (he is also the initiator of the hit), otherwise it
        point (waypoint), from which the object is put a hit.
        If not specified, it takes the position of object of which was caused by
        this function.
--]]
function hit_obj(actor, npc, p)
	--if TB3D_Modders.default_hit == true then			--not applicable
		local obj = level_object_by_sid(p[1])
		if obj then
			local sid = nil
			local dir = vector():sub(npc:position(), obj:position())
			if p[5] then
				sid = tonumber(p[5])
				if sid then
					sid = level_object_by_sid(sid)
					if sid then
						dir = vector():sub(sid:position(), obj:position())
					end
				else
					dir = vector():sub(patrol(p[5]):point(0), obj:position())
				end
			end
			TB3D_hit_styles.wound(sid or npc, obj, p[2], p[3], p[4], obj:direction())
		elseif string_find(npc:name(), "rad_barrels_space_restrictor_") then	--collector in radar
			TB3D_Services.packet_alert("xr effect: HIT_OBJ ["..npc:name().."] Target object does not exist")
		else
			if TB3D_Modders.use_abort_message == true then TB3D_Services.packet_alert("xr effect: HIT_OBJ ["..npc:name().."] Target object does not exist") end
		end
	--end
end

--[[
Give the stalker a little kick after death. Same as above, only the direction of the hit now
calculated by the killer. Therefore, the parameter direction is not.
parameters: actor, npc, p[bone,power,impulse]
FIXME: killer:position() isn't working
--]]
function hit_by_killer(actor, npc, p)
	if TB3D_Modders.default_hit == true then
		if npc then
			local t = db.storage[npc:id()].death
			if t and t.killer ~= -1 then
				local killer = db.storage[t.killer]
				if killer then
					local p1, p2
					p1 = npc:position()
					p2 = killer:position()
					--TB3D_Services.packet_alert("xr effects: hit by killer") --["..utils.to_str(p2).."] npc["..utils.to_str(p1).."]")
					TB3D_hit_styles.wound(npc, npc, p[1], p[2], p[3], utils.vector_copy_by_val(p1):sub(p2))
				end
			end
		end
	end
end

function set_friends(actor, npc, p)
	local npc1
	for i, v in pairs(p) do
		npc1 = level_object_by_sid(v)
		if npc1 and npc1:alive() then
			--TB3D_Services.packet_alert("_bp: %d:set_friends(%d)", npc:id(), npc1:id())
			npc:set_relation(game_object.friend, npc1)
			npc1:set_relation(game_object.friend, npc)
		end
	end
end

function set_enemies(actor, npc, p)
	local npc1
	for i, v in pairs(p) do
		--TB3D_Services.packet_alert("_bp: set_enemies(%d)", v)
		npc1 = level_object_by_sid(v)
		if npc1 and npc1:alive() then
			npc:set_relation(game_object.enemy, npc1)
			npc1:set_relation(game_object.enemy, npc)
		end
	end
end

-- play sound in the head actor
function play_snd(actor, npc, p)
	local sound = p[1]
	if sound then
		local npc_name = npc:name()
		if TB3D_Services.is_collector(2000) == true or has_alife_info("tb3d_skip_group1") then
			if string_find(sound,"pri_followers_")		--running the quantlet
			  or string_find(sound,"pri_wave")
			  or string_find(sound,"rad_soldier_des_1")
			  or string_find(npc_name,"rostok_sniper_pda_restrictor") then			--volkodav_radio_see_enemy, sniper_radio_see_enemy
				return
			end
		end
		if TB3D_Modders.use_sound_message then
			TB3D_Services.packet_alert("xr effects: play_snd["..sound.."] for ["..npc_name.."]")
		end
		local snd_obj = xr_sound.get_safe_sound_object(sound)
		snd_obj:play_no_feedback(db.actor, sound_object.s2d, p[2] or 0, vector():set(0,0,0), 1.0)
	end
end

-- play sound from a specific object
function play_snd_from_obj(actor, npc, p)
	if p[1] and p[2] then
		if TB3D_Modders.use_sound_message then
			TB3D_Services.packet_alert("xr effects: play_snd_from_obj["..utils.to_str(p[2]).."] for ["..npc:name().."]")
		end
		local snd_obj = xr_sound.get_safe_sound_object(p[2])
		if snd_obj then
			local obj = level_object_by_sid(p[1])
			if obj then																						--!!!!TB3D   CTD protection
				snd_obj:play_no_feedback(obj, sound_object.s3d, 0, obj:position(), 1.0)
			else
				TB3D_Services.abort_alert("xr effects: can't find object with story id["..utils.to_str(p[1]).."]")
				snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector():set(0,0,0), 1.0)
			end
		else
			TB3D_Services.packet_alert("xr effects: can't find sound object for story id["..utils.to_str(p[1]).."]["..utils.to_str(p[2]).."]")
		end
	end
end

-- play sound from a specific object
function play_snd_now(actor, npc, p)
	--TB3D_Services.packet_alert("xr effects: play_snd_now["..utils.to_str(p[1]).."] for ["..npc:name().."]")
	xr_sound.set_sound_play(npc, p[1])
end

-- add to that counter actor 1
function inc_counter(actor, npc, p)
	if p[1] then
		--TB3D_Services.packet_alert( "inc_counter '%s'", p[1] )
		xr_logic.pstor_store(db.actor, p[1], xr_logic.pstor_retrieve(db.actor, p[1], 0) + 1)
	end
end

function dec_counter(actor, npc, p)
	if p[1] then
		--TB3D_Services.packet_alert( "dec_counter '%s'", p[1] )
		xr_logic.pstor_store(db.actor, p[1], xr_logic.pstor_retrieve(db.actor, p[1], 0) - 1)
	end
end

-- switches the camera on a monster or an actor
function alien_control( actor, npc, p )
	--TB3D_Services.packet_alert("xr effects: alien_control["..utils.to_str(npc:name()).."]")
	npc:set_alien_control( p[1] == "true" )
end

-- slelat actor enemy characters, which are online at the specified smarts
function set_gulag_enemy_actor( actor, npc, p )
	if p[1] then
		xr_gulag.setGulagEnemy(p[1], db.actor)
	end
end

-- forced update your phone. Use only in extreme cases!
function smart_terrain_force_update(actor, npc, p)
	--TB3D_Services.packet_alert( "xr_effects.smart_terrain_force_update called" )
	if p[1] then
		local gulag = xr_gulag.get_gulag(p[1])
		if gulag then
			--TB3D_Services.packet_alert( "xr_effects.smart_terrain_force_update ["..gulag.name.."]" )
			gulag.smrttrn:update()
		end
	end
	--TB3D_Services.packet_alert( "xr_effects.smart_terrain_force_update done" )
end

------------------------------------------------------------------------------------------------------------------------

-- shock effect in the face
function actor_punch(npc)
	if db.actor:position():distance_to_sqr(npc:position()) < 4 then
		local active_slot = db.actor:active_slot()
		if active_slot == 1 or active_slot == 2 then
			local active_item = db.actor:active_item()
			if active_item then
				db.actor:drop_item(active_item)
			end
		end
		set_inactivate_input_time(30)
		local snd_obj = xr_sound.get_safe_sound_object([[affects\hit_fist]])
		snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
		level.add_cam_effector("camera_effects\\fusker.anm", 999, false, "")   
	end
end

-- Forced sleep in the radar.
function force_actor_sleep(npc)
	db.actor:actor_sleep(24, 0)
end

-- forgetting the grievances
function clearAbuse(npc)
	--TB3D_Services.packet_alert("CLEAR_ABUSE")
	xr_abuse.clear_abuse(npc)
end

---Turning off the dynamic lights (hanging_lamp)
function turn_off(actor, npc, p)
	local obj = level_object_by_sid(p[1])
	if obj then
		obj:get_hanging_lamp():turn_off()
	else
		if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("xr effect: TURN_OFF ["..npc:name().."] Target object does not exist") end
	end
end

function turn_off_object(actor, npc)
	if npc then npc:get_hanging_lamp():turn_off() end
end

---The inclusion of dynamic lights (hanging_lamp)
function turn_on(actor, npc, p)
	local obj = level_object_by_sid(p[1])
	if obj then
		obj:get_hanging_lamp():turn_on()
	else
		if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("xr effect: TURN_ON ["..npc:name().."] Target object does not exist") end
	end
end

function turn_on_object(actor, npc)
	if npc then npc:get_hanging_lamp():turn_on() end
end

------------------------------------------------------------------------------------------------

-- Some of the participants joined the battle scenes - now need poobizhat all at all
function gar_dm_bandits_fight(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		local novice = level_object_by_sid(104)
		if novice and novice:alive() then
			local ignore_actor = distance_between(db.actor, novice) > 25
			local bandit1 = level_object_by_sid(101)
			if bandit1 then
				novice:set_relation(game_object.enemy, bandit1)
				if not ignore_actor then
					bandit1:set_relation(game_object.enemy, db.actor)
				end
				bandit1:set_relation(game_object.enemy, novice)
			end
			local bandit2 = level_object_by_sid(102)
			if bandit2 then
				novice:set_relation(game_object.enemy, bandit2)
				if not ignore_actor then
					bandit2:set_relation(game_object.enemy, db.actor)
				end
				bandit2:set_relation(game_object.enemy, novice)
			end
			local bandit3 = level_object_by_sid(103)
			if bandit3 then
				novice:set_relation(game_object.enemy, bandit3)
				if not ignore_actor then
					bandit3:set_relation(game_object.enemy, db.actor)
				end
				bandit3:set_relation(game_object.enemy, novice)
			end
		end
	end
end

function gar_dm_bandit_demand(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		--TB3D_Services.packet_alert("_bp: gar_dm_bandit_demand: actor=%s", actor:name())
		if not (has_alife_info("gar_dm_bandit1_demand")
		and has_alife_info("gar_dm_bandit2_demand")
		and has_alife_info("gar_dm_bandit3_demand")) then
			local r = math.random(3)
			if r == 1 then
				TB3D_Services.give_info("gar_dm_bandit1_demand")
			elseif r == 2 then
				TB3D_Services.give_info("gar_dm_bandit2_demand")
			else
				TB3D_Services.give_info("gar_dm_bandit3_demand")
			end
		end
	end
end

function gar_send_dymon_alarm(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		if has_alife_info("gar_start_graveyard") then
			news_manager.send_tip(db.actor, "tips_gar_hellcar_alarm", 2, "stalker", 10000)
		end
	end
end

function gar_direction_fire(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		if has_alife_info("gar_hellcar_help") and not has_alife_info("gar_counter_fire") and not has_alife_info("gar_open_fire") then
			news_manager.send_tip(db.actor, "gar_direction_fire", 0, "stalker", 0)
		end
	end
end

function gar_hellcar_victory(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		if not has_alife_info("gar_hellcar_tips_end") and has_alife_info("gar_hellcar_help") and not has_alife_info("gar_hellcar_thanks") then
			news_manager.send_tip(db.actor, "gar_hellcar_victory", 0, "stalker", 0)
			TB3D_Services.give_info("gar_hellcar_tips_end")
		end
	end
end

function gar_seryi_victory(actor, npc)
    --news_manager.send_tip(db.actor, "gar_hellcar_victory", 0, "stalker", 0)
end

function gar_boars_counter(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		local c = xr_logic.pstor_retrieve(db.actor, "gar_boars_counter", 0)
		if c < 1 then
			news_manager.send_tip(db.actor, "gar_actor_looser", 0, "dolg", 0)
		else
			news_manager.send_tip(db.actor, "gar_actor_normal", 0, "dolg", 0)
			TB3D_Services.give_info("gar_kill_boars_request")
		end
	end
end

--' Escape

function play_snd_from_radio(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		local snd_obj = xr_sound.get_safe_sound_object([[characters_voice\scenario\escape\wolf_to_rangers_1]])
		local obj   = npc:object("hand_radio")
		if obj then																						--!!!!TB3D   CTD protection
			snd_obj:play_no_feedback(obj, sound_object.s3d, 0, obj:position(), 1.0) 
		else
			snd_obj:play(db.actor, 0, sound_object.s2d)
		end
	end
end

function esc_direction_fire(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		if not has_alife_info("esc_fanat_die") then
			news_manager.send_tip(db.actor, "esc_direction_fire", 7, "stalker", 0)
		end
	end
end

function esc_fanat_victory(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		if has_alife_info("escape_lager_killers_die") and not has_alife_info("esc_fanat_die") then
			news_manager.send_tip(db.actor, "esc_fanat_victory", 0, "stalker", 10000)
		end
	end
end

function esc_return_dv(actor, npc)
    if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		news_manager.send_tip(db.actor, "esc_return_dv", 0, "trader", 10)
	end
end

-- function esc_lager_forgive_actor(actor, npc)
--  xr_gulag.setGulagNeutral("esc_lager", db.actor)
-- end

-- function esc_lager_promise_actor(actor, npc)
--  local gulag = xr_gulag.get_gulag_by_name ("esc_lager")
--    if (gulag) then
--       gulag:set_relation (game_object.neutral, actor)
--    end  
-- end

-- function esc_lager_rage_actor(actor, npc)
--  local gulag = xr_gulag.get_gulag_by_name ("esc_lager")
--    if (gulag) then
--       gulag:set_relation (game_object.enemy, actor)
--    end  
-- end

--' garbage

function gar_mapspot_blockpost (actor, npc)
	level_tasks.add_location(115, "green_location", "gar_dolg_blokpost_leader_name")
end
  
function actor_friend(actor, npc)
	--TB3D_Services.packet_alert("_bp: xr_effects: actor_friend(): npc='%s': time=%d", npc:name(), time_global())
	npc:set_relation(game_object.friend, db.actor)
end

function actor_neutral(actor, npc)
	npc:set_relation(game_object.neutral, db.actor)
end

function actor_enemy(actor, npc)
	npc:set_relation(game_object.enemy, db.actor)
end

-- Calling this function will disable the handler [combat] the battle for the character.
-- Used in cases where all necessary actions, such as switching to another section
-- have been implemented, and run them again during the battle can not (and the provisions of Section [combat] is checked at each
-- apdeyte when a character in battle, of course, if not turned off by calling this function).
function disable_combat_handler(actor, npc)
	db.disable_combat_handler(npc)
end

-- Calling this function will disable the handler [combat_ignore] interception battle for the character.
function disable_combat_ignore_handler(actor, npc)
	db.disable_combat_ignore(npc)
end

--function log_bp1(actor, npc)
	--printf("xr_effects: log_bp1 (actor='%s', npc='%s'", actor:name(), npc:name())
--end

--function psi_hit_npc(actor, npc,p)
--end

function mil_paul_frost_dead (actor, npc)     
	if TB3D_Services.is_collector(2000) == false then
    local gulag = xr_gulag.get_gulag_by_name("mil_freedom")
		if (gulag) then
		   gulag:set_relation(game_object.neutral, db.actor)
		end  
	end
end

function set_freedom_actor_enemy (actor, npc)
    local luk = level_object_by_sid (707)
    this.actor_enemy (db.actor, luk)
end

function military_dolg_dead(actor, npc)
	if TB3D_Services.is_collector(2000) == false then
		local mil_dolg_killed = xr_logic.pstor_retrieve(db.actor, "mil_dolg_killed", 0) + 1
		xr_logic.pstor_store(db.actor, "mil_dolg_killed", mil_dolg_killed)
		--TB3D_Services.packet_alert("xr effects: mil dolg dead["..utils.to_str(mil_dolg_killed).."]")
		if mil_dolg_killed > 6 or xr_gulag.getGulagPopulation("mil_dolg") <= 1 then
		   TB3D_Services.give_info("mil_dolg_dead")
		end  
	end
end

function mil_patrol_death_check(actor, npc)
	if TB3D_Services.is_collector(2000) == false then
		if has_alife_info("mil_patrol_man1_dead") and has_alife_info("mil_patrol_man2_dead") and has_alife_info("mil_patrol_man3_dead") then
		   TB3D_Services.give_info("mil_patrol_dead") 
		end
	end
end

function mil_cook_dead(actor, npc)
    --level_tasks.set_task_state (task.fail, "mil_freedom_rg6_task", 2)
end

function search_gulag_job(actor, npc)
	xr_gulag.resetJob(npc, npc:id())
end

--------------------------------------------------------- 
-- BAR-ROSTOK
--------------------------------------------------------- 
function bar_freedom_spam_1(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		news_manager.send_tip(db.actor, "bar_freedom_spam_1", nil, "killer", nil, 509)
	end
end
function bar_freedom_spam_2(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		news_manager.send_tip(db.actor, "bar_freedom_spam_2", nil, "killer", nil, 509)
	end
end
function bar_freedom_spam_3(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		news_manager.send_tip(db.actor, "bar_freedom_spam_3", nil, "killer", nil, 509)
	end
end
function bar_freedom_spam_4(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		news_manager.send_tip(db.actor, "bar_freedom_spam_4", nil, "killer", nil, 509)
	end
end
function bar_ecolog_spam_1(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		news_manager.send_tip(db.actor, "bar_ecolog_spam_1", nil, "ecolog", nil, 503)
	end
end
function bar_ecolog_spam_2(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		news_manager.send_tip(db.actor, "bar_ecolog_spam_2", nil, "ecolog", nil, 503)
	end
end
function bar_ecolog_spam_3(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		news_manager.send_tip(db.actor, "bar_ecolog_spam_3", nil, "ecolog", nil, 503)
	end
end
function bar_ecolog_spam_4(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		news_manager.send_tip(db.actor, "bar_ecolog_spam_4", nil, "ecolog", nil, 503)
	end
end
function bar_ecolog_spam_5(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		if not has_alife_info("bar_heli_scene_volkodav_die") and not has_alife_info("bar_ecolog_saw_chase") then
			news_manager.send_tip(db.actor, "bar_freedom_chase", nil, "ecolog", nil, 503)
			TB3D_Services.give_info("bar_ecolog_saw_chase")
		end
	end
end
function bar_ecolog_hit(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		news_manager.send_tip(db.actor, "bar_ecolog_hit", nil, "ecolog", nil, 503)
	end
end
function bar_freedom_spam_5(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		if not has_alife_info("bar_heli_scene_volkodav_die") then
			news_manager.send_tip(db.actor, "bar_ecolog_escape", nil, "killer", nil, 509)
		end
	end
end
function bar_freedom_angry_actor(actor,npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		if has_alife_info("bar_ecolog_crush_actor_enemy") then
			npc:set_relation(game_object.enemy, db.actor)
		end
	end
end
function bar_freedom_defence_ecolog(actor,npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		news_manager.send_tip(db.actor, "bar_ecolog_attack", nil, "ecolog", nil, 503)
	end
end   
function bar_freedom_angry_actor_notify(actor,npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		if has_alife_info("bar_ecolog_crush_actor_enemy") then
			news_manager.send_tip(db.actor, "bar_freedom_attack_spy", 4, "killer", nil, 509)
		end
	end
end
function bar_crush_heli_start(actor,npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		news_manager.send_tip(db.actor, "bar_ecolog_crush_start_heli", nil, "ecolog", nil, 503)
	end
end
function rostok_kruglov_tip_1(actor,npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		news_manager.send_tip(db.actor, "rostok_kruglov_spam_1", nil, "ecolog", nil, 503)
	end
end
function rostok_kruglov_tip_2(actor,npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		news_manager.send_tip(db.actor, "rostok_kruglov_spam_2", nil, "ecolog", nil, 503)
		level_tasks.add_location(597, "volkodav_location", "rostok_banda_volkodava")
	end
end
function rostok_kruglov_attract_1(actor,npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		xr_sound.set_sound_play(npc, "kruglov_stop_enemy_1")
		local tips_sound = news_manager.send_tip_nosound(db.actor, "bar_freedom_chase", 0, "ecolog")
		if tips_sound ~= nil then
			tips_sound:play(db.actor, 0, sound_object.s2d)											--' Play sound stuffy
		end
	end
end
function rostok_kruglov_attract_2(actor,npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		xr_sound.set_sound_play(npc, "kruglov_stop_enemy_2",3)
		local tips_sound = news_manager.send_tip_nosound(db.actor, "rostok_kruglov_follow_2",3000, "ecolog")
		if tips_sound ~= nil then
			tips_sound:play(db.actor, 0, sound_object.s2d)   										--' Play sound stuffy
		end
	end
end
function rostok_kruglov_ambush(actor,npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		xr_sound.set_sound_play(npc, "rostok_kruglov_help_5")
		local tips_sound = news_manager.send_tip_nosound(db.actor, "rostok_kruglov_follow_3", 0, "ecolog")
		if tips_sound ~= nil then
			tips_sound:play(db.actor, 0, sound_object.s2d)   										--' Play sound stuffy
		end
	end
end
function bar_crush_heli_down(actor,npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		news_manager.send_tip(db.actor, "bar_ecolog_crush_heli_down", 1, "killer", nil, 509)
	end
end
function bar_ecolog_crush_attract_actor(actor,npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		if not has_alife_info("bar_heli_scene_professor_die") then
			news_manager.send_tip(db.actor, "bar_ecolog_crush_attract_actor", nil, "ecolog")
		end
	end
end
function bar_freedom_attack_attract_actor(actor,npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		news_manager.send_tip(db.actor, "bar_freedom_attack_attract_actor", nil, "killer")
	end
end
function bar_freedom_attack_start(actor,npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		if not has_alife_info("bar_freedom_defence_ecolog") then
			news_manager.send_tip(db.actor, "bar_freedom_attack", nil, "killer", nil, 509)
			TB3D_Services.give_info("bar_freedom_defence_ecolog")
		end
	end
end
function bar_arena_hit(actor, npc)
	if TB3D_Modders.default_hit == true then TB3D_hit_styles.wound(db.actor, npc, nil, 0.01, 1, npc:direction()) end
end

function esc_hit_from_fox(actor, npc)
	--if TB3D_Services.is_collector(2000) == false then
		--TB3D_Services.packet_alert("xr effects: hit from fox")
		--local fox = level_object_by_sid(005)
		--if TB3D_Modders.default_hit == true and fox and npc then TB3D_hit_styles.wound(fox, npc, nil, 0.01, 1, npc:direction()) end
	--end
end

function bar_territory_logic(actor, npc)
	--if TB3D_Services.is_collector(2000) == false then			--109987
		local level = level.name()
		if level == "l05_bar" then
			if TB3D_Modders.Global_Debug == true then TB3D_Services.info_alert("rx effects: bar logic start") end
			if dialogs.actor_in_dolg(db.actor,npc) then
				if has_alife_info("bar_dolg_territory_kill") then
					news_manager.send_tip(db.actor, "bar_territory_dolg_kill", nil, "dolg", nil, 507)
					xr_gulag.setGulagEnemy("bar_dolg_general", db.actor)
					xr_gulag.setGulagEnemy("bar_dolg_veterans", db.actor)
					xr_gulag.setGulagEnemy("bar_dolg_bunker", db.actor)
					xr_gulag.setGulagEnemy("bar_zastava", db.actor)
					xr_gulag.setGulagEnemy("bar_zastava_2", db.actor)
					xr_gulag.setGulagEnemy("bar_visitors", db.actor)
				elseif has_alife_info("bar_dolg_territory_3_hit") then
					news_manager.send_tip(db.actor, "bar_territory_dolg_3_hit", nil, "dolg", nil, 507)
					xr_gulag.setGulagEnemy("bar_dolg_general", db.actor)
					xr_gulag.setGulagEnemy("bar_dolg_veterans", db.actor)
					xr_gulag.setGulagEnemy("bar_dolg_bunker", db.actor)
					xr_gulag.setGulagEnemy("bar_zastava", db.actor)
					xr_gulag.setGulagEnemy("bar_zastava_2", db.actor)
				elseif has_alife_info("bar_dolg_territory_2_hit") then
					news_manager.send_tip(db.actor, "bar_territory_dolg_2_hit", nil, "dolg", nil, 507)
				elseif has_alife_info("bar_dolg_territory_1_hit") then
					news_manager.send_tip(db.actor, "bar_territory_dolg_1_hit", nil, "dolg", nil, 507)
				end
			else
				if has_alife_info("bar_dolg_territory_kill") then
					TB3D_Services.give_info("bar_territory_nodolg_kill")
					news_manager.send_tip(db.actor, "bar_territory_nodolg_kill", nil, "dolg", nil, 507)
					xr_gulag.setGulagEnemy("bar_dolg_general", db.actor)
					xr_gulag.setGulagEnemy("bar_dolg_veterans", db.actor)
					xr_gulag.setGulagEnemy("bar_dolg_bunker", db.actor)
					xr_gulag.setGulagEnemy("bar_zastava", db.actor)
					xr_gulag.setGulagEnemy("bar_zastava_2", db.actor)
					xr_gulag.setGulagEnemy("bar_visitors", db.actor)
				elseif has_alife_info("bar_dolg_territory_2_hit") then
					TB3D_Services.give_info("bar_territory_nodolg_2_hit")
					news_manager.send_tip(db.actor, "bar_territory_nodolg_2_hit", nil, "dolg", nil, 507)
					xr_gulag.setGulagEnemy("bar_dolg_general", db.actor)
					xr_gulag.setGulagEnemy("bar_dolg_veterans", db.actor)
					xr_gulag.setGulagEnemy("bar_dolg_bunker", db.actor)
					xr_gulag.setGulagEnemy("bar_zastava", db.actor)
					xr_gulag.setGulagEnemy("bar_zastava_2", db.actor)
					xr_gulag.setGulagEnemy("bar_visitors", db.actor)
				elseif has_alife_info("bar_dolg_territory_1_hit") then
					TB3D_Services.give_info("bar_territory_nodolg_1_hit")
					news_manager.send_tip(db.actor, "bar_territory_nodolg_1_hit", nil, "dolg", nil, 507)
				end 
			end
			if TB3D_Modders.Global_Debug == true then TB3D_Services.info_alert("rx addons: bar logic done") end
		end
	--end
end

function bar_psih_come(actor, npc)
	if TB3D_Services.is_collector(2000) == false then
		news_manager.send_tip(db.actor, "bar_psih_come", nil, "barman")
	end
end

function bar_actor_is_enemy(actor, npc)
	--if TB3D_Services.is_collector(2000) == false then				--109987
		xr_gulag.setGulagEnemy("bar_dolg_general", db.actor)
		xr_gulag.setGulagEnemy("bar_dolg_veterans", db.actor)
		xr_gulag.setGulagEnemy("bar_dolg_bunker", db.actor)
		xr_gulag.setGulagEnemy("bar_visitors", db.actor)
	--end
end

function bar_actor_enemy_set(actor, npc)          
    local dog = level_object_by_sid(509)
    if dog ~= nil then
       dog:set_relation(game_object.enemy, db.actor) 
    end   
end

function bar_arena_weapon_spawn ()
	local obj = level_object_by_sid (606)
	local spawn_items = {}
	for i = 1,100 do
		table.insert( spawn_items, "bandit_outfit")
	end
	for k,v in pairs(spawn_items) do
		alife():create(v, 
			obj:position(),
			obj:level_vertex_id(),  
			obj:game_vertex_id())
	end 
end

local function transfer_object_item(item)
	--TB3D_Services.transfer_item(out_object, item, in_object, "RXEFFCTS")
    out_object:transfer_item(item, in_object)
end

function bar_arena_teleport ( actor, npc)
	if TB3D_Modders.Global_Debug == true then
		TB3D_Services.packet_alert("xr effects: bar arena teleport")
	end
	local act_id = db.actor:id()
	if act_id then
		inv_box_1 = level_object_by_sid (573)
		aem_manager.transfer_to_box(inv_box_1)
		local spawn_items = {}  
		if has_alife_info("bar_arena_fight_1") then 
			table.insert(spawn_items, "wpn_pm")
			table.insert(spawn_items, "ammo_9x18_pmm")
			table.insert(spawn_items, "ammo_9x18_pmm")
			table.insert(spawn_items, "wpn_knife")
			table.insert(spawn_items, "novice_outfit")
			table.insert(spawn_items, "bandage")
			table.insert(spawn_items, "bandage")
			table.insert(spawn_items, "medkit")
			table.insert(spawn_items, "medkit")
		elseif has_alife_info("bar_arena_fight_2") then
			table.insert(spawn_items, "wpn_mp5")
			table.insert(spawn_items, "ammo_9x19_pbp")
			table.insert(spawn_items, "wpn_knife")    
			table.insert(spawn_items, "killer_outfit")
			table.insert(spawn_items, "bandage")
			table.insert(spawn_items, "bandage")
			table.insert(spawn_items, "medkit")
			table.insert(spawn_items, "medkit")
		elseif has_alife_info("bar_arena_fight_3") then
			table.insert(spawn_items, "wpn_bm16")
			table.insert(spawn_items, "ammo_12x70_buck")
			table.insert(spawn_items, "ammo_12x70_buck")
			table.insert(spawn_items, "wpn_knife")
			table.insert(spawn_items, "stalker_outfit")
			table.insert(spawn_items, "bandage")
			table.insert(spawn_items, "bandage")
			table.insert(spawn_items, "medkit")
			table.insert(spawn_items, "medkit")
		elseif has_alife_info("bar_arena_fight_4") then      
			table.insert(spawn_items, "wpn_ak74")
			table.insert(spawn_items, "ammo_5.45x39_ap")
			table.insert(spawn_items, "ammo_5.45x39_ap")
			table.insert(spawn_items, "wpn_knife")
			table.insert(spawn_items, "bandage")
			table.insert(spawn_items, "bandage")
			table.insert(spawn_items, "military_outfit")
			table.insert(spawn_items, "medkit")
			table.insert(spawn_items, "medkit")
		elseif has_alife_info("bar_arena_fight_5") then  
			table.insert(spawn_items, "wpn_abakan")
			table.insert(spawn_items, "ammo_5.45x39_ap")
			table.insert(spawn_items, "ammo_5.45x39_ap")
			table.insert(spawn_items, "ammo_5.45x39_ap")
			table.insert(spawn_items, "wpn_knife")
			table.insert(spawn_items, "bandage")
			table.insert(spawn_items, "bandage")
			table.insert(spawn_items, "medkit")
			table.insert(spawn_items, "medkit")
			table.insert(spawn_items, "svoboda_light_outfit")
		elseif has_alife_info("bar_arena_fight_6") then
			table.insert(spawn_items, "wpn_groza")
			table.insert(spawn_items, "ammo_9x39_ap")
			table.insert(spawn_items, "ammo_9x39_ap")
			table.insert(spawn_items, "ammo_9x39_ap")
			table.insert(spawn_items, "wpn_knife")
			table.insert(spawn_items, "grenade_f1")
			table.insert(spawn_items, "specops_outfit")
			table.insert(spawn_items, "bandage")
			table.insert(spawn_items, "bandage")
			table.insert(spawn_items, "medkit")
			table.insert(spawn_items, "medkit")
		elseif has_alife_info("bar_arena_fight_7") then
			table.insert(spawn_items, "wpn_knife")
			table.insert(spawn_items, "bandage")
			table.insert(spawn_items, "bandage")
			table.insert(spawn_items, "grenade_f1")
			table.insert(spawn_items, "grenade_f1")
			table.insert(spawn_items, "grenade_f1")
			table.insert(spawn_items, "grenade_f1")
			table.insert(spawn_items, "neytral_exo_antigas_outfit")
			table.insert(spawn_items, "medkit")
			table.insert(spawn_items, "medkit")
		elseif has_alife_info("bar_arena_fight_8") then
			table.insert(spawn_items, "wpn_g36")
			table.insert(spawn_items, "ammo_5.56x45_ap")
			table.insert(spawn_items, "ammo_5.56x45_ap")
			table.insert(spawn_items, "ammo_5.56x45_ap")
			table.insert(spawn_items, "ammo_5.56x45_ap")
			table.insert(spawn_items, "wpn_knife")
			table.insert(spawn_items, "killer_blue_exoskeleton")
			table.insert(spawn_items, "medkit")
			table.insert(spawn_items, "medkit")
			table.insert(spawn_items, "bandage")
			table.insert(spawn_items, "bandage")
		end
		local pos = db.actor:position()
		local gv = db.actor:game_vertex_id()
		local lv = db.actor:level_vertex_id()
		--TB3D_Services.packet_alert("xr effects: bar arena teleport posx["..utils.to_str(pos.x).."] posy["..utils.to_str(pos.y).."] posz["..utils.to_str(pos.z).."] lv["..utils.to_str(lv).."] gv["..utils.to_str(gv).."]")
		--NOTE 110004: The following will freeze the game if the player inventory is too large !!!!!
		if pos and lv and gv then
			for k,v in pairs(spawn_items) do
				alife():create(v, pos, lv, gv, act_id)
			end
		else
			TB3D_Services.packet_alert("xr effects: bar arena teleport bad position info!!!!")
		end
		aem_lights.lights_on(TB3D_Modders.aem_light_style)	--causes actor freeze in arena
	else
		TB3D_Services.packet_alert("xr effects: bar arena teleport no actor id!!!!")
	end
end

function bar_arena_weapon_slot ()
	if has_alife_info("bar_arena_fight_1") then  
		db.actor:activate_slot(1)
	else 
		db.actor:activate_slot(2)
	end
end

function bar_arena_teleport_2 ( actor, npc)
	level.add_pp_effector ("blink.ppe", 234, false)       
	db.actor:set_actor_position(patrol("t_walk_2"):point(0))
	local dir = patrol("t_look_2"):point(0):sub(patrol("t_walk_2"):point(0))
	db.actor:set_actor_direction(-dir:getH())
	inv_box_2 = level_object_by_sid (574)
	aem_manager.transfer_to_box(inv_box_2)
	aem_lights.remove_all_aem_lamps()
end

function barman_give_extra_task(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and (has_alife_info("agroprom_military_case_done") and not has_alife_info("bar_darklab_document_start")) then
		TB3D_Services.give_info("barman_job_1")
	elseif not has_alife_info("tb3d_skip_group1") and (has_alife_info("bar_darklab_document_done") and not has_alife_info("bar_x16_documents_start")) then
		TB3D_Services.give_info("barman_job_2")
	elseif not has_alife_info("tb3d_skip_group1a") and (has_alife_info("bar_x16_documents_done") and not has_alife_info("bar_deactivate_radar_start")) then
		TB3D_Services.give_info("barman_job_3")
	end
end

function trader_extra_task(actor, npc)
	if has_alife_info("tb3d_skip_group1") then return end
	if has_alife_info("esc_serious_talk") and not has_alife_info("agroprom_military_case") then
		TB3D_Services.give_info("trader_job")
	end
end

function scientist_extra_task(actor, npc)
	if has_alife_info("tb3d_skip_group1") then return end
	if has_alife_info("yan_find_scientist_done") and not has_alife_info("yan_find_vasilyev_start") then
		TB3D_Services.give_info("scientist_job")
	end
end

--function military_max_dead (actor, npc)
--end

--function military_lukash_dead (actor, npc)
--end

function mil_courier_death(actor, npc)
	if TB3D_Services.is_collector(2000) == false then
		TB3D_Services.give_info("mil_courier_dead")
		if has_alife_info("mil_leader_quest2_start") then
		   if not has_alife_info("mil_courier_visited") then
			  level_tasks.set_task_state(task.fail, "mil_courier_job", 1)
		   end   
		   level_tasks.set_task_state(task.completed, "mil_courier_job", 2)
		   level_tasks.set_task_state(task.completed, "mil_courier_job", 0)
		end
	end
end

function mil_courier_quest_fail(actor, npc)
	if TB3D_Services.is_collector(2000) == false then
		if has_alife_info("mil_courier_quest") then
			level_tasks.set_task_state(task.fail, "mil_courier_job", 0)
			TB3D_Services.give_info("mil_courier_quest_failed")
		end
	end
end

--function mil_scull_news (actor, npc)
--end

function mil_sniper_dead (actor, npc)
	if TB3D_Services.is_collector(2000) == false then
		if has_alife_info("mil_dolg_final_task") then
		   level_tasks.remove_location (npc:story_id (), "mil_sniper_location")
		end
	end	
end

function mil_actor_enemy_set(actor, npc)
    local sniper = level_object_by_sid (704)
    if sniper ~= nil then
       sniper:set_relation(game_object.enemy, db.actor) 
    end   
    --xr_gulag.setGulagRelation("mil_freedom", game_object.enemy, db.actor)    
end


function mil_actor_enemy_reset(actor, npc)
    local sniper = level_object_by_sid (704)
    if sniper ~= nil then
       sniper:set_relation(game_object.neutral, db.actor) 
    end   
    --xr_gulag.setGulagRelation("mil_freedom", game_object.neutral, db.actor)    
end

function mil_bomb_explode(actor, npc)
    local source = nil
    local sim = alife()
    if sim then
       local se_obj = sim:story_object(723)  
       if se_obj then
          source = level.object_by_id(se_obj.id)
       end
    end
    if source then
		local h = hit()
		h.power = 1000000
		h.direction = vector():set( 1, 0, 0 )
		h.impulse = 1
		h.draftsman = source
		h.type = hit.chemical_burn
		source:hit(h)
		source:explode(0)
	else
       --if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("xr effects","Bomb with story id MIL_BOMB not found") end
    end
end

function mil_set_alarm (actor, npc)
	if TB3D_Services.is_collector(2000) == false then
		--TB3D_Services.packet_alert("pl:millitary base is under attack!!!!!!!")
		TB3D_Services.give_info("mil_freedom_under_attack")
		local skull = level_object_by_sid (708)	--Mil_Dolg_Zoneguard
		if skull then 
			this.set_stalker_enemy (702, skull)     -- hit to Lukash
			this.set_stalker_enemy (707, skull)     -- hit to Max
			this.set_stalker_enemy (730, skull)     -- hit to Sniper1
			this.set_stalker_enemy (731, skull)     -- hit to Sniper2
			this.set_stalker_enemy (732, skull)     -- hit to Sniper3
		end
	end
end

function sar2_monolith_explode (actor, npc)
    local monolith = level_object_by_sid (1305)
    if monolith then
		local h = hit()
		h.power = 1000
		h.direction = vector():set( 1, 0, 0 )
		h.impulse = 1
		h.draftsman = db.actor
		h.type = hit.chemical_burn
		monolith:hit(h)
	else
       if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("Object MONOLITH with SID 1305 not found") end
    end    
end

function set_stalker_enemy(sid, draftsman)
    local npc = level_object_by_sid (sid)
    if npc and npc:alive() then
		local h = hit()
		h.power = 0
		h.direction = vector():set( 1, 0, 0 )
		h.impulse = 0
		h.draftsman = draftsman
		h.type = hit.strike
		npc:hit(h)
	end
end

function mil_remove_cook_map_spot(actor, npc)
    level_tasks.remove_location(728, "mil_cook_location")
end

function mil_transfer_docs_to_ara (actor, npc)
    --local ara = level_object_by_sid (719)
    --local pavlik = level_object_by_sid (710)
    --if ara == nil or pavlik == nil or pavlik:object ("mil_courier_doc") == nil then
       --return
    --end   
    --ara:transfer_item (pavlik:object ("mil_courier_doc"), pavlik)
end

function mil_emeny_nearest (actor, npc)
    if db.actor and db.actor:alive() then
		local gulag = xr_gulag.get_gulag_by_name ("mil_freedom")
		if gulag then
			if gulag:npc_is_enemy_to_anybody(db.actor) then
			   TB3D_Services.give_info("mil_enemy_nearest")
			end
		end
	end
end

function mil_cap_mapspot(actor, npc)
    local cap = level_object_by_sid(724)
    if cap and cap:alive() then
		if not has_alife_info("mil_fblockpost_spot_set") then
		   TB3D_Services.give_info("mil_fblockpost_spot") 
		   TB3D_Services.give_info("mil_fblockpost_spot_set")
		   level_tasks.add_location (724, "mil_fblockpost_location")
		end
	end
end

function mil_cap_mapspot_remove(stalker1, stalker2)
    if has_alife_info("mil_fblockpost_spot") then
       level_tasks.remove_location_safe (724, "mil_fblockpost_location")
       TB3D_Services.remove_info("mil_fblockpost_spot_remove")
    end      
end

function set_actor_enemy_for_freedom (actor, npc)
    xr_gulag.setGulagEnemy ("mil_freedom", db.actor)
end

---------------------------------- GARBAGE
function gar_send_dolg_warning()	--not used in all.spawn, uses gar_dolg_warning tip instead
	if TB3D_Services.is_collector(2000) == true then
		--TB3D_Triggers.gar_send_dolg_warning()
	elseif not has_alife_info("tb3d_skip_group1") then
		if db.actor then
			if xr_gulag.getGulagPopulation("gar_dolg") > 0 then
				news_manager.send_tip(db.actor, "gar_dolg_warning", 0, "dolg")
			end
		end
	end
end

-------------------------------------------------------------------------------------
-- Options for DarkValley
-------------------------------------------------------------------------------------
function val_escort_guard_death(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		--TB3D_Services.packet_alert("xr_effects: <val_escort_guard_death>["..npc:name().."]")
		local idx = string.sub(npc:name(), -1)
		local t = db.storage[npc:id()].death
		TB3D_Services.remove_info("val_escort_guard" .. idx .. "_combat")
		TB3D_Services.give_info("val_escort_guard" .. idx .. "_dead")
		if t ~= nil and t.killer == db.actor:id() then
			TB3D_Services.give_info("val_escort_actor_helped")
		end
		--"on_info     = %-val_escort_guard1_combat +val_escort_guard1_dead%\n" ..
		--"on_info2    = {=killed_by_actor} %+val_escort_actor_helped%\n" ..
	end
end

function val_escort_guard_hit(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		local idx = string.sub(npc:name(), -1)
		local t = db.storage[npc:id()].hit
		if t ~= nil then
			if t.who == db.actor:id() then
				TB3D_Services.give_info("val_escort_combat")
				TB3D_Services.give_info("val_escort_actor_helped")
				if not has_alife_info("val_escort_nap1_start_combat") then
					TB3D_Services.give_info("val_escort_captive_enemy")
				end
			else
				local npc1 = level_object_by_sid(406)
				if npc1 ~= nil and t.who == npc1:id() then
					TB3D_Services.give_info("val_escort_combat")
					TB3D_Services.give_info("val_escort_nap1_start_combat")
				--else
					--TB3D_Services.give_info("val_escort_guard" .. idx .. "_combat")
				end
			end
		end
		--"on_info     = {=hit_by_actor} %+val_escort_combat +val_escort_actor_helped%, %+val_escort_guard1_combat%\n" ..
		--"on_info2    = {+val_escort_combat -val_escort_nap1_start_combat} %+val_escort_captive_enemy%\n" ..
		--"on_info3    = {=hitted_by(406) -val_escort_captive_enemy} %+val_escort_nap1_start_combat%\n" ..
	end
end

function val_escort_guard_combat(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		local idx = string.sub(npc:name(), -1)
		TB3D_Services.give_info("val_escort_guard" .. idx .. "_combat")
		if npc:see(db.actor) then
			if not has_alife_info("val_escort_nap1_start_combat") then
				TB3D_Services.give_info("val_escort_captive_enemy")
			end
			TB3D_Services.give_info("val_escort_combat")
		end
		--"on_info     = %+val_escort_guard1_combat%\n" ..
		--"on_info2    = {=see_actor -val_escort_nap1_start_combat -val_escort_captive_enemy} %+val_escort_captive_enemy%\n" ..
		--"on_info3    = {=see_actor -val_escort_combat} %+val_escort_combat% ;remark@val_escort_guard1_fight\n" ..
	end
end

function val_escort_guard_free(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		--local idx = string.sub(npc:name(), -1)
		TB3D_Services.give_info("val_escort_guards_free")
		TB3D_Services.remove_info("val_escort_guard" .. string.sub(npc:name(), -1) .. "_combat")
		--"on_info = %+val_escort_guards_free -val_escort_guard1_combat%\n"
	end
end

-------------------------------------------------------------------------------------
-- kill
-------------------------------------------------------------------------------------
function killactor (actor, npc)
    npc:set_relation (game_object.enemy, db.actor)
    --TB3D_Services.give_info("mil_bodyguard_kill")
end

function kill(actor, npc)
	npc:kill( npc )
end

-------------------------------------------------------------------------------------
-- Options for the agricultural industry
-------------------------------------------------------------------------------------

function agr_krot_sos( actor, npc )
	if TB3D_Services.is_collector(2000) == true then
		TB3D_Triggers.agro_krot_sos1()
	elseif not has_alife_info("tb3d_skip_group1") then
		news_manager.send_tip(db.actor, "tips_agr_krot_sos", 0, "krot", 10000 )
	end
end

function agr_krot_sos_1_2( actor, npc )
	if TB3D_Services.is_collector(2000) == true then
		TB3D_Triggers.agro_krot_sos2()
	elseif not has_alife_info("tb3d_skip_group1") then
	  if not has_alife_info( "agr_help_krot_start" )
	    and not has_alife_info( "agr_help_krot_done" )
		and not has_alife_info( "agr_krot_skirmish_start" )
		and not has_alife_info( "agr_krot_dead" ) and not(agroprom_tasks.agr_actor_enemy()) then
			TB3D_Services.give_info( "agr_help_krot_start" )
			news_manager.send_tip(db.actor, "tips_agr_krot_sos1", 0, "krot", 10000 )
			if has_alife_info( "agr_help_stalkers_defence_dead" ) then
				news_manager.send_tip(db.actor, "tips_agr_krot_sos2", 0, "krot", 10000 )
			end
		end
	end
end

function agr_knockdown(actor, npc)
	--TB3D_Services.info_alert("Knockdown called")
	if TB3D_Services.is_collector(2000) == true then
		TB3D_Triggers.agro_knockdown()
	elseif not has_alife_info("tb3d_skip_group1") then
		local snd_obj = xr_sound.get_safe_sound_object([[affects\tinnitus3a]])
		snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
		level.add_cam_effector("camera_effects\\earthquake.anm", 1974, false, "")
	end
end

function agr_contuz(actor, npc)
	--TB3D_Services.info_alert("agr_contuz called")
	if TB3D_Services.is_collector(2000) == true then
		TB3D_Triggers.agro_contuz()
	elseif not has_alife_info("tb3d_skip_group1") then
		local sound_obj_l = xr_sound.get_safe_sound_object( [[affects\psy_blackout_l]] )
		local sound_obj_r = xr_sound.get_safe_sound_object( [[affects\psy_blackout_r]] )
		sound_obj_l:play_no_feedback(db.actor, sound_object.s2d, 0, vector():set(-1, 0, 1), 1.0)
		sound_obj_r:play_no_feedback(db.actor, sound_object.s2d, 0, vector():set( 1, 0, 1), 1.0)
	end
end

function agr_cam_effect (actor, npc)
	--TB3D_Services.info_alert("agr_cam_effect called")
	if TB3D_Services.is_collector(2000) == true then
		TB3D_Triggers.agr_cam_effect()
	elseif not has_alife_info("tb3d_skip_group1") then
		level.add_cam_effector2("camera_effects\\agroprom_doctor_cam.anm", 123, false, "")
	end
end

function agr_weapon(actor, npc)
	if db.actor ~= nil then db.actor:activate_slot(2) end
end
function agr_hold_enemy(actor, npc)
	if TB3D_Services.is_collector(2000) == false then
		local gulag = xr_gulag.get_gulag_by_name("agr_factory_hold")
		for k, v in pairs(gulag.Object) do
			if v ~= true and level.object_by_id( k ) ~= nil then
				TB3D_hit_styles.wound(db.actor, v, nil, 0.01, 1, vector():set( 1, 0, 0 ))
			end
		end 
	end
end
--------------------------------------------------------- 
-- PRIPYAT
--------------------------------------------------------- 
function pri_zombied_in_combat_inc(actor, npc)
	if TB3D_Services.is_collector(2000) == false then
		gulag_pripyat.zombied_in_combat[npc:name()] = true
		--printf("effect <pri>: zombied in combat(%s) inc.", npc:name())
	end
end

function pri_zombied_in_combat_dec(actor, npc)
	if TB3D_Services.is_collector(2000) == false then
		gulag_pripyat.zombied_in_combat[npc:name()] = nil
		--printf("effect <pri>: zombied in combat(%s) dec.", npc:name())
	end
end

function pri_drop_rpg_ammo(actor, npc)
	if TB3D_Services.is_collector(2000) == false then
		local item = npc:object("ammo_og-7b")
		if item then
			npc:drop_item(item)
		else
			--printf("xr_effects <pri_drop_rpg_ammo>: there is no [ammo_og-7b] in [%s] inventory.", npc:name())
		end
	end
end

function pri_give_ammo_og7b(actor, npc)
	if TB3D_Services.is_collector(2000) == false then
		alife():create("ammo_og-7b", npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id())
		alife():create("ammo_og-7b", npc:position(), npc:level_vertex_id(), npc:game_vertex_id(), npc:id())
	end
end

---------------------------------------------------------
-- DeadCity
---------------------------------------------------------


---------------------------------------------------------
-- Sarcofag + Monolith
---------------------------------------------------------
function osoznanie_call(actor, npc)
	if TB3D_Services.is_collector(2000) == true then
		TB3D_Triggers.osoznanie_call()
	elseif not has_alife_info("tb3d_skip_group3") then
		news_manager.send_tip(db.actor, "o_soznanie_text", 0, "o_soznanie")
	end
end

function death_monolith_ghosts(actor, npc)
	if TB3D_Services.is_collector(2000) == true then
		TB3D_Triggers.death_monolith_ghosts()
	elseif not has_alife_info("tb3d_skip_group3") then
		TB3D_Services.get_sar2_ghosts()
	end
end

---------------------------------------------------------
-- Sarcofag2, 110000 not used
---------------------------------------------------------
--[[
local sar2_heroes_list = {
    "sar2_tutorial_wounded",
    "sar2_stalker_freeman",
    "sar2_doctor",
    "sar2_dram_novice",
    "sar2_bandit_novice",
    "sar2_ranger",
    "sar2_bandit_general",
    "sar2_zombied_novice",
    "sar2_fox",
    "sar2_seriy",
    "sar2_ratcatcher",
    "sar2_wolf",
    "sar2_ecolog_professor",
    "sar2_psih",
    "sar2_stalker_explorer",
    "sar2_hellcar",
    "sar2_fanat",
    "sar2_gar_dolg_blokpost_commander",
    "sar2_krot",
    "sar2_bandit_borov",
    "sar2_arena_manager",
    "sar2_zastava_commander_1",
    "sar2_bandit_leader",
    "sar2_svoboda_zombi_stalker",
    "sar2_monolith_regular2",
    "sar2_monolith_regular",
    "sar2_bandit_veteran",
    "sar2_soldier_regular",
    "sar2_killer_regular",
    "sar2_killer_informator",
    "sar2_svoboda_cook",
    "sar2_svoboda_bodyguard",
    "sar2_svoboda_stukach",
    "sar2_esc_soldier_commander",
    "sar2_zombied_stalker",
    "sar2_soldier_specnaz",
    "sar2_killer_specnaz",
    "sar2_dolg_specnaz_cherep",
    "sar2_svoboda_blockpost_leader",
    "sar2_dolg_guard_commander",
    "sar2_dolg_ivancov",
    "sar2_dolg_petrenko",
    "sar2_dolg_leader",
    "sar2_svoboda_attack_commander",
    "sar2_crazy_veterans_lucky",
    "sar2_svoboda_engineer",
    "sar2_svoboda_leader",
    "sar2_svoboda_trader",
    "sar2_svoboda_master_max",
    "sar2_monolith_specnaz2",
    "sar2_monolith_specnaz",
    "sar2_svoboda_master_ugrumiy",
    "sar2_arena_savage",
    "sar2_zombied_exo",
    "sar2_monolith_leader",
    "sar2_killer_ambush_tiran",
    "sar2_killer_exo",
    "sar2_soldier_stalker",
    "sar2_monolith_exo",
    "sar2_monolith_exo2"
}

local sar2_heroes_sel_number, sar2_heroes_number = 0, 60
local sar2_heroes_count, sar2_heroes_max_count = 0, 6
local sar2_hero_next_free_id = 1
local sar2_heroes_sel = {}

function sar2_scene_start(actor, npc)
	if TB3D_Services.is_collector(2000) == true then
		TB3D_Triggers.sar2_scene_start()
	elseif not has_alife_info("tb3d_skip_group3") then
		--printf("effects <sar2>: scene start initializing.")
		sar2_heroes_sel = {}
		sar2_heroes_sel_number = 0
		sar2_hero_next_free_id = 1
		for i = 1, sar2_heroes_number do
			if has_alife_info("sar2_death_" .. i) then
				table.insert(sar2_heroes_sel, i)
				sar2_heroes_sel_number = sar2_heroes_sel_number + 1
			end
		end
		if TB3D_Modders.show_tables then show_tables(sar2_heroes_sel, nil, "xr effects") end
		--printf("effects <sar2>: scene end initializing.")
	end
end

function sar_hero_dead(actor, npc)
	if not has_alife_info("tb3d_skip_group3") and TB3D_Services.is_collector(2000) == false then
		TB3D_Services.give_info("sar2_monolith_rock")
		if sar2_heroes_count > 0 then
			sar2_heroes_count = sar2_heroes_count - 1
		end
		if sar2_heroes_count == 0 and sar2_hero_next_free_id > sar2_heroes_sel_number then
			TB3D_Services.give_info("sar2_monolith_end")
		end
		--printf("effects <sar2>: hero dead.")
	end
end

function sar2_hero_spawn(actor, npc)
	if not has_alife_info("tb3d_skip_group3") and TB3D_Services.is_collector(2000) == false then
		--printf("effects <sar2>: hero count - %d, max - %d.", sar2_heroes_count, sar2_heroes_max_count)
		local c = sar2_heroes_max_count - sar2_heroes_count
		-- check if we need to spawn stalkers
		if sar2_hero_next_free_id <= sar2_heroes_sel_number and c > 0 then
			local n = math.min(sar2_hero_next_free_id + c - 1, sar2_heroes_sel_number)
			for i = sar2_hero_next_free_id, n do
				TB3D_Services.give_info("sar2_spawn_" .. sar2_heroes_sel[i])
			end
			if n >= sar2_hero_next_free_id then
				--printf("effects <sar2>: hero spawn.")
			end
			sar2_heroes_count = sar2_heroes_count + (n - sar2_hero_next_free_id + 1)
			sar2_hero_next_free_id = n + 1
		end
	end
end
--]]

-------------------------------------------------------------------------------------
-- Options for the helicopters
-------------------------------------------------------------------------------------
function heli_set_enemy_actor(actor, npc)
	if TB3D_Modders.heli_attack == true then
		local st = db.storage[npc:id()]
		if not st.combat.enemy_id and db.actor:alive() then
			st.combat.enemy_id = db.actor:id()
			heli_snd.play_snd( st, heli_snd.snd_see_enemy, 1 )
		end 
	end
end

function heli_set_enemy(actor, npc, p)
	if TB3D_Modders.heli_attack == true then
		local st  = db.storage[npc:id()]
		local obj = level_object_by_sid( p[1] )
		if not st.combat.enemy_id and obj:alive() then
			st.combat.enemy_id = obj:id()
			heli_snd.play_snd( st, heli_snd.snd_see_enemy, 1 )
		end
	end
end

function heli_clear_enemy(actor, npc)
    db.storage[npc:id()].combat:forget_enemy()
end

function heli_start_flame(actor, npc)
	bind_heli.heli_start_flame( npc )
end

function heli_die(actor, npc)
	bind_heli.heli_die( npc )
end

-------------------------------------------------------------------------------------
-- Options for the weather effects
-------------------------------------------------------------------------------------
function start_small_reject (actor, npc)
	if TB3D_services.is_collector(2000) == false then
		level.set_weather_fx ("surge_day")
		level.add_pp_effector ("vibros_p.ppe", 1974, false)
		this.aes_earthshake (npc)
		TB3D_Services.delayed_action(1, "tb3d_earth_shake", 12)
		--set_postprocess ("scripts\\postprocess1.ltx")
	end
end

function start_full_reject (actor, npc)
	if TB3D_services.is_collector(2000) == false then
		level.set_weather_fx ("surge_day")
		level.remove_pp_effector (1974)
		level.add_pp_effector ("vibros.ppe", 1974, false)
		--set_postprocess ("scripts\\postprocess.ltx")
	end
end

function aes_grenade_explode(actor, npc)
    local obj = level_object_by_sid(1101)
    if obj then
		local h = hit()
		h.power = 1000
		h.direction = vector():set(1, 0, 0)
		h.impulse = 1
		h.draftsman = obj
		h.type = hit.chemical_burn
		obj:hit(h)
	end
end

function aes_kill_actor(actor, npc)
	local actor = db.actor
    if actor ~= nil and actor.health > 0 then 
       actor:kill(actor)
    end   
end

function set_sidorovich_animation(npc)
	if not has_alife_info("tb3d_skip_group3") and TB3D_Services.is_collector(2000) == false then
		local sidor = level_object_by_sid(1118)
		if sidor then
			--sidor:clear_animations()
			sidor:play_cycle("wonder", true)
			--sidor:add_animation("idle_looped")
		else
		   if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("SIDOROVICH NOT FOUND !!!") end
		end
	end
end

function aes_zombie_hit1 (npc)
    --local npc = level_object_by_sid (1119)
    --local force = vector ():set (0, 0, 0.02)
    --local pshell = npc:get_physics_shell ()
    --local joint = pshell:get_joint_by_bone_name ("head2")
    --joint:set_max_force_and_velocity (0.5 + math.random (), 0.1 * -1, 0)
    --joint:set_max_force_and_velocity (0.5 + math.random(), 0.1 * -1,  2)
    --local npc = level_object_by_sid (1119)
    --local force = vector ():set (0, 0, 50)
    --local pshell = npc:get_physics_shell ()
    --local element = pshell:get_element_by_bone_name ("foot_right")
    --element:apply_force (force.x, force.y, force.z)
    -- foot_right, foot_left, left_hand, right_hand
    --local dir = npc:direction ()
    --dir.y = 0.0
    --dir:normalize ()
  --npc:set_const_force (dir, 2000, 3)
    --npc = level_object_by_sid (1120)
    --dir = npc:direction ()
    --dir.y = 0.0
    --dir:normalize ()   
  --npc:set_const_force (dir, 2000, 3)
    --npc = level_object_by_sid (1121)
    --dir = npc:direction ()
    --dir.y = 0.0
    --dir:normalize ()   
  --npc:set_const_force (dir, 2000, 3)
    --npc = level_object_by_sid (1122)
    --dir = npc:direction ()
    --dir.y = 0.0
    --dir:normalize ()   
  --npc:set_const_force (dir, 2000, 3)
    --npc = level_object_by_sid (1123)
    --dir = npc:direction ()
    --dir.y = 0.0
    --dir:normalize ()   
  --npc:set_const_force (dir, 2000, 3)
end

function aes_zombie_hit2 (npc)
    --local npc = level_object_by_sid (1119)
    --local force = vector ():set (0, 0, 50)
    --local pshell = npc:get_physics_shell ()
    --local element = pshell:get_element_by_bone_name ("foot_right")
    --element:apply_force (force.x, force.y, force.z)
    --local npc = level_object_by_sid (1119)
    --local force = vector ():set (0, 0, 0.02)
    --local pshell = npc:get_physics_shell ()
    --local joint = pshell:get_joint_by_bone_name ("head2")
    --joint:set_max_force_and_velocity (0.5 + math.random (), 0.1 * 1, 0)
    --joint:set_max_force_and_velocity (0.5 + math.random(), 0.1 * 1,  2)
                --self.dir_x_axis  = self.dir_x_axis * (-1)
                --self.dir_z_axis = self.dir_z_axis * (-1)
                --self.time    = device():time_global() + math.random(800, 1000)
        --end
    --local element = pshell:get_element_by_bone_name ("foot_right")
    --element:apply_force (force.x, force.y, force.z)
    --local npc = level_object_by_sid (1119)
    --local dir = npc:direction ()
    --dir.y = 0.0
    --dir.x = -dir.x
    --dir.z = -dir.z
    --dir:normalize ()
  --npc:set_const_force (dir, 2000, 3)
    --npc = level_object_by_sid (1120)
    --dir = npc:direction ()
    --dir.y = 0.0
    --dir.x = -dir.x
    --dir.z = -dir.z
    --dir:normalize ()   
  --npc:set_const_force (dir, 2000, 3)
    --npc = level_object_by_sid (1121)
    --dir = npc:direction ()
    --dir.y = 0.0
    --dir.x = -dir.x
    --dir.z = -dir.z
    --dir:normalize ()   
  --npc:set_const_force (dir, 2000, 3)
    --npc = level_object_by_sid (1122)
    --dir = npc:direction ()
    --dir.y = 0.0
    --dir.x = -dir.x
    --dir.z = -dir.z
    --dir:normalize ()   
  --npc:set_const_force (dir, 2000, 3)
    --npc = level_object_by_sid (1123)
    --dir = npc:direction ()
    --dir.x = -dir.x
    --dir.z = -dir.z
    --dir.y = 0.0
    --dir:normalize ()   
  --npc:set_const_force (dir, 2000, 3)
end

-- postprocess and shock effect in the face
local last_shake
function aes_earthshake (npc)
	if not last_shake then last_shake = 0 end
	if last_shake > time_global() + 1000 then
		local snd_obj = xr_sound.get_safe_sound_object([[ambient\earthquake]])
		snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
		level.add_cam_effector("camera_effects\\earthquake.anm", 1974, false, "")
		--set_postprocess ("scripts\\earthshake.ltx")
		last_shake = time_global()
	end
end

--function vovan_camera_test (npc)
  --level.add_cam_effector("camera_effects\\test.anm", "")                    
--end
-------------------------------------------------------------------------------------
-- Options for Amber
----------------------------------------------------------------------------------
function yan_actor_sleep (actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		db.actor:set_actor_position(patrol("yan_actor_sleep"):point(0))
		local dir = patrol("yan_actor_sleep"):point(1):sub(patrol("yan_actor_sleep"):point(0))
		db.actor:set_actor_direction(-dir:getH())
	end
end

function yan_actor_sleep_1 (actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		db.actor:set_actor_position(patrol("yan_actor_sleep_1"):point(0))
		local dir = patrol("yan_actor_sleep_1"):point(1):sub(patrol("yan_actor_sleep_1"):point(0))
		db.actor:set_actor_direction(-dir:getH())
	end
end

function yan_dream_voices(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
        local sound_obj_l = xr_sound.get_safe_sound_object( [[characters_voice\scenario\yantar\dream_talk_l]] )
        local sound_obj_r = xr_sound.get_safe_sound_object( [[characters_voice\scenario\yantar\dream_talk_r]] )
		sound_obj_l:play_no_feedback(db.actor, sound_object.s2d, 0, vector():set(-1, 0, 1), 1.0)
		sound_obj_r:play_no_feedback(db.actor, sound_object.s2d, 0, vector():set( 1, 0, 1), 1.0)
	end
end

function yan_gluk(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		local sound_obj_l = xr_sound.get_safe_sound_object( [[affects\psy_blackout_l]] )
		local sound_obj_r = xr_sound.get_safe_sound_object( [[affects\psy_blackout_r]] )
		sound_obj_l:play_no_feedback(db.actor, sound_object.s2d, 0, vector():set(-1, 0, 1), 1.0)
		sound_obj_r:play_no_feedback(db.actor, sound_object.s2d, 0, vector():set( 1, 0, 1), 1.0)
		level.add_cam_effector("camera_effects\\earthquake.anm", 1974, false, "")
	end
end

function x18_gluk(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		level.add_pp_effector ("blink.ppe", 234, false)
		local sound_obj_l = xr_sound.get_safe_sound_object( [[affects\psy_blackout_l]] )
		local sound_obj_r = xr_sound.get_safe_sound_object( [[affects\psy_blackout_r]] )
		local snd_obj = xr_sound.get_safe_sound_object( [[affects\tinnitus3a]] )
		snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
		sound_obj_l:play_no_feedback(db.actor, sound_object.s2d, 0, vector():set(-1, 0, 1), 1.0)
		sound_obj_r:play_no_feedback(db.actor, sound_object.s2d, 0, vector():set( 1, 0, 1), 1.0)
		level.add_cam_effector("camera_effects\\earthquake.anm", 1974, false, "")
	end
end

function yan_sleep_not_relocate (actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then db.actor:actor_sleep(0, 180) end
end
function yantar_kruglov_talk(actor,npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then xr_sound.set_sound_play(npc, "rostok_kruglov_help_6") end
end

function yantar_professor_spam_1(actor, npc)
    if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then news_manager.send_tip(db.actor, "general_ecolog_tip_1", nil, "saharov", nil, 902) end
end

function yantar_professor_spam_2(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then news_manager.send_tip(db.actor, "general_ecolog_tip_2", nil, "saharov", nil, 902) end
end

function yantar_vasilyev_spam(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then news_manager.send_tip(db.actor, "storyline_vasilyev_tip", nil, "ecolog", nil, 903) end
end

function yan_saharov_message(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		news_manager.send_tip(db.actor, "yan_saharov_message_p2", nil, "saharov", nil, 902)
		news_manager.send_tip(db.actor, "yan_saharov_message", nil, "saharov", nil, 902)
		TB3D_Services.give_info("labx16_find")
	end
end

function yan_saharov_message_2(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		news_manager.send_tip(db.actor, "yan_saharov_message_2_p2", nil, "saharov", nil, 902)
		news_manager.send_tip(db.actor, "yan_saharov_message_2", nil, "saharov", nil, 902)
	end
end
function yan_saharov_message_3(actor, npc)
	if not has_alife_info("tb3d_skip_group1") and TB3D_Services.is_collector(2000) == false then
		news_manager.send_tip(db.actor, "yan_saharov_message_3_p2", nil, "saharov", nil, 902)
		news_manager.send_tip(db.actor, "yan_saharov_message_3", nil, "saharov", nil, 902)
	end
end
function yan_ghost_pda(actor, npc)
	if TB3D_Services.is_collector(2000) == true then
		TB3D_Triggers.yan_ghost_pda()
	elseif not has_alife_info("tb3d_skip_group1") then
		--if has_alife_info("agr_find_gunslinger_cache_final") then 	--moved to bind_stalker 109934
			--TB3D_Services.give_info("yan_provodnik_spawn")
		--end
		TB3D_Services.give_info("yan_has_ghost_pda")
	end
end

function start_yantar_dream(actor, npc)
	if TB3D_Services.is_collector(2000) == true then
		TB3D_Triggers.yantar_dream(true)
	elseif not has_alife_info("tb3d_skip_group1") then
		game.start_tutorial("yantar_dream")
	end
end

function end_yantar_dream(actor, npc)
	if TB3D_Services.is_collector(2000) == true then
		TB3D_Triggers.yantar_dream(false)
	elseif not has_alife_info("tb3d_skip_group1") then
		TB3D_Services.give_info("yantar_find_ghost_task_start")
	end
end

-----------------------------radar
function rad_sos_spam(actor, npc)
	if TB3D_Services.is_collector(2000) == true then
		--TB3D_Triggers.x18_dream(true)
	elseif not has_alife_info("tb3d_skip_group1a") then
		news_manager.send_tip(db.actor, "tips_rad_sos_suicide", nil, "stalker", nil, 1004)
	end
end

function monolith_generator_hit (actor, npc)
    --printf ("ON GENERATOR HIT !!!")
end

function start_x18_dream(actor, npc)
	if TB3D_Services.is_collector(2000) == true then
		TB3D_Triggers.x18_dream(true)
	elseif not has_alife_info("tb3d_skip_group1a") then
		game.start_tutorial("x18_dream")
	end
end
function end_x18_dream(actor, npc)
	if TB3D_Services.is_collector(2000) == true then
		TB3D_Triggers.x18_dream(false)
	elseif not has_alife_info("tb3d_skip_group1a") then
		TB3D_Services.give_info("dar_x18_dream")
	end
end

--[[---------------- last portal to top of tower, called by all.spawn ---------------]]
function aes_final_movie(actor, npc)
	-- game.start_tutorial("mov_refuse_osoznanie")	--might put vid in future
	TB3D_Triggers.chaes_tower_portal()
end
--[[---------------------------- now goes to swamp water tower ----------------------------------]]

function start_kursk_dream(actor, npc)
	if TB3D_Services.is_collector(2000) == false then
		game.start_tutorial("kursk_dream")
	end
end

function start_death_machine_dream(actor, npc)
	if TB3D_Services.is_collector(2000) == false then
		game.start_tutorial("death_machine_dream")
	end
end

function start_vzlet_generators(actor, npc)
	if TB3D_Services.is_collector(2000) == false then
		game.start_tutorial("vzlet_generators")
	end
end

function start_vzlet_bolota(actor, npc)
	if TB3D_Services.is_collector(2000) == false then
		game.start_tutorial("vzlet_bolota")
	end
end

function start_dolg_dream(actor, npc)									--was dolg guard, now end of chaes
	if not has_alife_info("tb3d_skip_group3") and TB3D_Services.is_collector(2000) == false then
		game.start_tutorial("dolg_dream")
	end
end

function start_finish_dopa_dream(actor, npc)							--limansk platform
	if TB3D_Services.is_collector(2000) == false then
		game.start_tutorial("finish_dopa_dream")
	end
end

------------------------------------------------------------------------------------
-- Options for Radar
------------------------------------------------------------------------------------
function rad_psi_hit (actor, npc)
	if TB3D_Services.is_collector(2000) == true then
		TB3D_Triggers.rad_psi_hit()
	elseif not has_alife_info("tb3d_skip_group1a") then
		level.add_pp_effector ("radar_psi.ppe", 2006, false)
	end
end

function start_radar_dream(actor, npc)
	if TB3D_Services.is_collector(2000) == true then
		TB3D_Triggers.radar_dream(true)
	elseif not has_alife_info("tb3d_skip_group1a") then
		game.start_tutorial("radar_dream")
	end
end

function end_radar_dream(actor, npc)
	if TB3D_Services.is_collector(2000) == true then
		TB3D_Triggers.radar_dream(false)
	elseif not has_alife_info("tb3d_skip_group1a") then
		TB3D_Services.give_info("bun_patrol_start")
	end
end

------------------------------------------------------------------------------------
-- Options for Shelter
------------------------------------------------------------------------------------
function destroy_monolith_generator(actor, npc)
	if TB3D_Services.is_collector(2000) == false then
		local source = nil
		local sim = alife()
		if sim then
		   local se_obj = sim:story_object(1305)  
		   if se_obj then
			  source = level.object_by_id(se_obj.id)
		   end
		end
		if source then
			local h = hit()
			h.power = 1000000
			h.direction = vector():set( 1, 0, 0 )
			h.impulse = 1
			h.draftsman = source
			h.type = hit.chemical_burn
			source:hit(h)   
		else
		   TB3D_Services.abort_alert("MONOLITH GENERATOR story id 1305 not found")
		end
	end
end

function sar_monolith_miracle(actor, npc)
	if not has_alife_info("tb3d_skip_group2") then
		local nbr = 5	--final_immortal
		if has_alife_info("mil_lukash_dead") and has_alife_info("bar_voronin_dead") then	--' Killed the faction leaders
			nbr=3		--final_to_monolith
		elseif db.actor:money() >= 100000 then  											--' A lot of money
			nbr=2		--final_gold
		elseif db.actor:character_reputation() >= 1000 then  								--' Good reputation
			nbr=1		--final_blind
		elseif db.actor:character_reputation() <= -1000 then  								--' bad reputation
			nbr=4		--final_apocal
		end
		game.start_tutorial("mov_desire_"..utils.to_str(nbr)) 
	end
end

function sar_monolith_send(actor, npc)
	if TB3D_Services.is_collector(2000) == true then
		if has_alife_info("tb3d_goldbar_11") then				--has dead marsh note and bar
			if has_alife_info("tb3d_ready_for_tunnel") then
				TB3D_Services.teleportate("tunnels")			--send to tunnels
			elseif not has_alife_info("tb3d_goldbar_13") then
				TB3D_Services.teleportate("research2")			--send to research
			elseif not has_alife_info("tb3d_goldbar_14") then
				TB3D_Services.teleportate("labx8")				--send to x8
			else
				TB3D_Services.move_actor(-29.318,19.210,39.725,true)	--top of spiral stairs at entrance
			end
		else
			TB3D_Services.teleportate("exit_nppt_htd")
		end
	else
		local sndr = math.random(7)
		if sndr == 1 then
			TB3D_Services.teleportate("bar")
		elseif sndr == 2 then
			TB3D_Services.teleportate("garbage")
		elseif sndr == 3 then
			TB3D_Services.teleportate("dvalley")
		elseif sndr == 4 then
			TB3D_Services.teleportate("swamp")
		elseif sndr == 5 then
			TB3D_Services.teleportate("agroprom")
		elseif sndr == 6 then
			TB3D_Services.teleportate("warehouses")
		else
			TB3D_Services.teleportate("cordon")
		end
	end
end

function game_credits(actor, npc)
	db.gameover_credits_started = true
	game.start_tutorial("credits_seq")
end

function game_over(actor, npc)
	if db.gameover_credits_started == true then
		local c = get_console()
		c:execute("main_menu on")
	end
end

function after_credits(actor, npc)
	local c = get_console()
	c:execute("main_menu off")
	if db.gameover_credits_started == true then
		db.gameover_credits_started = false
		TB3D_Triggers.monolith_over()
	end
end

function pri_game_over(actor, npc)
	local c = get_console()
	c:execute("main_menu on")
end

function esc_init_dialod ()
	local trader = level_object_by_sid(003)
	db.actor:run_talk_dialog(trader)
end

function oso_init_dialod ()
	-- local oso = level_object_by_sid(1307)
	-- db.actor:run_talk_dialog(oso)
end

function change_leader(actor, npc)										--leader dies, in ltx
	if xr_gulag.getGulagPopulation(823) == 0 then
		TB3D_Services.give_info("pri_followers_all_dead")				--fails quest
	end
end

function on_tutor_gameover_stop()
	local c = get_console()
	--c:execute("disconnect")
	--printf("main_menu on console command is executed")
	c:execute("main_menu on")
end

-- added by Ab@dDon $DreamMod --
function actor_stop_sleeping()
	sleep_manager.stopper()
end

------------------------------------------------------- ARENA_EXTENSION_MOD--------------------------------------------------------

function aem_draw()
	TB3D_Services.set_community(npc, "trader", 0, 0)
	--db.actor:set_character_community("trader",0,0)
	--aem_lights.draw()
end

function aem_win()
	--aem_lights.win()
end

function aem_foul()
	--aem_lights.foul()
end

function aem_death(actor, npc, p)
	aem_manager.get_aem():on_death(npc, p[1])
end

function aem_finish()
	if TB3D_Modders.use_arena_message == true then TB3D_Services.packet_alert("xr_effects: aem_finish") end
	aem_manager.get_aem():finish()
end

function switch(actor, npc)
	if has_alife_info("aem_go_bar") then
		npc:add_restrictions("bar_restrictor", "")
	else
		npc:remove_all_restrictions()
	end
end

------------------------------------------------------- ARENA_EXTENSION_MOD-----------------------------------------

---------------------------------
-- Teleports
---------------------------------
-- delete teleporters
function delete_teleport2(story_id)
	local obj_id = amk.load_variable("m_teleport_6", nil)
	local se_obj = alife():object(obj_id)
	if obj_id then
		if se_obj then
			alife():release(se_obj, true)
		end
		amk.del_variable("m_teleport_6")
		news_manager.amk_send_tip_id("sms_look_elsewhere","sms_incomming",10,30,"common_channel")
	end
end 

function delete_teleport3(story_id)
	local obj_id = amk.load_variable("m_teleport_26", nil)
	if obj_id then
		local se_obj = alife():object(obj_id)
		if se_obj then
		  alife():release(se_obj, true)
		end
		amk.del_variable("m_teleport_26")
		news_manager.amk_send_tip_id("sms_look_elsewhere","sms_incomming",10,30,"common_channel")
	end
end 

-- spawn teleporters
function spawn_teleport26()
    local se_obj = alife():create("m_teleport_26",vector():set(-111.23854064941,-14.067569732666,-31.287431716919),478,780)
	amk.save_variable("m_teleport_26", se_obj.id)	
end

function spawn_teleport27()
    local se_obj = alife():create("m_teleport_27",vector():set(-38.559955596924,-4.4967656135559,-14.259101867676),4764,715)
	amk.save_variable("m_teleport_27", se_obj.id)	
end

function spawn_teleport6()
    local se_obj = alife():create("m_teleport_6",vector():set(-76.897171020508,2.4566078186035,-110.1841506958),3005,797)
	amk.save_variable("m_teleport_6", se_obj.id)
end

-- sound in the cache and taken Arrow
function play_zvuk() 
  	local snd_obj = xr_sound.get_safe_sound_object([[intro\intro_kill_l]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

-- infoporshin after teleport from the entrance
function info1() 
	news_manager.amk_send_tip_id("sms_msg_uploaded","sms_incomming",10,20,"common_channel")
	TB3D_Services.give_info("have_info1")
end

-- sound when you spawn Sacker
function play_zvuk2() 
  	local snd_obj = xr_sound.get_safe_sound_object([[monsters\bloodsucker\bloodsucker_script_attack_0]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function spawn_krovosos()
	alife():create("bloodsucker_normal",vector():set(-113.27488708496,-16.462959289551,-53.749374389648),351,757)
end

function spawn_krovosos2()
	alife():create("bloodsucker_normal",vector():set(-105.32235717773,-16.462980270386,-18.557649612427),1111,710) 
end

--------------
--restrictor 
--------------
-- agricultural industry in the dungeon
function create_sr3() 
	--TB3D_Services.packet_alert("xr effects: create_sr3 called")
	local se_obj = alife():create("kostya_restrictor_agru",vector():set(-95.296127319336,-16.464744567871,-4.9873023033142),1998,761)
	local custom = "[logic]\n"..
	"active = sr_idle\n"..
	"[sr_idle]\n"..
	"on_actor_inside = {+have_info1} nil %=play_zvuk2 =spawn_krovosos2%"
	spawn_restrictor.rewrite_restrictor(se_obj, custom, 1.0)
end 

function create_sr4() 
	--TB3D_Services.packet_alert("xr effects: create_sr4 called")
	local se_obj = alife():create("kostya_restrictor_agru",vector():set(-103.36071777344,-16.213626861572,-44.560150146484),1241,755)
	local custom = "[logic]\n"..
	"active = sr_idle\n"..
	"[sr_idle]\n"..
	"on_actor_inside = {+have_info1} nil %=play_zvuk2 =spawn_krovosos%"
	spawn_restrictor.rewrite_restrictor(se_obj, custom, 1.0)
end 

function create_sr5() 
	--TB3D_Services.packet_alert("xr effects: create_sr5 called")
	local se_obj = alife():create("kostya_restrictor_agru",vector():set(-72.414398193359,2.4857983589172,-116.41065979004),3256,797)
	local custom = "[logic]\n"..
	"active = sr_idle\n"..
	"[sr_idle]\n"..
	"on_actor_inside = {+have_info1} nil %=delete_teleport2 =spawn_teleport26 =create_sr3 =create_sr4 =create_sr6%"
	spawn_restrictor.rewrite_restrictor(se_obj, custom, 2.0)
end 

function create_sr6() 
	--TB3D_Services.packet_alert("xr effects: create_sr6 called")
	local se_obj = alife():create("kostya_restrictor_agru",vector():set(-113.44139862061,-14.169027328491,-29.277599334717),369,780)
	local custom = "[logic]\n"..
	"active = sr_idle\n"..
	"[sr_idle]\n"..
	"on_actor_inside = {+have_info1} nil %=delete_teleport3 =spawn_teleport27%"
	spawn_restrictor.rewrite_restrictor(se_obj, custom, 10.0)
end 

-- in x18
function create_sr8() 
	--TB3D_Services.packet_alert("xr effects: create_sr8 called")
	local se_obj = alife():create("kostya_restrictor_x18",vector():set(-0.8382523059845,-10.815600395203,-9.8239765167236),2672,1134)
	local custom = "[logic]\n"..
	"active = sr_idle\n"..
	"[sr_idle]\n"..
	"on_actor_inside = {+info_restriction} nil %=play_zvuk4%"
	spawn_restrictor.rewrite_restrictor(se_obj, custom, 8.5)
end 

function create_sr9() 
	--TB3D_Services.packet_alert("xr effects: create_sr9 called")
	local se_obj = alife():create("kostya_restrictor_x18",vector():set(-0.64052796363831,-10.764112472534,-10.320294380188),2670,1133)
	local custom = "[logic]\n"..
	"active = sr_idle\n"..
	"[sr_idle]\n"..
	"on_actor_inside = {+info_restriction} nil %=play_zvuk5%"
	spawn_restrictor.rewrite_restrictor(se_obj, custom, 7.5)
end 

function play_zvuk3() 
  	local snd_obj = xr_sound.get_safe_sound_object([[ambient\random\rnd_moan1]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function play_zvuk4() 
  	local snd_obj = xr_sound.get_safe_sound_object([[ambient\random\rnd_fallscream]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function play_zvuk5() 
  	local snd_obj = xr_sound.get_safe_sound_object([[monsters\bloodsucker\bloodsucker_script_attack_0]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function spawn_krovosos3()
	alife():create("bloodsucker_strong",vector():set(-2.0031547546387,-10.815952301025,26.333080291748),2460,1145) 
end

function spawn_krovosos4()
	alife():create("bloodsucker_strong",vector():set(-2.2437686920166,-10.817986488342,10.569171905518),2438,1143) 
end

function spawn_krovosos5()
	alife():create("bloodsucker_strong",vector():set(-2.6273674964905,-10.818544387817,-1.5016434192657),2329,1143)
end

function spawn_krovosos6()
	alife():create("bloodsucker_strong",vector():set(-6.3397164344788,-10.814113616943,-5.9057211875916),1956,1150)
end

-- Amber
function spawn_teleport31()
   alife():create("m_teleport_31",vector():set(-28.138628005981,0.70888710021973,-51.528060913086),23720,1527)
end

function spawn_teleport32()
    alife():create("m_teleport_32",vector():set(-27.691612243652,0.30473950505257,22.615579605103),23064,1527)
end

function spawn_teleport33()
    alife():create("m_teleport_33",vector():set(-27.159645080566,-0.040736228227615,-140.54766845703),23720,1527)
end

function spawn_teleport34()
    alife():create("m_teleport_34",vector():set(-13.03503036499,0.089942842721939,-80.229797363281),77962,1513)
end

function spawn_controller()
	alife():create("m_controller_normal",vector():set(-10.052182197571,0.22448572516441,27.419820785522),77986,1512)
end

function create_sr13() 
	TB3D_Services.packet_alert("xr effects: create_sr13 called")
	local se_obj = alife():create("kostya_restrictor_amb",vector():set(41.420497894287,0.23940727114677,-101.4430847168),77962,1513)
	local custom = "[logic]\n"..
	"active = sr_idle\n"..
	"[sr_idle]\n"..
	"on_actor_inside = {+info_restriction} nil %=spawn_chimera2 =spawn_chimera%"
	spawn_restrictor.rewrite_restrictor(se_obj, custom, 10)
end 

function spawn_chimera()
	alife():create("chimera_strong",vector():set(88.911819458008,-0.04115504026413,-73.805587768555),77962,1513)
end

function spawn_chimera2()
	alife():create("chimera_strong",vector():set(-19.945352554321,-0.17231740057468,-140.34425354004),77962,1513)
end

-- X-10
function play_zvuk6() 
  	local snd_obj = xr_sound.get_safe_sound_object([[ambient\random\rnd_ratchant]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function new_inventory11()
	alife():create("m_inventory_box11",vector():set(-30.228071212769,-21.02052116394,58.902126312256),2490,2748)
end

function spawn_teleport35()
    local se_obj = alife():create("m_teleport_35",vector():set(-40.398349761963,-21.837560653687,56.543983459473),1324,2737)
	amk.save_variable("m_teleport_35", se_obj.id)		  
end

function delete_teleport35(story_id)
	--TB3D_Services.packet_alert("xr effects: delete_teleport35")
	local obj_id = amk.load_variable("m_teleport_35", nil)
	if obj_id then
		local se_obj = alife() : object(obj_id)
		if se_obj then
		  alife():release(se_obj, true)
		end
		amk.del_variable("m_teleport_35")
	end
end 

function spawn_teleport36()
    local se_obj = alife():create("m_teleport_36",vector():set(-30.385196685791,-21.020092010498,55.938106536865),1962,2738)
	amk.save_variable("m_teleport_36", se_obj.id)		  
end

function delete_teleport36(story_id)
	--TB3D_Services.packet_alert("xr effects: delete_teleport36")
	local obj_id = amk.load_variable("m_teleport_36", nil)
	if obj_id then
		local se_obj = alife() : object(obj_id)
		if se_obj then
		  alife():release(se_obj, true)
		end
		amk.del_variable("m_teleport_36")
	end
end 

function create_sr15() 
	--TB3D_Services.packet_alert("xr effects: create_sr15 called")
	local se_obj = alife():create("kostya_restrictor_x10",vector():set(-19.994720458984,-9.5514478683472,-35.59744644165),3400,2665)
	local custom = "[logic]\n"..
	"active = sr_idle\n"..
	"[sr_idle]\n"..
	"on_actor_inside = {+info_restriction} nil %=delete_teleport36 =play_zvuk6 =spawn_teleport37 =spawn_teleport38 =spawn_teleport39 =spawn_teleport41 =spawn_teleport42 =create_sr16 =create_sr17%"
	spawn_restrictor.rewrite_restrictor(se_obj, custom, 2)
end 

function spawn_teleport37()
    local se_obj = alife():create("m_teleport_37",vector():set(-19.987188339233,-9.5004644393921,-27.889524459839),3411,2665)
	amk.save_variable("m_teleport_37", se_obj.id)		  
end

function delete_teleport37(story_id)
	--TB3D_Services.packet_alert("xr effects: delete_teleport37")
	local obj_id = amk.load_variable("m_teleport_37", nil)
	if obj_id then
		local se_obj = alife():object(obj_id)
		if se_obj then
		  alife():release(se_obj, true)
		end
		amk.del_variable("m_teleport_37")
	end
end 

function spawn_teleport38()
    local se_obj = alife():create("m_teleport_38",vector():set(-20.023223876953,-9.5004854202271,-43.679775238037),3389,2665)
	amk.save_variable("m_teleport_38", se_obj.id)		  
end

function delete_teleport38(story_id)
	--TB3D_Services.packet_alert("xr effects: delete_teleport38")
	local obj_id = amk.load_variable("m_teleport_38", nil)
	if obj_id then
		local se_obj = alife():object(obj_id)
		if se_obj then
		  alife():release(se_obj, true)
		end
		amk.del_variable("m_teleport_38")
	end
end 

function spawn_teleport39()
    local se_obj = alife():create("m_teleport_39",vector():set(-20.102291107178,-9.391640663147,-6.6342015266418),3445,2666)
	amk.save_variable("m_teleport_39", se_obj.id)		  
end

function delete_teleport39(story_id)
	--TB3D_Services.packet_alert("xr effects: delete_teleport39")
	local obj_id = amk.load_variable("m_teleport_39", nil)
	if obj_id then
		local se_obj = alife():object(obj_id)
		if se_obj then
		  alife():release(se_obj, true)
		end
		amk.del_variable("m_teleport_39")
	end
end 

function spawn_teleport40()
    local se_obj = alife():create("m_teleport_40",vector():set(-6.7612886428833,-7.3805675506592,-56.52018737793),4518,2663)
	amk.save_variable("m_teleport_40", se_obj.id)		  
end

function delete_teleport40(story_id)
	--TB3D_Services.packet_alert("xr effects: delete_teleport40")
	local obj_id = amk.load_variable("m_teleport_40", nil)
	if obj_id then
		local se_obj = alife():object(obj_id)
		if se_obj then
		  alife():release(se_obj, true)
		end
		amk.del_variable("m_teleport_40")
	end
end 

function create_sr16() 
	--TB3D_Services.packet_alert("xr effects: create_sr16 called")
	local se_obj = alife():create("kostya_restrictor_x10",vector():set(-1.298624753952,-7.4522504806519,-73.977745056152),5456,2661)
	local custom = "[logic]\n"..
	"active = sr_idle\n"..
	"[sr_idle]\n"..
	"on_actor_inside = {+info_restriction} nil %=spawn_teleport40%"
	spawn_restrictor.rewrite_restrictor(se_obj, custom, 2)
end 

function spawn_teleport41()
    local se_obj = alife():create("m_teleport_41",vector():set(-30.603868484497,-8.9784269332886,19.563804626465),2243,2780)
	amk.save_variable("m_teleport_41", se_obj.id)		  
end

function delete_teleport41(story_id)
	--TB3D_Services.packet_alert("xr effects: delete_teleport41")
	local obj_id = amk.load_variable("m_teleport_41", nil)
	if obj_id then
		local se_obj = alife():object(obj_id)
		if se_obj then
		  alife():release(se_obj, true)
		end
		amk.del_variable("m_teleport_41")
	end
end 

function spawn_teleport42()
    local se_obj = alife():create("m_teleport_42",vector():set(-32.942707061768,-9.4474973678589,1.0606206655502),2026,2669)
	amk.save_variable("m_teleport_42", se_obj.id)		  
end

function delete_teleport42(story_id)
	--TB3D_Services.packet_alert("xr effects: delete_teleport42")
	local obj_id = amk.load_variable("m_teleport_42", nil)
	if obj_id then
		local se_obj = alife():object(obj_id)
		if se_obj then
		  alife():release(se_obj, true)
		end
		amk.del_variable("m_teleport_42")
	end
end 

function create_sr17() 
	--TB3D_Services.packet_alert("xr effects: create_sr17 called")
	local se_obj = alife():create("kostya_restrictor_x10",vector():set(-32.942707061768,-9.4474973678589,1.0606206655502),2026,2669)
	local custom = "[logic]\n"..
	"active = sr_idle\n"..
	"[sr_idle]\n"..
	"on_actor_inside = {+info_restriction} nil %=create_sr18 =spawn_teleport54 =spawn_teleport53 =spawn_teleport52 =spawn_teleport51 =spawn_teleport50 =spawn_teleport49 =spawn_teleport48 =spawn_teleport43 =spawn_teleport44 =spawn_teleport45 =spawn_teleport46 =spawn_teleport47%"
	spawn_restrictor.rewrite_restrictor(se_obj, custom, 2)
end 

function spawn_teleport43()
    local se_obj = alife():create("m_teleport_43",vector():set(-48.170837402344,-23.529655456543,0.87714487314224),1004,2787)
	amk.save_variable("m_teleport_43", se_obj.id)		  
end

function delete_teleport43(story_id)
	--TB3D_Services.packet_alert("xr effects: delete_teleport43")
	local obj_id = amk.load_variable("m_teleport_43", nil)
	if obj_id then
		local se_obj = alife():object(obj_id)
		if se_obj then
		  alife():release(se_obj, true)
		end
		amk.del_variable("m_teleport_43")
	end
end 

function spawn_teleport44()
    local se_obj = alife():create("m_teleport_44",vector():set(-52.187408447266,-23.582466125488,-7.2188229560852),772,2712)
	amk.save_variable("m_teleport_44", se_obj.id)		  
end

function delete_teleport44(story_id)
	--TB3D_Services.packet_alert("xr effects: delete_teleport44")
	local obj_id = amk.load_variable("m_teleport_44", nil)
	if obj_id then
		local se_obj = alife():object(obj_id)
		if se_obj then
		  alife():release(se_obj, true)
		end
		amk.del_variable("m_teleport_44")
	end
end 

function spawn_teleport45()
    local se_obj = alife():create("m_teleport_45",vector():set(-45.096000671387,-23.522695541382,-12.440341949463),1109,2789)
	amk.save_variable("m_teleport_45", se_obj.id)		  
end

function delete_teleport45(story_id)
	--TB3D_Services.packet_alert("xr effects: delete_teleport45")
	local obj_id = amk.load_variable("m_teleport_45", nil)
	if obj_id then
		local se_obj = alife():object(obj_id)
		if se_obj then
		  alife():release(se_obj, true)
		end
		amk.del_variable("m_teleport_45")
	end
end 

function spawn_teleport46()
    local se_obj = alife():create("m_teleport_46",vector():set(-18.216438293457,-21.836561203003,41.694786071777),3815,2785)
	amk.save_variable("m_teleport_46", se_obj.id)		  
end

function delete_teleport46(story_id)
	--TB3D_Services.packet_alert("xr effects: delete_teleport46")
	local obj_id = amk.load_variable("m_teleport_46", nil)
	if obj_id then
		local se_obj = alife():object(obj_id)
		if se_obj then
		  alife():release(se_obj, true)
		end
		amk.del_variable("m_teleport_46")
	end
end 

function spawn_teleport47()
    local se_obj = alife():create("m_teleport_47",vector():set(-57.305168151855,-21.859325408936,40.726039886475),454,2728)
	amk.save_variable("m_teleport_47", se_obj.id)		  
end

function delete_teleport47(story_id)
	--TB3D_Services.packet_alert("xr effects: delete_teleport47")
	local obj_id = amk.load_variable("m_teleport_47", nil)
	if obj_id then
		local se_obj = alife():object(obj_id)
		if se_obj then
		  alife():release(se_obj, true)
		end
		amk.del_variable("m_teleport_47")
	end
end 

function spawn_teleport48()
    local se_obj = alife():create("m_teleport_48",vector():set(-49.594337463379,-23.536252975464,56.616313934326),929,2735)
	amk.save_variable("m_teleport_48", se_obj.id)		  
end

function delete_teleport48(story_id)
	--TB3D_Services.packet_alert("xr effects: delete_teleport48")
	local obj_id = amk.load_variable("m_teleport_48", nil)
	if obj_id then
		local se_obj = alife():object(obj_id)
		if se_obj then
		  alife():release(se_obj, true)
		end
		amk.del_variable("m_teleport_48")
	end
end 

function spawn_teleport49()
    local se_obj = alife():create("m_teleport_49",vector():set(-17.414360046387,-21.840921401978,55.660831451416),3850,2751)
	amk.save_variable("m_teleport_49", se_obj.id)		  
end

function delete_teleport49(story_id)
	--TB3D_Services.packet_alert("xr effects: delete_teleport49")
	local obj_id = amk.load_variable("m_teleport_49", nil)
	if obj_id then
		local se_obj = alife():object(obj_id)
		if se_obj then
		  alife():release(se_obj, true)
		end
		amk.del_variable("m_teleport_49")
	end
end 

function spawn_teleport50()
    local se_obj = alife():create("m_teleport_50",vector():set(-64.259719848633,-21.895231246948,30.609943389893),113,2725)
	amk.save_variable("m_teleport_50", se_obj.id)		  
end

function delete_teleport50(story_id)
	--TB3D_Services.packet_alert("xr effects: delete_teleport50")
	local obj_id = amk.load_variable("m_teleport_50", nil)
	if obj_id then
		local se_obj = alife():object(obj_id)
		if se_obj then
		  alife():release(se_obj, true)
		end
		amk.del_variable("m_teleport_50")
	end
end 

function spawn_teleport51()
    local se_obj = alife():create("m_teleport_51",vector():set(-52.363986968994,-23.589921951294,-13.084785461426),765,2788)
	amk.save_variable("m_teleport_51", se_obj.id)		  
end

function delete_teleport51(story_id)
	--TB3D_Services.packet_alert("xr effects: delete_teleport51")
	local obj_id = amk.load_variable("m_teleport_51", nil)
	if obj_id then
		local se_obj = alife():object(obj_id)
		if se_obj then
		  alife():release(se_obj, true)
		end
		amk.del_variable("m_teleport_51")
	end
end 

function spawn_teleport52()
    local se_obj = alife():create("m_teleport_52",vector():set(-52.968780517578,-23.594024658203,-2.0381298065186),749,2715)
	amk.save_variable("m_teleport_52", se_obj.id)		  
end

function delete_teleport52(story_id)
	--TB3D_Services.packet_alert("xr effects: delete_teleport52")
	local obj_id = amk.load_variable("m_teleport_52", nil)
	if obj_id then
		local se_obj = alife():object(obj_id)
		if se_obj then
		  alife():release(se_obj, true)
		end
		amk.del_variable("m_teleport_52")
	end
end 

function spawn_teleport53()
    local se_obj = alife():create("m_teleport_53",vector():set(3.5164728164673,-21.845838546753,41.598541259766),6991,2755)
	amk.save_variable("m_teleport_53", se_obj.id)		  
end

function delete_teleport53(story_id)
	--TB3D_Services.packet_alert("xr effects: delete_teleport53")
	local obj_id = amk.load_variable("m_teleport_53", nil)
	if obj_id then
		local se_obj = alife():object(obj_id)
		if se_obj then
		  alife():release(se_obj, true)
		end
		amk.del_variable("m_teleport_53")
	end
end 

function spawn_teleport54()
    local se_obj = alife():create("m_teleport_54",vector():set(-6.4082336425781,-21.823808670044,55.724376678467),4658,2752)
	amk.save_variable("m_teleport_54", se_obj.id)		  
end

function delete_teleport54(story_id)
	--TB3D_Services.packet_alert("xr effects: delete_teleport54")
	local obj_id = amk.load_variable("m_teleport_54", nil)
	if obj_id then
		local se_obj = alife():object(obj_id)
		if se_obj then
		  alife():release(se_obj, true)
		end
		amk.del_variable("m_teleport_54")
	end
end 

function create_sr18() 
	--TB3D_Services.packet_alert("xr effects: create_sr18 called")
	local se_obj = alife():create("kostya_restrictor_x10",vector():set(-30.385196685791,-21.020092010498,55.938106536865),1962,2738)
	local custom = "[logic]\n"..
	"active = sr_idle\n"..
	"[sr_idle]\n"..
	"on_actor_inside = {+info_restriction} nil %=play_zvuk6 =delete_teleport54 =delete_teleport53 =delete_teleport52 =delete_teleport51 =delete_teleport50 =delete_teleport49 =delete_teleport48 =delete_teleport47 =delete_teleport46 =delete_teleport45 =delete_teleport44 =delete_teleport43 =delete_teleport42 =delete_teleport41 =delete_teleport40 =delete_teleport39 =delete_teleport38 =delete_teleport37 =delete_teleport35%"
	spawn_restrictor.rewrite_restrictor(se_obj, custom, 2)
end 

function return_items_from_box(actor, npc)
	dmx_treasure.return_items()
end

function esc_wolf_thanks()									--in the all.spawn, called when you have esc_lager_friendship
	--TB3D_Services.packet_alert("xr effects: esc wolf thanks called")
end

function clear_x10_teleports()
	delete_teleport54()
	delete_teleport53()
	delete_teleport52()
	delete_teleport51()
	delete_teleport50()
	delete_teleport49()
	delete_teleport48()
	delete_teleport47()
	delete_teleport46()
	delete_teleport45()
	delete_teleport44()
	delete_teleport43()
	delete_teleport42()
	delete_teleport41()
	delete_teleport40()
	delete_teleport39()
	delete_teleport38()
	delete_teleport37()
	delete_teleport36()
	delete_teleport35()
	local sim = alife()
	local sect
	for a=first_object,last_object,1 do		--skip actor (0)
		obj = sim:object(a)
		if obj then
			sect = get_section(obj)
			if sect == "kostya_restrictor_x10"		--110000
			  or sect == "kostya_restrictor_x10" then
				sim:release(obj, true)
			end
		end
	end
end
