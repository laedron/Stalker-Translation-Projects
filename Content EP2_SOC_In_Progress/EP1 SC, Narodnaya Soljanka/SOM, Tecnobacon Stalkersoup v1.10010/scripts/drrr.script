-- TB3D 1.0.9.9.7.6 added my_ver, obj_is_protected
function my_ver() return "1.0.9.9.7.6" end	--modders append with initials and rev.
--;;;;;;; NS_DMX_DKZ 1.3.2 mod -- TecnoBacon modified, weight, god mode, jump, cursor, blood, no death count
--;;;;;;; FOR MOD TESTING ONLY, NOT FOR MULTIPLAYER
--;;;;;;; MUST USE ALL 4 MODIFIED FILES TOGETHER: system.ltx, actor.ltx, inventory_sect.ltx, difficulty_manager.script

local weight_normal = 1000      	--chgd  to match carry weight cheat
local weight_max = 3500
local items_dropped_max = 100

local kolco = {from = 10, to = 11}
local visota = {from = 2, to = 10}

local sim
local actor
local weight_rukzak
local weight_item
local ini
local items = {}
local items_dropped = {}
local item_active_id -- the subject in hand is ignored, but its weight is taken into account
local current_outfit_id -- wearing body armor is ignored, but its weight is taken into account

function vibros()
	sim = alife()
	actor = db.actor
	if sim and actor then
		calc_inventory_weight(actor)
		--get_console():execute("load ~~~ weight of all that and HS: "..weight_rukzak)
		if weight_rukzak > weight_max then
			-- throw objects randomly
			local items_count = #items
			local iterations = 0
			local items_dropped_count = 0
			local koef = weight_rukzak / weight_max -- probability of departure subject
			local i
			while weight_rukzak > weight_normal
				and iterations < items_count
				and items_dropped_count < items_dropped_max do
				if math.random() < koef then
					i = math.random(items_count) -- random item
					if not items_dropped[i] then -- if he had not been thrown out
						items_dropped[i] = true
						items_dropped_count = items_dropped_count + 1
						vector_add = calc_vector_add()
						actor:drop_item_and_teleport(items[i][1], actor:position():add(vector_add))
						weight_rukzak = weight_rukzak - items[i][2]
						koef = weight_rukzak / weight_max -- probability of departure subject
					end
				end
				iterations = iterations + 1
			end
		end
	end
end

function calc_inventory_weight(npc)
	items = {}
	items_dropped = {}
	weight_rukzak = 0
	ini = system_ini()
	
	if npc and npc.inventory_for_each then
		local item_active = npc:active_item()
		if item_active then
			item_active_id = item_active:id()
		else
			item_active_id = 0
		end
		local current_outfit = npc:get_current_outfit()
		if current_outfit then
			current_outfit_id = current_outfit:id()
		else
			current_outfit_id = 0
		end
		npc:inventory_for_each(process_calc) -- will not view hidden slots
	end
end

function process_calc(item, npc)
	if item then 
	local section = item:section()
		if section ~= "arc_ballast" -- incomprehensible crap weighing 500 kg!
			and ini:section_exist(section)
			and ini:line_exist(section, "inv_weight") then
		weight_item = ini:r_float(section, "inv_weight")
			--get_console():execute("load ~~~ backpack: "..section.." weight: "..weight_item)
		if weight_item > 0 then
			local item_id = item:id()
			-- ignore the subject in hand, wearing body armor, or "protected" object
			if not (ini:line_exist(section, "quest_item") and ini:r_bool(section, "quest_item"))
				and item_active_id ~= item_id
				and current_outfit_id ~= item_id
				and protected_items.obj_is_protected(item) == false then 
				table.insert(items, {item, weight_item})
				table.insert(items_dropped, false)
			end
			-- but take into account the weight of his
			weight_rukzak = weight_rukzak + weight_item
			end
		end
	end
end

function calc_vector_add()
	local a = math.random() * 2 * math.pi
	local r = kolco.from + math.random() * math.abs(kolco.to - kolco.from)
	local x = math.cos(a) * r
	local z = math.sin(a) * r
	local y = visota.from + math.random() * math.abs(visota.to - visota.from)
	return vector():set(x, y, z)
end

-- To test!
-- Cause of updater
local timer = 0

function update(delta)
   timer = timer+delta
   if timer>1000000 then timer = 1000000 end
   local hud = get_hud()
   if hud:GetCustomStatic("main_task") and timer>1000 then
      vibros()
      timer = 0
   end
end
