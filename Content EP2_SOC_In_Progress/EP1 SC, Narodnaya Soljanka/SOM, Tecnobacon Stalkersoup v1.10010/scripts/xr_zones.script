--TB3D 1.1.0.0.1.0 destroy message, cleanup, obinder
function my_ver() return "1.1.0.0.1.0" end
--'------------------------------------------------------------------------------------------------------------------
--' Binder скриптовых зон
--' Используется только в одном месте в игре, на арене для того чтобы удалять "отработанные" предметы.
--'------------------------------------------------------------------------------------------------------------------
local force_obinder = TB3D_Modders.use_xr_obinder				--110010, calls into game binder (alife)
if force_binder == nil then force_binder = true end

function bind(obj)
	local ini = obj:spawn_ini()
	if not ini then
		return
	end
	if ini:section_exist("arena_zone") then
		if alife() then
			obj:bind_object(arena_zone_binder(obj))
		end
	end
end

--'--------------------------------------------------------------------------------------------------------------------
--' класс arena_zone_binder. Он контролирует скриптовую зону для smart terrain
--'--------------------------------------------------------------------------------------------------------------------
local arena_zones = {}
class "arena_zone_binder" (object_binder)
function arena_zone_binder:__init(obj) super(obj)
	self.saved_obj = {}
	arena_zones[obj:name()] = self
end

function arena_zone_binder:net_spawn(server_object)
	if force_obinder and not object_binder.net_spawn(self, server_object) then return false end					--110010
	self.object:set_callback(callback.zone_enter, self.on_enter, self)
	self.object:set_callback(callback.zone_exit, self.on_exit, self)
	return true
end

function arena_zone_binder:net_destroy()
	--TB3D_Services.packet_alert("xr zones: net destroy")
	if TB3D_Modders.use_destroy_message then TB3D_Services.packet_alert("xr zones: net destroy["..utils.to_str(self.object:name()).."] section["..self.object:section().."]") end
	self.object:set_callback(callback.zone_enter, nil)
	self.object:set_callback(callback.zone_exit, nil)
	if force_obinder then object_binder.net_destroy(self) end			--110010
	if TB3D_Modders.use_destroy_message then TB3D_Services.packet_alert("xr zones: net destroy["..utils.to_str(self.object:name()).."] done") end
	--TB3D_Services.packet_alert("xr zones: net destroy done")
end

function arena_zone_binder:purge_items()
	local alife = alife()
	local obj
	for k,v in pairs(self.saved_obj) do
		obj = alife:object(k)
		if obj ~= nil then
            --printf("release object %s, id %s", obj:name(), k)
		    alife:release(obj, true)
        end
	end	
end

--' Сохранение списка зарегистренных объектов
function arena_zone_binder:save(packet)
	if force_obinder then object_binder.save(self, packet) end			--110010
	local num = table.getn(self.saved_obj)
	packet:w_u8(num)
	for k,v in pairs(self.saved_obj) do
		packet:w_u16(k)
	end
end

--' Загрузка списка зарегистренных объектов
function arena_zone_binder:load(packet)
	if force_obinder then object_binder.load(self, packet) end			--110010
	local num = packet:r_u8()	
	for i=1,num do
		self.saved_obj[packet:r_u16()] = true
	end	
end

--' callback на вход в зону. Нужно регистрить все объекты, кроме игрока.
--' Так как есть глюк, то этот коллбек вызывается и на вход и на выход из скриптовой зоны
function arena_zone_binder:on_enter(zone, obj)
	if obj:clsid() == clsid.actor then
		return
	end
	--printf("[zone %s] on_enter obj=%s, clsid=%s", zone:name(), obj:name(), obj:clsid())
	self.saved_obj[obj:id()] = true
end

function arena_zone_binder:on_exit(zone, obj)
	if obj:clsid() == clsid.actor then
		return
	end
	--printf("[zone %s] on_enter obj=%s, clsid=%s", zone:name(), obj:name(), obj:clsid())
	self.saved_obj[obj:id()] = nil
end


function purge_arena_items(name)
	local arena_zone = arena_zones[name]
	if arena_zone then
		arena_zone:purge_items()
	end
end