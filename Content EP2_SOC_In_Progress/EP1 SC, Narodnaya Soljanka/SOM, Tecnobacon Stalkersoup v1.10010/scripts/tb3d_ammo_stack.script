-- TB3D 1.1.0.0.0.7 added to SS, bad debug messages in update, on_item_take

-- GlowWorm 1.0.9.9.7.6 created; Inspired by on dunin_ammo.script

-- Limitations:
--   Ideally this script would handle cases where box_size for an item was REDUCED
--   from one version to the next, and you loaded an old save - any oversize items would
--   be restacked at the smaller size.  Currently the code ignores any items which are
--   over box_size, so they are left at their too-large size.  (Any newly created ammo
--   boxes do have the correct new size.)
--   Several places in various scripts directly read box_size.  This box_size caching code
--   should be centralized so all of the scripts can make use of it.

function my_ver() return "1.1.0.0.0.7" end

-- Hard-coded list of items which should NOT stack.  Normally, we see an item, and check ammo_box_sizes
-- to see if we have seen it before - if so, we have the box_size or a value that signals no stacking.
-- Otherwise, we probe the box_size value of the item - if it has a box_size, it is ammo.
-- This list is available to prevent probing of box_size for any items that we discover can't be probed.
-- As we find items which should not be probed, we put them here, like this...
--    local no_probe_for_box_size = {["item_not_to_probe"] = true}
--	local no_probe_for_box_size = {}	--moved to db


-- We cache box_size values for all items that we see.  We do this because we run during on_item_take,
-- so we want to be as fast as possible.  And we only cache values for types that the player has in
-- inventory, which is not a huge number of types.
--local ammo_box_sizes = {}		--moved to db

-- In on_item_take, we inspect items being added to inventory.  If they are ammo, and are not fully
-- stacked, we add their type to this list.  Then during on_update, we check this list, and for any
-- types in this list we perform stacking.  on_update leaves this list empty when complete.
local ammo_types_needing_stack = {}

-- Clear tables, allowing maximum garbage collection.
function clear_cache()
  ammo_types_needing_stack = {}
end

-- Returns 0 for any non-ammo items, or the ammo box_size for ammo items.
-- Uses and maintains the ammo_box_sizes cache of box sizes, for better performance.
-- First it checks the cache.  If it's a cache miss, it checks whether probing is
-- disabled for the type.  If probing is allowed, the type is probed.  In the case of
-- any cache miss, the value 0 is stored in the cache so the next time we'll have a cache hit.
function get_box_size(section)
	if section == nil then                                              -- (error) no section name
		return 0
	end
	local box_size = db.get_ammo_box(section)                      -- check the cache for already probed types
	if box_size ~= nil then
		return box_size
	end
	box_size = 0                                                        -- if probing determines it is not ammo, we'll cache 0
	local can_probe = db.check_can_probe(section)						-- is this type disabled for probing?
	if can_probe then                        							-- don't probe items which are not safe to probe
		local ini = system_ini()
		if ini:section_exist(section) and ini:line_exist(section, "box_size") then
			box_size = ini:r_u32(section, "box_size")
			db.add_ammo_box(section, box_size)
		else
			db.add_dont_probe(section)
		end
	end
	if TB3D_Modders.use_scheme_message == true then TB3D_Services.packet_alert("ammo_stack get_box_size: ["..utils.to_str(section).."] cached box_size = "..utils.to_str(box_size)) end
	return box_size
end

local max_this_item = {															--110007, items with a carry limit that don't stack
	["ammo_vog-25"] = TB3D_Modders.max_vog25 or 10,
	["ammo_og-7b"] = TB3D_Modders.max_og7b or 10,
	["grenade_gd-05"] = TB3D_Modders.max_gd05 or 10,
	["grenade_rgd5"] = TB3D_Modders.max_rgd5 or 10,
	["grenade_rgd5_new"] = TB3D_Modders.max_rgd5n or 10,
	["grenade_rgd6"] = TB3D_Modders.max_rgd6 or 10,
	["grenade_rgd7"] = TB3D_Modders.max_rgd7 or 10,
	["grenade_rgd8"] = TB3D_Modders.max_rgd8 or 10,
	["grenade_rgd9"] = TB3D_Modders.max_rgd9 or 10,
	["grenade_rgd10"] = TB3D_Modders.max_rgd10 or 10,
	["grenade_rgd11"] = TB3D_Modders.max_rgd11 or 10,
	["grenade_rgd12"] = TB3D_Modders.max_rgd11 or 10,
	["grenade_f1"] = TB3D_Modders.max_f1 or 10,
	["grenade_m67"] = TB3D_Modders.max_m67 or 10,
	["good_psy_helmet"] = TB3D_Modders.max_psy_helmet or 1,
	["bad_psy_helmet"] = TB3D_Modders.max_bad_psy_helmet or 1,
	["matras"] = TB3D_Modders.max_matras or 1,
	["wpn_binoc"] = TB3D_Modders.max_binocs or 2,
	["arc_art_box_8basic"] = TB3D_Modders.max_box8 or 1,
	["arc_art_box_1basic"] = TB3D_Modders.max_box1 or 2,
	["arc_art_box_basic"] = TB3D_Modders.max_box_basic or 4,
	["explosive_barrel"] = TB3D_Modders.max_barrel or 1
}
function on_item_take(obj)
	if obj then
		local box_size = 0
		local bullet_count = 0                                              	-- the number of bullets in the current item
		local section = get_section(obj)
		if section then
			if max_this_item[section] then                              		-- iterate inventory looking for items of the target type
				local idx
				local inv_obj
				local inv_section = nil
				for idx = 0, db.actor:object_count()-1 do
					inv_obj = db.actor:object(idx)
					if inv_obj then
						inv_section = inv_obj:section()
						if inv_section and inv_section == section then bullet_count = bullet_count + 1 end
					end
				end
				if bullet_count > max_this_item[section] then return true end				--110007, drop if already full
			elseif TB3D_Modders.use_ammo_stack then
				local local_ammo_types_needing_stack = ammo_types_needing_stack
				if local_ammo_types_needing_stack then										-- either (error) or in stacking
					local already_need_stack = local_ammo_types_needing_stack[section]
					if not already_need_stack then    										-- the type is already marked for stacking, no need to read another bullet_count
						box_size = get_box_size(section)                              		-- get_box_size returns 0 if the item isn't ammo (including the error case of section being nil)
						if box_size > 1 then                                                -- box_size will be 0 if the item isn't ammo
							bullet_count = belt_ammo.get_ammo_size(obj)
						end
					end
				end
				if TB3D_Modders.use_scheme_message == true then
					TB3D_Services.packet_alert("ammo_stack on_item_take: ["..utils.to_str(obj:id()).."] ["..utils.to_str(section).."], box_size "..utils.to_str(box_size)..", item's bullet count is "..utils.to_str(bullet_count))
				end
				if box_size <= 1 or bullet_count < 1 or bullet_count >= box_size then
					-- nothing to do, either...
					--   some kind of error (box_size or bullet_count is less than 1, or bullet_count is greater than box_size)
					--   or the item isn't ammo (box_size is 0)
					--   or it's ammo but it doesn't stack (box_size is equal to 1)
					--   or it's already fully stacked (bullet_count is equal to box_size)
				else
					local_ammo_types_needing_stack[section] = true
				end
			end
		end
	end
	return false				--don't drop
end

function on_update()
  local result = false
  local to_stack = ammo_types_needing_stack
  local section = nil
  local v = false
  for section, v in pairs(to_stack) do
    if TB3D_Modders.use_scheme_message then TB3D_Services.packet_alert("ammo_stack on_update: ["..utils.to_str(section).."] = "..utils.to_str(v)) end
    ammo_types_needing_stack = nil                                    -- suppress on_item_take during stacking
    if v then
      result = stack_ammo(nil, section) or result
    end
  end
  if ammo_types_needing_stack == nil then                             -- the list was non-empty, and we have processed it, so set an empty list
    ammo_types_needing_stack = {}
  end
  return result
end

-- Request to stack all partial ammo items in the inventory of act, of type section.
-- Partial ammo items are detected, their aggregate count is accumulated, and if the
-- partials can be stacked into a smaller number of items, stacking is performed.
function stack_ammo(act, section)
  if section == nil then
    return false
  end
  local actor = act
  if actor == nil then
    actor = db.actor
  end
  local box_size = get_box_size(section)
  if box_size <= 1 then                                               -- the type isn't ammo, or it is ammo with a box_size that doesn't stack
    return false
  end
  local bullet_count = 0                                              -- accumulate the total bullet count from all partial stacks
  local inv_partial_count = 0                                         -- the count of partial items
  local inv_partials = {}                                             -- table to accumulate the objects from inventory that need stacking
  local full_boxes = 0
  local idx = 0
  local inv_obj = nil
  local inv_section = nil
  local inv_bullet_count = 0
  local inv_id = nil
  for idx = 0, actor:object_count()-1 do                              -- iterate inventory looking for ammo of the target type
    inv_obj = actor:object(idx)
    inv_section = nil
    inv_bullet_count = 0
    if inv_obj ~= nil then
      inv_section = inv_obj:section()
    end
    if inv_section ~= nil and inv_section == section then
      inv_bullet_count = belt_ammo.get_ammo_size(inv_obj)
    end
    if TB3D_Modders.use_scheme_message == true then TB3D_Services.packet_alert("ammo_stack stack_ammo: inspecting ["..utils.to_str(inv_obj:id()).."] ["..utils.to_str(inv_section).."], inv_bullet_count "..utils.to_str(inv_bullet_count)..", section match "..utils.to_str(inv_section ~= nil and inv_section == section)) end
    if inv_bullet_count == box_size then
      full_boxes = full_boxes + 1
    end
    if inv_bullet_count >= 1 and inv_bullet_count < box_size then     -- matching type of ammo (inv_bullet_count would be 0 otherwise), and not fully stacked
      inv_partial_count = inv_partial_count + 1
      inv_partials[inv_obj] = inv_bullet_count                        -- add the item to our list of items to be stacked
      bullet_count = bullet_count + inv_bullet_count                  -- increment the running count of total bullets to stack together
    end
  end
  if inv_partial_count * box_size < bullet_count + box_size then      -- if stacking won't result in fewer items, don't stack
    --if TB3D_Modders.use_inventory_message then TB3D_Services.packet_alert("ammo_stack stack_ammo: stacking suppressed for ["..section.."], box_size ["..utils.to_str(box_size).."], ["..utils.to_str(inv_partial_count).."] total partial ammo objects found, totalling ["..utils.to_str(bullet_count).."] bullets, ["..utils.to_str(full_boxes).."] full boxes found, totalling ["..utils.to_str(full_boxes*box_size).."] bullets, total discovered bullet count ["..utils.to_str(full_boxes*box_size+bullet_count).."]") end
    return false
  end
  --if TB3D_Modders.use_inventory_message then TB3D_Services.packet_alert("ammo_stack stack_ammo: performing stack for ["..section.."], box_size ["..utils.to_str(box_size).."], ["..utils.to_str(inv_partial_count).."] total partial ammo objects found, totalling ["..utils.to_str(bullet_count).."] bullets, ["..utils.to_str(full_boxes).."] full boxes found, totalling ["..utils.to_str(full_boxes*box_size).."] bullets, total discovered bullet count ["..utils.to_str(full_boxes*box_size+bullet_count).."], starting inventory count is ["..utils.to_str(actor:object_count()).."]") end
  idx = 0
  for inv_obj, inv_bullet_count in pairs(inv_partials) do             -- remove all of the partials
    inv_id = inv_obj:id()
    amk.remove_item(inv_obj)
    inv_obj = alife():object(inv_id)                                  -- some objects apparently fail to delete
    if inv_obj ~= nil then                                            -- for those objects, remove them from the bullet_count, so we don't increase the total ammo count
      if TB3D_Modders.use_abort_message then TB3D_Services.packet_alert("ammo_stack stack_ammo: failed to delete ["..utils.to_str(inv_id).."] ["..utils.to_str(section).."] inv_bullet_count "..utils.to_str(inv_bullet_count)) end
      bullet_count = bullet_count + inv_bullet_count
      idx = idx + 1
    end
  end
  amk.spawn_ammo_in_inv(section, bullet_count, actor)                 -- create new ammo items in inventory, of the total bullet count we accumulated
  if TB3D_Modders.use_inventory_message then TB3D_Services.packet_alert("ammo_stack stack_ammo: stacking complete, "..utils.to_str(idx).." items of ["..utils.to_str(section).."] failed to delete, final stacked bullet_count was "..utils.to_str(bullet_count)..", ending inventory count is "..utils.to_str(actor:object_count())) end
  return true                                                         -- we stacked
end
