--<!-- TB3D 1.1.0.0.1.0 added my_ver, clear callbacks, obinder
function my_ver() return "1.1.0.0.1.0" end
-- Binder Bolts
-- Author: Charsi

local force_obinder = TB3D_Modders.use_obj_obinder				--110010, calls into game binder (alife)
if force_binder == nil then force_binder = true end

local t = {} -- Table of registered thrown bolts

function init(obj)
	obj:bind_object(BBolt(obj))
end

class "BBolt" (object_binder)

function BBolt:__init(obj) super(obj)
	self.object=obj
end 

function BBolt:reload(section)
	if force_obinder then object_binder.reload(self, section) end			--110010
end

function BBolt:reinit()
	if force_obinder then object_binder.reinit(self) end			--110010
	self.object:set_callback(callback.use_object, self.use_callback, self)
end

function BBolt:update(delta)
	if not t[self.object:id()] then
		local ps=self.object:get_physics_shell()
		if ps then
            local curr_vel=vector()
            ps:get_angular_vel(curr_vel)
            local current_velocity = vector()
            ps:get_linear_vel(current_velocity)
            if curr_vel:magnitude()>1 or current_velocity:magnitude()>15 then t[self.object:id()]=true bolt_ending.remove_bolt() end
        end
	end
	if force_obinder then object_binder.update(self, delta) end				--110010
end

function BBolt:net_spawn(data)
	if self.object:position():distance_to(db.actor:position())>2 then self.object:bind_object(nil) end
	if force_obinder then 
		return object_binder.net_spawn(self, data)			--110010
	else
		return true
	end
end

function BBolt:net_destroy()
	--TB3D_Services.packet_alert("bolt binder: net destroy")
	if TB3D_Modders.use_destroy_message then TB3D_Services.packet_alert("bolt binder: net destroy["..utils.to_str(self.object:name()).."] section["..self.object:section().."]") end
	self.object:set_callback(callback.use_object, nil)				--109990
	if force_obinder then object_binder.net_destroy(self) end			--110010
	if TB3D_Modders.use_destroy_message then TB3D_Services.packet_alert("bolt binder: net destroy["..utils.to_str(self.object:name()).."] done") end
	--TB3D_Services.packet_alert("bolt binder: net destroy done")
end

function BBolt:use_callback(obj, who)
	bolt_ending.spawn_item_in_inv("fake_bolt")
	db.actor:drop_item_and_teleport(self.object,vector():set(0,0,0))
	self.object:bind_object(nil)
end 

function BBolt:net_save_relevant()
	return true
end
