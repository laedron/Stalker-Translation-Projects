--TB3D 1.1.0.0.0.6 chgd >0.95 to >0.94, dmx135, fixed act_upgreid_ suit order, sveeblov_ferma_have, formatting and debug,
-- add_man health, kalmyak, prizrak_finalzver_done, treasure_ecolog_have, out_item_much, mutant parts for dan, can_start_dan,
-- can_start_arhara, out_items_count, new weapon for Fox - aleks1970, secret box, can_start_arhara
function my_ver() return "1.1.0.0.0.6" end

local nagrad = {
  level_1 = {
  "ammo_5.45x39_ap",
  "ammo_5.56x45_ap",
  "ammo_5.56x45_ss190"
 },
  level_2 = {
  "af_babka_1",
  "af_cry_1",
  "af_dik_1",
  "af_kol_1",
  "af_pudd_1",
  "af_spirit_1",
  "af_night_star",
  "af_gold_fish",
  "af_electra_moonlight",
  "af_rusty_sea_urchin",
  "af_dummy_glassbeads"
 },
  level_3 = {
  "af_babka_2",
  "af_cry_2",
  "af_dik_2",
  "af_kol_2",
  "af_pudd_2",
  "af_spirit_2",
  "af_simbion"
 },
  level_4 = {
  "wpn_raging_bull",
  "wpn_sr25_mk11_mod0_sk1",
  "wpn_xm8_para_sk2",
  "wpn_kriss_super_v",
--  "wpn_svd_m1",
  "wpn_m1891_30_scope",
  "wpn_wincheaster1300",
  "wpn_saiga12c",
  "wpn_uzi"  
 },
  level_5 = {
  "af_babka_3",
  "af_cry_3",
  "af_kol_4",
  "af_pudd_4",
  "af_spirit_4",
 -- "wpn_mg42",
  "wpn_awm",
  "wpn_svd_m1",
  "wpn_gauss"
 },
  level_6 = {
  "ammo_7.62x54_7h14",
  "ammo_7.62x54_7h1",
  "ammo_7.62x54_ap",
  "ammo_minigun",
  "ammo_gauss"
 },
level_7 = {
  "ammo_9x39_ap",
  "ammo_7.62x51_fmj",
  "ammo_7.62x51_ap",
  "ammo_7.62x54_7h14",
  "ammo_7.62x54_7h1",
  "ammo_7.62x54_ap",
  "ammo_9x39_pab9",
  "antirad",
  "medkit",
  "medkit_army",
  "medkit_scientic",
  "ammo_9x19_pbp",
  "ammo_9x19_fmj",
  "ammo_5.45x39_ap",
  "ammo_5.45x39_fmj",
  "ammo_5.56x45_ap",
  "ammo_5.56x45_ss190",
  "ammo_11.43x23_fmj",
  "ammo_11.43x23_hydro",
  "wpn_addon_silencer",
  "mutant_flesh_eye",
  "mutant_boar_leg",
  "mutant_dog_tail",
  "mutant_psevdodog_tail",
  "af_medusa",
  "af_blood",
  "af_drops",
  "grenade_f1",
  "grenade_rgd5",
  "ammo_og-7b",
  "ammo_vog-25p",
  "ammo_vog-25",
  "ammo_m209"
 }
}

function prines_kopyto(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	local mutant_boar_leg = 0
	actor:iterate_inventory(function (dummy, item) if item:section()=="mutant_boar_leg" then         
        mutant_boar_leg = mutant_boar_leg+1 end end, nil)
    if mutant_boar_leg>=6 then			--109985
        return true
	else
        return false
	end
end

function otdal_kopyto(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
	flamethrower.relocate_n_items_section(trader, "mutant_boar_leg", "out", 6)		--109985
    dialogs.relocate_item_section(second_speaker, item , "in")
end

function prines_hvost(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	local mutant_dog_tail = 0
	actor:iterate_inventory(function (dummy, item) if item:section()=="mutant_dog_tail" then mutant_dog_tail=mutant_dog_tail+1 end end, nil)
    if mutant_dog_tail>=3 then			--109985
        return true
	else
        return false
	end
end

function otdal_hvost(first_speaker, second_speaker)
	local item = ""
	local count = math.random(3,4)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_1[math.random(table.getn(nagrad.level_1))]
	flamethrower.relocate_n_items_section(trader, "mutant_dog_tail", "out", 3)	--109985
    flamethrower.relocate_n_items_section(actor, item , "in", count)
end

function add_man()
	local obj=amk.spawn_item("mil_monolit_rush_respawn_1",vector():set(32.9309,-0.00135,197.588),1242,20400)
	local tbl = amk.read_stalker_params(obj)
	tbl.sid = 9498
	tbl.health = 1.0 --0.2  --!!!!TB3D 109926
	tbl.updhealth = 0.2
	amk.write_stalker_params(tbl, obj)
end 

function metka_man()
	level_tasks.add_location(507,"green_location","Wounded")
end

function voronin_flesh_have(task, objective) 
	if db.actor ~= nil then
		return db.actor:object("crazy_flash") ~= nil
	end
	return false
end

function voronin_flesh_done(first_speaker, second_speaker) 
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
	dialogs.relocate_item_section(trader, "crazy_flash", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end	

function prapor_jaw_have(task, objective) 
	if db.actor ~= nil then
		return db.actor:object("mutant_krovosos_jaw") ~= nil
	end
	return false
end

function prapor_jaw_done(first_speaker, second_speaker) 
	dialogs.relocate_item_section(first_speaker, "mutant_krovosos_jaw", "out")
	dialogs.relocate_item_section(second_speaker, "wpn_xm1014_3", "in")	-- new weapon for Fox - aleks1970
end	

function informator_pda_have(task, objective) 
	if db.actor ~= nil then
		return db.actor:object("bar_tiran_pda") ~= nil
	end
	return false
end


function informator_pda_done(first_speaker, second_speaker) 
	dialogs.relocate_item_section(second_speaker, "bar_tiran_pda", "out")
	dialogs.relocate_item_section(second_speaker, "af_medusa", "in")
end

function pda_take(first_speaker, second_speaker) 
	dialogs.relocate_item_section(first_speaker, "bar_tiran_pda", "in")
	second_speaker:set_relation(game_object.friend, second_speaker)
end

function gavr_pda_have(task, objective) 
	if db.actor ~= nil then
		return db.actor:object("mil_bolt_pda") ~= nil
	end
	return false
end

function gavr_pda_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
	dialogs.relocate_item_section(trader, "mil_bolt_pda", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end	


function saharov_pda_have(task, objective) 
	if db.actor ~= nil then
		return db.actor:object("pda_priz") ~= nil
	end
	return false
end


function saharov_pda_done(first_speaker, second_speaker) 
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
	dialogs.relocate_item_section(trader, "pda_priz", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end	

function freeman_eagle_have(task, objective) 
	if db.actor ~= nil then
		if db.actor:object("wpn_eagle_m1") ~= nil then
			--TB3D_Services.info_alert("freeman eagle have [true]")
			return true
		end
	end
	--TB3D_Services.info_alert("freeman eagle have [false]")
	return false
end

function freeman_eagle_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
	dialogs.relocate_item_section(trader, "wpn_eagle_m1", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end

function ghange_set(npc) 
	amk.start_timer(math.random(5,10))
	TB3D_Services.set_community(npc, "killer", 0, 0, true)
	--npc:set_character_community("killer", 0, 0)
end

function freeman_case_have(task, objective) 
	if db.actor ~= nil then
		return db.actor:object("case_freeman") ~= nil
	end
	return false
end

function freeman_case_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
	dialogs.relocate_item_section(trader, "case_freeman", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end

function gavr_doc_have(task, objective) 
	if db.actor ~= nil then
		return db.actor:object("lab_x10_documents") ~= nil
	end
	return false
end

function gavr_doc_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
	dialogs.relocate_item_section(trader, "lab_x10_documents", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end

function bland_flash_have(task, objective) 
	if db.actor ~= nil then
		return db.actor:object("bland_flash") ~= nil
	end
	return false
end

function bland_flash_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
	dialogs.relocate_item_section(trader, "bland_flash", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end	

local items_count=0
local itemin=nil

function item_much(itm,need_namber)
	items_count=0
	itemin=itm
	db.actor:iterate_inventory(cheking_item,db.actor)
	if items_count>=need_namber then
		return true
	else
		return false
	end
end	

function cheking_item(actor,item)
	local items=item:section()
	if items==itemin then
		items_count=items_count+1
	end
end

function create_items(npc,section,number)
	if npc and section and number and number > 0 then
        for i=1,number do
			alife():create(section, 
            npc:position(),
            npc:level_vertex_id(),  
            npc:game_vertex_id(),
            npc:id())
        end
	end
end

local reloc_params={}											--109984
function out_item_much(itm_section,need_number)
	reloc_params.itm_section=itm_section
	reloc_params.itm_cnt=need_number
	reloc_params.itm_cnt_found=0
	db.actor:iterate_inventory(checkout_items_count,db.actor)
	if TB3D_Modders.use_inventory_message then TB3D_Services.packet_alert("new dialog: out item much["..itm_section.."] found["..utils.to_str(reloc_params.itm_cnt_found).."]") end
	if reloc_params.itm_cnt_found >= reloc_params.itm_cnt then
		db.actor:iterate_inventory(out_items_count,db.actor)
		news_manager.relocate_item(db.actor, "out", itm_section, need_number)
	elseif TB3D_Modders.use_inventory_message then
		TB3D_Services.packet_alert("new dialog: out item much["..itm_section.."] not enough found!!!!")
	end
	reloc_params={}
end

function checkout_items_count(actor,item)
	if item.section and item:section()==reloc_params.itm_section then
		reloc_params.itm_cnt_found = reloc_params.itm_cnt_found + 1
	end
end

function out_items_count(actor,item)
	if reloc_params.itm_cnt > 0 then
		if item.section and item:section()==reloc_params.itm_section then
			if amk.remove_item_from_inventory(item, actor) then
				reloc_params.itm_cnt = reloc_params.itm_cnt - 1
			elseif TB3D_Modders.use_inventory_message then
				TB3D_Services.packet_alert("new dialog: out items count["..item:section().."] not removed!!!!")
			end
		end
	end
end

function krov_kamen()
	return  item_much("mutant_flesh_eye",3) ~= false
end
   
function otdal_kamen(first_speaker, second_speaker)
	 out_item_much("mutant_flesh_eye",3) 
end

function nagrada_kamen(first_speaker, second_speaker)
	 create_items(db.actor,"ammo_9x19_pbp",2)
	dialogs.relocate_item_section(first_speaker, "ammo_9x19_pbp", "in")
end

function prines_gravi()
	return  item_much("mutant_face_tushkano",10) ~= false
end
   
function otdal_gravi(first_speaker, second_speaker)
	 out_item_much("mutant_face_tushkano",10) 
end

function nagrada_gravi(first_speaker, second_speaker)
	 create_items(db.actor,"ammo_11.43x23_hydro",2)
	dialogs.relocate_item_section(first_speaker, "ammo_11.43x23_hydro", "in")
end

function prines_ruki()
	return  item_much("mutant_hand_kontroler",4) ~= false
end
   
function otdal_ruki(first_speaker, second_speaker)
	 out_item_much("mutant_hand_kontroler",4) 
end

function nagrada_ruki(first_speaker, second_speaker)
	 create_items(db.actor,"ammo_5.45x39_ap",4)
	 create_items(db.actor,"vodka",1)
	dialogs.relocate_item_section(first_speaker, "ammo_5.45x39_ap", "in")
	dialogs.relocate_item_section(first_speaker, "vodka", "in")
end

function dan_grab_have(task, objective)
	return has_alife_info("dan_grab_have")
end

function dan_grab_done(first_speaker, second_speaker) 
	--TB3D_Services.packet_alert("new dialog: dan grab done")
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
	dialogs.relocate_item_section(trader, "bad_psy_helmet", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", 1)
end	

function yakut_help_have(task, objective) 
	if db.actor ~= nil then
		return db.actor:object("new_book") ~= nil
	end
	return false
end

function yakut_help_done(first_speaker, second_speaker) 
    local item = ""
	local count = math.random(4,5)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_1[math.random(table.getn(nagrad.level_1))]
	dialogs.relocate_item_section(trader, "new_book", "out", 1)
    flamethrower.relocate_n_items_section(actor, item , "in", count)
end

function yakut_treasure_have(task, objective) 
	--TB3D_Services.packet_alert("new dialog: yakut treasure have")
	if db.actor ~= nil then
		return db.actor:object("notebook_new") ~= nil
	end
	return false
end

function yakut_treasure_done(first_speaker, second_speaker) 
    dialogs.relocate_item_section(first_speaker, "notebook_new", "out")
	second_speaker:set_relation(game_object.friend, second_speaker)
end

function dan_flash_have(task, objective) 
	if db.actor ~= nil then
		return db.actor:object("nauch_flash") ~= nil
	end
	return false
end

function dan_flash_done(first_speaker, second_speaker) 
    dialogs.relocate_item_section(first_speaker, "nauch_flash", "out")
	dialogs.relocate_item_section(first_speaker, "good_psy_helmet", "in")
end	

function treasure_ecolog_have(task, objective) 
	if db.actor and db.actor:object("new_book_prizrak") ~= nil then
--TB3D_Services.packet_alert("new dialog: treasure ecolog have")
		return true
	end
	return false
end

function treasure_ecolog_done(first_speaker, second_speaker) 
    local item = ""
	local count = math.random(2,3)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_6[math.random(table.getn(nagrad.level_6))]
	dialogs.relocate_item_section(trader, "new_book_prizrak", "out", 1)
    flamethrower.relocate_n_items_section(actor, item , "in", count)
end					

function barmen_simbion_have(task, objective) 
	if db.actor ~= nil then
		return db.actor:object("af_simbion") ~= nil
	end
	return false
end

function barmen_simbion_done(first_speaker, second_speaker) 
    dialogs.relocate_item_section(second_speaker, "af_simbion", "out")
end	

function system_ecolog_have(task, objective) 
	if db.actor ~= nil then
		return db.actor:object("computer_new") ~= nil
	end
	return false
end

function system_ecolog_done(first_speaker, second_speaker) 
    local item = ""
	local count = math.random(2,3)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_6[math.random(table.getn(nagrad.level_6))]
	dialogs.relocate_item_section(trader, "computer_new", "out", 1)
    flamethrower.relocate_n_items_section(actor, item , "in", count)
end	

function prizrak_zver_have(task, objective) 
	if db.actor ~= nil then
		return db.actor:object("sniper_flash") ~= nil
	end
	return false
end

function prizrak_zver_done(first_speaker, second_speaker) 
    dialogs.relocate_item_section(first_speaker, "sniper_flash", "out")
	dialogs.relocate_item_section(second_speaker, "wpn_dark_gauss", "in")
	treasure_manager.get_treasure_manager():give_treasure("lost_village_inventory_box") --110000, Lost Village - Ghost blue box - aleks1970
end	

function prizrak_finalzver_have(task, objective) 
	if db.actor ~= nil then
		return db.actor:object("new_document_sniper") ~= nil
	end
	return false
end

function prizrak_finalzver_done(first_speaker, second_speaker) 
    local item = ""
	local count = math.random(2,3)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_6[math.random(table.getn(nagrad.level_6))]
--TB3D_Services.packet_alert("flamethrower: relocate n items["..utils.to_str(actor:name()).."]["..utils.to_str(item).."]["..utils.to_str(count).."]")
    flamethrower.relocate_n_items_section(actor, item , "in", count)
	dialogs.relocate_item_section(trader, "new_document_sniper", "out", 1)
end

function yakut_ograblen_have(task, objective) 
	if db.actor ~= nil then
		return db.actor:object("inventory_new_box") ~= nil
	end
	return false
end

function yakut_ograblen_done(first_speaker, second_speaker) 
    dialogs.relocate_item_section(second_speaker, "inventory_new_box", "out")
    dialogs.relocate_item_section(second_speaker, "ammo_5.56x45_ss190", "in")
	 create_items(db.actor,"ammo_5.56x45_ss190",4)
	dialogs.relocate_item_section(second_speaker, "antirad", "in")
	 create_items(db.actor,"antirad",2)
	dialogs.relocate_item_section(second_speaker, "medkit_army", "in")
	 create_items(db.actor,"medkit_army",3)
end	

function helmet_est(task, objective) 
	if db.actor ~= nil then
		return db.actor:object("good_psy_helmet") ~= nil
	end
	return false
end

function helmet_otdal(first_speaker, second_speaker) 
    local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
	dialogs.relocate_item_section(trader, "good_psy_helmet", "out", 1)
    dialogs.relocate_item_section(second_speaker, item , "in")
end

function left_arhara(first_speaker, second_speaker) 
    dialogs.relocate_item_section(second_speaker, "device_torch", "in")
end

function atak_larger_done(first_speaker, second_speaker) 
    local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
	dialogs.relocate_item_section(second_speaker, item , "in")
end

function tri_kristal()
	return  item_much("af_cristall",3) ~= false
end
   
function otdal_kristal(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_5[math.random(table.getn(nagrad.level_5))]
	flamethrower.relocate_n_items_section(trader, "af_cristall", "out", 3)
    dialogs.relocate_item_section(second_speaker, item , "in")
end

function prines_lomot()
	return  item_much("af_mincer_meat",3) ~= false
end
   
function otdal_lomot(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
	flamethrower.relocate_n_items_section(trader, "af_mincer_meat", "out", 3)
    dialogs.relocate_item_section(second_speaker, item , "in")
end

function prines_odingrav()
	return  item_much("af_gravi",1) ~= false
end
   
function otdal_odingrav(first_speaker, second_speaker)
	 out_item_much("af_gravi",1) 
end

function nagrada_odingrav(first_speaker, second_speaker)
	 create_items(db.actor,"antirad",2)
    dialogs.relocate_item_section(first_speaker, "antirad", "in")
end

function zahar_naemnik_done(first_speaker, second_speaker) 
    local item = ""
	local count = math.random(3,4)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_1[math.random(table.getn(nagrad.level_1))]
	flamethrower.relocate_n_items_section(actor, item , "in", count)
end

function prapor_apt_have()
	return  item_much("medkit_scientic",10) ~= false
end
   
   
function prapor_apt_done(first_speaker, second_speaker)
	 out_item_much("medkit_scientic",10) 
end

function barrem_talk_have()
	return  item_much("af_cry_2",1) ~= false
end

function vzal_pda_voen(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "voen_pda", "in")
end

function otdal_pda_voen(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "voen_pda", "out")
end

function prizrak_tainiy_have(first_speaker, second_speaker)
    return  item_much("plan_document",1) ~= false
end

function prizrak_tainiy_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "plan_document", "out")
end

function gold_art_have()
	return  item_much("gold_art",10) ~= false
end

function gold_art_done()
	 out_item_much("gold_art",10)
end

function tri_tainik_first()
	return  item_much("new_prizrak_document1",1) ~= false
end

function tri_tainik_second()
	return  item_much("new_prizrak_document2",1) ~= false
end

function tri_tainik_third()
	return  item_much("new_prizrak_document3",1) ~= false
end

function tri_tainik_have()
     return  item_much("new_prizrak_document1",1) ~= false and  item_much("new_prizrak_document2",1) ~= false and  item_much("new_prizrak_document3",1) ~= false
end

function tri_tainik_done()
	 out_item_much("new_prizrak_document1",1)
	 out_item_much("new_prizrak_document2",1)
	 out_item_much("new_prizrak_document3",1)
end


function inform_20_pda_have()
     return  item_much("device_pda_npc",20) ~= false 
end

function inform_40_pda_have()
     return  item_much("device_pda_npc",40) ~= false 
end

function inform_20_pda(first_speaker, second_speaker)
    local item = ""
    local count = math.random(2,3)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_7[math.random(table.getn(nagrad.level_7))]
	flamethrower.relocate_n_items_section(trader, "device_pda_npc", "out", 20)
	flamethrower.relocate_n_items_section(actor, item , "in", count)
end

function inform_40_pda(first_speaker, second_speaker)
    local item = ""
    local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end 
	flamethrower.relocate_n_items_section(trader, "device_pda_npc", "out", 40)
end

function dyak_dal(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "medkit", "in", 2)   
   flamethrower.relocate_n_items_section(actor, "ammo_5.45x39_ap", "in", 3)
end

function dyak_nagrad(first_speaker, second_speaker)
    local item = ""
    local count = math.random(4,5)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_7[math.random(table.getn(nagrad.level_7))]
	flamethrower.relocate_n_items_section(actor, item , "in", count)
end

function kalmyak_need_done(first_speaker, second_speaker)
    local item = ""
    local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
	dialogs.relocate_item_section(second_speaker, item , "in")
	 out_item_much("box_kalmyak",1)
end

function kalmyak_dal(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "medkit", "in", 2) 
--   flamethrower.relocate_n_items_section(actor, "ammo_9x19_fmj", "in", 6)
--   dialogs.relocate_item_section(first_speaker, "wpn_beretta", "in")
--   dialogs.relocate_item_section(first_speaker, "antirad", "in")
end

function kalmyak_need_have()
	return  item_much("box_kalmyak",1) ~= false
end

function kalmyak_3_vodka()
     return  item_much("vodka",3) ~= false 
end

function kalmyak_3_sigaret()
     return  item_much("sigaret",3) ~= false 
end

function kalmyak_3_vodka_otdal(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(first_speaker, "maz", "in")
    out_item_much("vodka",3)
end

function kalmyak_3_sigaret_otdal(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(first_speaker, "maz", "in")
    out_item_much("sigaret",3)
end

function marsh_remont_have()
     return  item_much("maz",3) ~= false 
end

function marsh_remont_done()
	 out_item_much("maz",3)
end

function dyak_maz_have()
     return  item_much("af_soul",1) ~= false 
end

function dyak_maz_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "maz", "in", 3) 
    out_item_much("af_soul",1)
end


function controller_hutor_have()
     return  item_much("red_mozg",1) ~= false 
end

function controller_hutor_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
   dialogs.relocate_item_section(second_speaker, item , "in") 
    out_item_much("red_mozg",1)
end

function burer_red_hand_est()
     return  item_much("mutant_burer_red_hand",1) ~= false 
end

function burer_red_hand_otdal(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
   dialogs.relocate_item_section(second_speaker, item , "in") 
    out_item_much("mutant_burer_red_hand",1)
end

function krovosos_red_jaw_est()
     return  item_much("mutant_krovosos_red_jaw",1) ~= false 
end

function krovosos_red_jaw_otdal(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
   dialogs.relocate_item_section(second_speaker, item , "in") 
    out_item_much("mutant_krovosos_red_jaw",1)
end

function sveeblov_ferma_have()
	if level.name() == "marsh" and has_alife_info("sveeblov_ferma_begin") then
		return  item_much("wpn_pkm",1) ~= false 
	end
	return false
end

function sveeblov_ferma_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
   dialogs.relocate_item_section(second_speaker, item , "in") 
    out_item_much("wpn_pkm",1)
end


function kot_need_doc_have()
     return has_alife_info("kot_need_doc_have") 
end

function kot_need_doc_done()
	 out_item_much("mono_dead_doc",1)
end

function kot_need_next_have()
     return  item_much("mono_note",1) ~= false 
end

function kot_need_next_done()
	 out_item_much("mono_note",1)
end

function need_televizor_have()
     return  item_much("televizor",1) ~= false 
end

function need_televizor_done()
	 out_item_much("televizor",1)
end

function marsh_barman_dal(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "wpn_awm_new", "in", 1) 
   dialogs.relocate_item_section(actor, "ammo_igl_new", "in", 1)
end

function marsh_barman_have()
     return  item_much("wpn_awm_new",1) ~= false 
end

function marsh_barman_zabral(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
   dialogs.relocate_item_section(second_speaker, item , "in") 	
   dialogs.relocate_item_section(trader, "wpn_awm_new", "out", 1)  
end


function borman_sniper_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "ammo_5.56x45_ss190", "in", 5)
   flamethrower.relocate_n_items_section(actor, "ammo_7.62x51box", "in", 5)   
end

function borman_glushitel_begin()
     return  item_much("glushitel",1) ~= false 
end

function borman_glushitel_next(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "glushitel", "in", 1) 
end

function borman_glushitel_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "ammo_5.56x45_ap", "in", 3)
   flamethrower.relocate_n_items_section(actor, "ammo_7.62x51_ap", "in", 3) 
   flamethrower.relocate_n_items_section(actor, "ammo_7.62x54_ap", "in", 3) 
   flamethrower.relocate_n_items_section(actor, "ammo_7.62x25_ps", "in", 3) 
   flamethrower.relocate_n_items_section(actor, "ammo_7.62x51box", "in", 3)    
end

function kot_kalmyak_lekar_next()
     return  item_much("af_night_star",1) ~= false and  item_much("mutant_snork_leg",10) ~= false  
end

function kot_kalmyak_lekar_est()
	 out_item_much("af_night_star",1)
	 out_item_much("mutant_snork_leg",10)
end

function kot_kalmyak_lekar_have(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "lekar_kalmyak", "in", 1) 
end

function kot_kalmyak_lekar_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "monolit_black_outfit_plus", "in", 1) 
    out_item_much("lekar_kalmyak",1)
end

function lekar_kalmyak_actor()
     return  item_much("lekar_kalmyak",1) ~= false 
end

function kot_holod_lekar_next()
     return  item_much("af_simbion",1) ~= false 
end

function kot_holod_lekar_est(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "lekar_kalmyak", "in", 1) 
    out_item_much("af_simbion",1)
end

function kot_holod_lekar_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "monolit_black_outfit_plus", "in", 1) 
    out_item_much("lekar_kalmyak",1)
end


function holod_af_gravi_have()
     return  item_much("af_gravi",1) ~= false 
end

function holod_af_gravi_dal(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "grenade_f1", "in", 4) 
    out_item_much("af_gravi",1)
end

function holod_af_mincer_meat_have()
     return  item_much("af_mincer_meat",1) ~= false 
end

function holod_af_mincer_meat_dal(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "grenade_f1", "in", 4) 
    out_item_much("af_mincer_meat",1)
end

function holod_two_af_vyvert_have()
     return  item_much("af_vyvert",2) ~= false 
end

function holod_two_af_vyvert_dal(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "grenade_f1", "in", 4) 
    out_item_much("af_vyvert",2)
end


function holod_af_ameba_slug_have()
     return  item_much("af_ameba_slug",1) ~= false 
end

function holod_af_ameba_slug_dal(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "medkit", "in", 5) 
    out_item_much("af_ameba_slug",1)
end

function holod_two_af_electra_sparkler_have()
     return  item_much("af_electra_sparkler",2) ~= false 
end

function holod_two_af_electra_sparkler_dal(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "medkit", "in", 5) 
    out_item_much("af_electra_sparkler",2)
end

function holod_two_af_blood_have()
     return  item_much("af_blood",2) ~= false 
end

function holod_two_af_blood_dal(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	flamethrower.relocate_n_items_section(actor, "medkit", "in", 5) 
    out_item_much("af_blood",2)
end

function xalyava_nebo_have(task, info)
    if has_alife_info("xalyava_naem1_dead") and has_alife_info("xalyava_naem2_dead") and
		has_alife_info("xalyava_naem3_dead") and has_alife_info("xalyava_naem4_dead") and 
		has_alife_info("xalyava_naem5_dead") and has_alife_info("xalyava_naem6_dead") and 
		has_alife_info("xalyava_naem7_dead") and has_alife_info("xalyava_naem8_dead") then
			--TB3D_Services.packet_alert("new dialog: xalyava_nebo_have")
			TB3D_Services.give_info("xalyava_nebo_have") 
			return true
	end
	return false
end

function xalyava_nebo_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
   dialogs.relocate_item_section(second_speaker, item , "in") 
end

function francuz_have()
     return  item_much("pda_francuz",1) ~= false 
end

function francuz_done()
	 out_item_much("pda_francuz",1)
end

function actor_have_tri_vo()
	--TB3D_Services.packet_alert("new dialog: actor have trio vo")
     return  item_much("vodka",3) ~= false 
end

function nebo_clear_dal(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "case_nebo", "in", 1) 
end

function nebo_clear_have()
     return  item_much("case_nebo",1) ~= false 
end

function nebo_clear_done()
	 out_item_much("case_nebo",1)
end

function nebo_kurier_doc_est(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
   dialogs.relocate_item_section(second_speaker, item , "in")
end

function nebo_kurier_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "nebo_clear", "in", 1) 
end

function act_have_nebo_exo_outfit() 
	if db.actor then
		if db.actor:object("nebo_exo_outfit") and db.actor:object("nebo_exo_outfit"):condition() and db.actor:object("nebo_exo_outfit"):condition()>0.94 then
			return true
		end
	end
	return false
end

function act_have_nebo_scientific_outfit() 
	if db.actor then
		if db.actor:object("nebo_scientific_outfit") and db.actor:object("nebo_scientific_outfit"):condition() and db.actor:object("nebo_scientific_outfit"):condition()>0.94 then
			return true
		end
	end
	return false
end

function act_have_monolit_black_outfit() 
	if db.actor then
		if db.actor:object("monolit_black_outfit") and db.actor:object("monolit_black_outfit"):condition() and db.actor:object("monolit_black_outfit"):condition()>0.94 then
			return true
		end
	end
	return false
end

function act_have_10000()
  return db.actor:money()>=10000
end

function act_have_15000()
  return db.actor:money()>=15000
end

function act_have_20000()
  return db.actor:money()>=20000
end

function act_have_25000()
  return db.actor:money()>=25000
end

function act_have_30000()
  return db.actor:money()>=30000
end

function act_upgreid_nebo_exo_outfit_bad(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("nebo_exo_outfit",1) 
   dialogs.relocate_money(trader, 10000, "out")   
   dialogs.relocate_item_section(actor, "nebo_exo_outfit_bad", "in", 1)
end

function act_upgreid_nebo_exo_outfit_good(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("nebo_exo_outfit",1) 
   dialogs.relocate_money(trader, 25000, "out")   
   dialogs.relocate_item_section(actor, "nebo_exo_outfit_good", "in", 1)
end

function act_upgreid_nebo_exo_outfit_default(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("nebo_exo_outfit",1) 
   dialogs.relocate_money(trader, 15000, "out")   
   dialogs.relocate_item_section(actor, "nebo_exo_outfit_default", "in", 1)
end

function act_upgreid_nebo_exo_outfit_static(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("nebo_exo_outfit",1) 
   dialogs.relocate_money(trader, 20000, "out")   
   dialogs.relocate_item_section(actor, "nebo_exo_outfit_static", "in", 1)
end

function act_upgreid_nebo_exo_outfit_kat_eye(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("nebo_exo_outfit",1) 
   dialogs.relocate_money(trader, 30000, "out")   
   dialogs.relocate_item_section(actor, "nebo_exo_outfit_kat_eye", "in", 1)
end

function act_upgreid_nebo_exo_outfit_psy(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("nebo_exo_outfit",1) 
   dialogs.relocate_money(trader, 25000, "out")   
   dialogs.relocate_item_section(actor, "nebo_exo_outfit_psy", "in", 1)
end

function act_upgreid_nebo_exo_outfit_blackwhite(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("nebo_exo_outfit",1) 
   dialogs.relocate_money(trader, 25000, "out")   
   dialogs.relocate_item_section(actor, "nebo_exo_outfit_blackwhite", "in", 1)
end

function act_upgreid_nebo_exo_outfit_bast(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("nebo_exo_outfit",1) 
   dialogs.relocate_money(trader, 30000, "out")   
   dialogs.relocate_item_section(actor, "nebo_exo_outfit_bast", "in", 1)
end

function act_upgreid_nebo_scientific_outfit_bad(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("nebo_scientific_outfit",1) 
   dialogs.relocate_money(trader, 10000, "out")   
   dialogs.relocate_item_section(actor, "nebo_scientific_outfit_bad", "in", 1)
end

function act_upgreid_nebo_scientific_outfit_good(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("nebo_scientific_outfit",1) 
   dialogs.relocate_money(trader, 25000, "out")   
   dialogs.relocate_item_section(actor, "nebo_scientific_outfit_good", "in", 1)
end

function act_upgreid_nebo_scientific_outfit_default(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("nebo_scientific_outfit",1) 
   dialogs.relocate_money(trader, 15000, "out")   
   dialogs.relocate_item_section(actor, "nebo_scientific_outfit_default", "in", 1)
end

function act_upgreid_nebo_scientific_outfit_static(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("nebo_scientific_outfit",1) 
   dialogs.relocate_money(trader, 20000, "out")   
   dialogs.relocate_item_section(actor, "nebo_scientific_outfit_static", "in", 1)
end

function act_upgreid_nebo_scientific_outfit_kat_eye(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("nebo_scientific_outfit",1) 
   dialogs.relocate_money(trader, 30000, "out")   
   dialogs.relocate_item_section(actor, "nebo_scientific_outfit_kat_eye", "in", 1)
end

function act_upgreid_nebo_scientific_outfit_psy(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("nebo_scientific_outfit",1) 
   dialogs.relocate_money(trader, 25000, "out")   
   dialogs.relocate_item_section(actor, "nebo_scientific_outfit_psy", "in", 1)
end

function act_upgreid_nebo_scientific_outfit_blackwhite(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("nebo_scientific_outfit",1) 
   dialogs.relocate_money(trader, 25000, "out")   
   dialogs.relocate_item_section(actor, "nebo_scientific_outfit_blackwhite", "in", 1)
end

function act_upgreid_nebo_scientific_outfit_bast(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("nebo_scientific_outfit",1) 
   dialogs.relocate_money(trader, 30000, "out")   
   dialogs.relocate_item_section(actor, "nebo_scientific_outfit_bast", "in", 1)
end

function act_upgreid_monolit_black_outfit_bad(first_speaker, second_speaker)
	--TB3D_Services.info_alert("new dialog: black mono outfit bad")
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("monolit_black_outfit",1) 
   dialogs.relocate_money(trader, 10000, "out")   
   dialogs.relocate_item_section(actor, "monolit_black_outfit_bad", "in", 1)
end

function act_upgreid_monolit_black_outfit_good(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("monolit_black_outfit",1) 
   dialogs.relocate_money(trader, 25000, "out")   
   dialogs.relocate_item_section(actor, "monolit_black_outfit_good", "in", 1)
end

function act_upgreid_monolit_black_outfit_default(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("monolit_black_outfit",1) 
   dialogs.relocate_money(trader, 15000, "out")   
   dialogs.relocate_item_section(actor, "monolit_black_outfit_default", "in", 1)
end

function act_upgreid_monolit_black_outfit_static(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("monolit_black_outfit",1) 
   dialogs.relocate_money(trader, 20000, "out")   
   dialogs.relocate_item_section(actor, "monolit_black_outfit_static", "in", 1)
end

function act_upgreid_monolit_black_outfit_kat_eye(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("monolit_black_outfit",1) 
   dialogs.relocate_money(trader, 30000, "out")   
   dialogs.relocate_item_section(actor, "monolit_black_outfit_kat_eye", "in", 1)
end

function act_upgreid_monolit_black_outfit_psy(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("monolit_black_outfit",1) 
   dialogs.relocate_money(trader, 25000, "out")   
   dialogs.relocate_item_section(actor, "monolit_black_outfit_psy", "in", 1)
end

function act_upgreid_monolit_black_outfit_blackwhite(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("monolit_black_outfit",1) 
   dialogs.relocate_money(trader, 25000, "out")   
   dialogs.relocate_item_section(actor, "monolit_black_outfit_blackwhite", "in", 1)
end

function act_upgreid_monolit_black_outfit_bast(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	 out_item_much("monolit_black_outfit",1) 
   dialogs.relocate_money(trader, 30000, "out")   
   dialogs.relocate_item_section(actor, "monolit_black_outfit_bast", "in", 1)
end


function shadowman_zver_have(task, info)
    if (has_alife_info("shadowman_zver1_dead")
	and has_alife_info("shadowman_zver2_dead")
	and has_alife_info("shadowman_zver3_dead")
	and has_alife_info("shadowman_zver4_dead")
	and has_alife_info("shadowman_zver5_dead")
	and has_alife_info("shadowman_zver6_dead")
	and has_alife_info("shadowman_zver7_dead")
	and has_alife_info("shadowman_zver8_dead")
	and has_alife_info("shadowman_zver9_dead")
	and	has_alife_info("shadowman_zver10_dead")
	and has_alife_info("shadowman_zver11_dead")
	and has_alife_info("shadowman_zver12_dead")
	and has_alife_info("shadowman_zver13_dead")
	and has_alife_info("shadowman_zver14_dead")
	and has_alife_info("shadowman_zver15_dead")
	and has_alife_info("shadowman_zver16_dead")
	and has_alife_info("shadowman_zver17_dead")
	and has_alife_info("shadowman_zver18_dead")
	and has_alife_info("shadowman_zver19_dead")
	and has_alife_info("shadowman_zver20_dead")
	and has_alife_info("shadowman_zver21_dead")
	and has_alife_info("shadowman_zver22_dead")
	and has_alife_info("shadowman_zver23_dead")
	and has_alife_info("shadowman_zver24_dead")
	and has_alife_info("shadowman_zver25_dead")
	and has_alife_info("shadowman_zver26_dead")
	and has_alife_info("shadowman_zver27_dead")
	and has_alife_info("shadowman_zver28_dead")
	and has_alife_info("shadowman_zver29_dead")
	and has_alife_info("shadowman_zver30_dead")) then
		TB3D_Services.shadowman_cleanup()
		return true 
	end
	return false
end

function shadowman_zver_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
    flamethrower.relocate_n_items_section(actor, "ammo_12x70_buck", "in", 5)
end

function shadowman_forest_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
    flamethrower.relocate_n_items_section(actor, "medkit_army", "in", 6)
end

function act_have_tri_grib()
     return  item_much("mushroom",3) ~= false 
end

function grib_five_762x25_ps(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
    flamethrower.relocate_n_items_section(actor, "ammo_7.62x25_ps", "in", 5)
	 out_item_much("mushroom",3)	
end

function grib_tri_762x51box(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
    flamethrower.relocate_n_items_section(actor, "ammo_7.62x51box", "in", 3)
	 out_item_much("mushroom",3)	
end

function grib_tri_medkit_army(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
    flamethrower.relocate_n_items_section(actor, "medkit_army", "in", 3)
	 out_item_much("mushroom",3)	
end

function grib_tri_antirad(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
    flamethrower.relocate_n_items_section(actor, "antirad", "in", 3)
	 out_item_much("mushroom",3)	
end

function grib_four_545x39_fmj(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
    flamethrower.relocate_n_items_section(actor, "ammo_5.45x39_fmj", "in", 4)
	 out_item_much("mushroom",3)	
end

function grib_four_556x45_ss190(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
    flamethrower.relocate_n_items_section(actor, "ammo_5.56x45_ss190", "in", 4)
	 out_item_much("mushroom",3)	
end

function grib_tri_9x39_pab9(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
    flamethrower.relocate_n_items_section(actor, "ammo_9x39_pab9", "in", 3)
	 out_item_much("mushroom",3)	
end

function klyak_forest_doc_next(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "rukzak_green", "in", 1) 
end

function actor_has_rukzak_green()
     return  item_much("rukzak_green",1) ~= false 
end

function klyak_forest_doc_green()
	 out_item_much("rukzak_green",1)	
end

function klyak_forest_doc_have()
     return  item_much("klyak_forest_doc",1) ~= false 
end

function klyak_forest_doc_done()
	 out_item_much("klyak_forest_doc",1)	
end	

function can_start_dan()
	if has_alife_info("kuzy_artmodifikator_start") and not has_alife_info("kuzy_artmodifikator_done") then return false end
	return true
end

function can_start_arhara()
	if has_alife_info("dan_grab_start") and not has_alife_info("dan_grab_done") then return false end
	return has_alife_info("agroprom_military_case_done")														--110006
end
