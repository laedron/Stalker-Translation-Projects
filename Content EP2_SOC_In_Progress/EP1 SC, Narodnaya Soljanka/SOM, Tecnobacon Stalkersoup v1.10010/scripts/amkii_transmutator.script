-- TB3D 1.0.9.9.2.6 hit styles, new buttons aleks1970 - search for "-- aleks1970" text
function my_ver() return "1.0.9.9.2.6" end
--[[
Developed by AMK-Team
File:  amkII_transmutator.script
Copyright:  ©  AMK-Team 2009
Author: Refresh
Since: 14.01.2009 1:04
New buttons: 11.03.2015 - aleks1970
--]]
local translate = game.translate_string
local grid = 50

oDevice = nil
local aArtsInfo = nil		-- table artov data in the inventory
local aArtsInventory = nil  -- table artov list of objects in the inventory
local aInterval = nil		-- integer number of cells in the inventory. scroll
local aRecInterval = nil	-- integer number of cells in retseptnom scroll
local aAnomaly = nil		-- string Section anomalies near
local anomaly_name = nil	-- string name anomaly
local txtNotkomp = ""		-- string the name of the missing components
local txtVremya = ""		-- string cooking time
local aRecipts = nil		-- table all the recipes for the anomaly
local aReciptsHave = nil	-- table existing HS recipes for anomalies
local aRecsInfo = nil		-- table these results for cooking retseptnogo scroll
local aRecSections = nil	-- table list of sections in artov retseptnom scroll
local aAnomId = nil			-- integer id anomalies near
local iInfo = nil			-- string name infoporshnya recipe
--[[
--	Infa buttons on the scrollbar.
--]]
local scrly = 155
local aScrollBar = {
	{x =  73, y = scrly,  wt = grid, hg = grid, oSlot = nil, iSectIndex = nil},
	{x = 128, y = scrly,  wt = grid, hg = grid, oSlot = nil, iSectIndex = nil},
	{x = 183, y = scrly,  wt = grid, hg = grid, oSlot = nil, iSectIndex = nil},
	{x = 238, y = scrly,  wt = grid, hg = grid, oSlot = nil, iSectIndex = nil},
	{x = 293, y = scrly,  wt = grid, hg = grid, oSlot = nil, iSectIndex = nil},
	{x = 348, y = scrly,  wt = grid, hg = grid, oSlot = nil, iSectIndex = nil}
}

--[[
--	Infa for the buttons on the artifacts.
--]]
local cpnsltsy = 58
local aCmpnSlots = {
	{x =  73, y = cpnsltsy,  wt = grid, hg = grid, oSlot = nil, iSectIndex = nil},
	{x = 128, y = cpnsltsy,  wt = grid, hg = grid, oSlot = nil, iSectIndex = nil},
	{x = 183, y = cpnsltsy,  wt = grid, hg = grid, oSlot = nil, iSectIndex = nil},
	{x = 238, y = cpnsltsy,  wt = grid, hg = grid, oSlot = nil, iSectIndex = nil},
	{x = 293, y = cpnsltsy,  wt = grid, hg = grid, oSlot = nil, iSectIndex = nil},
	{x = 348, y = cpnsltsy,  wt = grid, hg = grid, oSlot = nil, iSectIndex = nil}
}
--[[
--	Infa buttons on retseptbare.
--]]
local recbary = 235
local aRecBar = {
    {x =  92,  y = recbary,  wt = grid, hg = grid, oSlot = nil, iSectIndex = nil},
    {x = 171,  y = recbary,  wt = grid, hg = grid, oSlot = nil, iSectIndex = nil},
    {x = 251,  y = recbary,  wt = grid, hg = grid, oSlot = nil, iSectIndex = nil},
	{x = 329,  y = recbary,  wt = grid, hg = grid, oSlot = nil, iSectIndex = nil}
}


local oRes = nil
local oNotkomp = nil

function _log(sMsg)
	if sMsg and TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("AMKII transmutator: ["..sMsg.."]") end
end

function dump_table(tbl)
  for k,v in pairs(tbl) do
    if type(v)=="table" then
      get_console():execute("load ~~~ "..tostring(k).." => ")
      dump_table(v)
    else
		str="load ~~~ "..tostring(k).." => "..tostring(v)
		if string.len(str)>200 then
			str=string.sub(str,1,200)
		end
		get_console():execute(str)
    end
  end
  --get_console():execute("flush")
end

--[[
-- 	Zaspavnit item in your inventory to the actor.
-- 	@param     	string           sItemSection     	Section of the object that you want zaspavnit.
--]]
function amkCreateItemActor(sItemSection)
	if alife() and sItemSection then
		return alife():create(sItemSection, db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),db.actor:id())
	end
end

function amkDelObj(iId)
	local oSim = alife()
	if iId and oSim then
		local sobj = oSim:object(iId)
		if sobj then
			oSim:release(sobj)
		end
	end
end	



--[[
--	amkEnableDevice()
--	Enable device...
--	@param	integer	iLevelDevice	Level devaysa. (Needed for upgrade)
--]]
function amkEnableDevice(iLevelDevice)
	if oDevice or db.actor==nil or db.actor:alive()~=true then return end
	amkCreateItemActor("amk_transmutator")
	
	aArtsInfo = {}
	aRecsInfo = {}
	aRecSections = {}
	aArtsInventory = {}
	aInterval = {1,6}
	aRecInterval = {1,4}	
	local aid,apos,arad,adist=amk_anoms.get_nearest_anomaly(db.actor) 
	if aid and arad - adist > -2 then
		local an = level.object_by_id(aid)
		if an then
			aAnomaly = an:name()
			aAnomId = aid
		end	
	end
	-- if near is an anomaly, we fill the table with recipes
	if aAnomaly then
		aRecipts,anomaly_name = amk_mod.fill_recepti_est(aAnomaly)
		aReciptsHave = {}
		if type(aRecipts)=="table" then
			-- dump_table(aRecipts)	
			local uje_est = false
			for info, recept in pairs(aRecipts) do
				if has_alife_info(info) then -- in HS have this recipe: stored in a table
					aReciptsHave[info] = {}
					for k, v in pairs(recept) do -- copy recipe
						if type(v) == "table" then
							aReciptsHave[info][k] = {}
							for i, j in pairs(v) do
								aReciptsHave[info][k][i] = j
							end
						else
							aReciptsHave[info][k] = v
						end
						if k == "cel" then
							--uje_est = false
							for m, n in pairs(v) do
								-- get_console():execute("load ~#I#:"..string.format(" aRecSections: "..m))
								uje_est = false
								for i=1, table.getn(aRecSections) do
									if aRecSections[i] == m then
										uje_est = true
									end
								end
								if not uje_est then
									table.insert(aRecSections,m)								
								end
								-- break
							end
						end
					end
				end
			end
		end
		if type(aReciptsHave)=="table" then
			-- amk.dump_table(aReciptsHave)
		end
--[[		if type(aRecSections)=="table" then
			amk.dump_table(aRecSections)
		end]]
	end
	CAmkMergerArtefact()
	oDevice = CAmkDeviceTransmutator(iLevelDevice)
	level.start_stop_menu(oDevice, true)
end

--[[
--	amkDisableDevice()
--	Disable device...
--]]
function amkDisableDevice()	
	if oRes then oDevice:DetachChild(oRes) end
	if oNotkomp then oDevice:DetachChild(oNotkomp) end
	oDevice	= nil
	aArtsInfo  = nil
	aRecsInfo = nil
	aRecSections = nil
	aArtsInventory 	= nil
	aInterval = nil
	aRecInterval = nil
	aAnomaly = nil
	aAnomId = nil
	iInfo = nil
	aReciptsHave = nil
	aRecipts = nil
	oRes = nil
	oNotkomp = nil
	for k,tbl in pairs(aScrollBar) do
		tbl.oSlot = nil
		tbl.iSectIndex = nil
	end
	for k,tbl in pairs(aCmpnSlots) do
		tbl.oSlot = nil
		tbl.iSectIndex = nil
	end
	for k,tbl in pairs(aRecBar) do
		tbl.oSlot = nil
		tbl.iSectIndex = nil
	end
end

function amkUseTransmutator(oItem)
	if oItem:section() == "amk_transmutator" then 
		amk.oAmkLauncher:AddFunc("UseTransmutator", "amkII_transmutator.amkEnableDevice(2)")
	end
end

function get_anom_name(str)
	local s_name
	if anomaly_name	~= nil then
		s_name = anomaly_name
	else
		-- s_name = "Recipes in Progress :) For "..str
		s_name = "Recipes in Progress :)"
	end
--[[	local i = 0
	local obj = alife():object(str)
	if obj then
		s_name = news_main.get_anomaly_name(obj,1)
		-- if s_name == nil or s_name == "" then
			s_name = s_name.." clsid: "..get_clsid(obj).." obj: "..str
		-- end	
	end]]
	return s_name
end

--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
-- *			               CAmkMergerArtefact 		                            *
--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

class "CAmkMergerArtefact"
function CAmkMergerArtefact:__init()
	self:IterateInventory()
	if table.getn(aArtsInventory) > 0 then
		self:SaveInfo("Inv")		
	end	
	if table.getn(aRecSections) > 0 then
		self:SaveInfo("Rec")
	end
end

--[[
--	IterateInventory()
--	Iterate through the inventory of the actor and the search in the artov.
--]]
function CAmkMergerArtefact:IterateInventory()
	db.actor:iterate_inventory(function(npc, item)
		-- if (item:clsid() == clsid.artefact or item:clsid() == clsid.artefact_s or amk_mod.is_komponent(item:section())) and not string.find(item:section(), "cocoon") then
		if amk_mod.is_komponent(item:section()) then		
			table.insert(aArtsInventory, item)
		end 
	end, db.actor)
end

--[[
--	SaveInfo(the name of the scrollbar)
--	Collect and store in the required form information artah and recipes.
--	@param	string	iBarName		Type scroll to save (inventory - "Inv" / retseptny - "Rec").
--]]
function CAmkMergerArtefact:SaveInfo(iBarName)
	local aTmpTbl = {}	
--	_log("*****   Scanning Artefacts   *****")
	local searchTbl, fillTbl
	if iBarName == "Inv" then
		searchTbl = aArtsInventory
		fillTbl = aArtsInfo
	else
		searchTbl = aRecSections
		fillTbl = aRecsInfo
	end
	for iKey, oArt in pairs(searchTbl) do
		local sSection = nil
		if iBarName == "Inv" then
			sSection = oArt:section()
		else
			sSection = oArt
		end
		if iBarName == "Rec" then
			-- _log("in pairs(searchTbl): sSection: "..sSection.." bar: "..iBarName)
		end
		if system_ini():section_exist(sSection) then			
			if not aTmpTbl[sSection] then
				aTbl = {}
				aTbl.iCount = 1
				aTbl.sSection = sSection
				aTbl.x = system_ini():r_u32(sSection, "inv_grid_x")
				aTbl.y = system_ini():r_u32(sSection, "inv_grid_y")
				aTbl.aArts = {}
				table.insert(aTbl.aArts, oArt)
				aTmpTbl[sSection] = aTbl
			elseif iBarName == "Inv" then
				aTbl = aTmpTbl[sSection]
				aTbl.iCount = aTbl.iCount + 1
				table.insert(aTbl.aArts, oArt)
			end
		end
	end	
	for sKey, aValue in pairs(aTmpTbl) do
		table.insert(fillTbl, aValue)
	end
end




--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
-- *			               CAmkDeviceTransmutator 		                            *
--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

class "CAmkDeviceTransmutator" (CUIScriptWnd)
function CAmkDeviceTransmutator:__init(iLevelDevice) super()	
--	_log("*****   Initializing   *****")
	self.iLevelDevice = iLevelDevice
	self:InitInterface()	
	self:UpdScrollBar(aInterval[1], aInterval[2], "Inv")
	self:UpdScrollBar(aRecInterval[1], aRecInterval[2], "Rec")
end

function CAmkDeviceTransmutator:__finalize() 
end

--[[
--	InitInterface()
--	Initialization of the window and static controls.
--]]
function CAmkDeviceTransmutator:InitInterface()
	local xml = CScriptXmlInit()
	xml:ParseFile("ui_transmutator.xml")
	self:Init(grid,grid,531,359)
	--[[
	--	CUIStatic()
	--	Attach a static element of 'background'.
	--]]
	xml:InitStatic("transmutator_frame", self) -- aleks1970 and below
	self.oBackGround = CUIStatic()
    self.oBackGround:SetWindowName("oBackGround") 
    self.oBackGround:SetAutoDelete(true)
--	self.oBackGround:InitTexture("ui\\amk_transmutator")
--	self.oBackGround:SetOriginalRect(3,7,531,359)
--	self.oBackGround:Init(3,7,531,359)
    self:AttachChild(self.oBackGround)
	--[[
	--	CUIButton()
	--	Tack cleaning panel components for cooking.
	--]]
	local xml = CScriptXmlInit()  -- aleks1970 and below
	xml:ParseFile("ui_transmutator.xml")	
	self.oButtonClear = CUI3tButton()
	self:Register(xml:Init3tButton("transmutator_clear_button", self), "oButtonClear")
	self.oButtonClear:SetWindowName("oButtonClear")  
	self.oButtonClear:SetAutoDelete(true)
--	self.oButtonClear:InitTexture("ui\\amk_transmutator")
--	self.oButtonClear:SetOriginalRect(248,365,23,39)
--	self.oButtonClear:Init(420,62,23,39)
--	self:Register(self.oButtonClear, "oButtonClear")
    self:AttachChild(self.oButtonClear)
    self:AddCallback("oButtonClear", ui_events.BUTTON_CLICKED, self.ClearSlots, self)
	--[[
	--	CUIButton()
	--	Attach a text indicator anomalies.
	--]]		
	self.oaAnomaly = CUIStatic()
	self.oaAnomaly:SetWindowName("oaAnomaly")
	self.oaAnomaly:SetAutoDelete(true)
	if aAnomaly~=nil then
		self.oaAnomaly:SetText(translate("Anomaly_transmutator_script").." "..get_anom_name(tostring(aAnomaly)))
	else
		self.oaAnomaly:SetText("")
	end
	self.oaAnomaly:SetTextColor(255,168,230,29)
	self.oaAnomaly:SetFont(GetFontGraffiti22Russian())	 		
    self.oaAnomaly:Init(71,133,500,25)
    self:AttachChild(self.oaAnomaly)
	--[[
	--	CUIButton()
	--	Tack completion raboty'vyhod '.
	--]]
	local xml = CScriptXmlInit() -- aleks1970 and below
	xml:ParseFile("ui_transmutator.xml")
	self.oButtonQuit = CUI3tButton()
	self:Register(xml:Init3tButton("transmutator_quit_button", self), "oButtonQuit")
	self.oButtonQuit:SetWindowName("oButtonQuit")  
	self.oButtonQuit:SetAutoDelete(true)
	self.oButtonQuit:SetTextAlign(CGameFont.alCenter)
--	self.oButtonQuit:InitTexture("ui\\amk_transmutator")
--	self.oButtonQuit:SetOriginalRect(124,393,92,25)
--	self.oButtonQuit:SetText("Output")
--	self.oButtonQuit:SetTextColor(255,0,0,0)
--	self.oButtonQuit:SetFont(GetFontGraffiti19Russian())
--	self.oButtonQuit:Init(406,302,92,25)
--	self:Register(self.oButtonQuit, "oButtonQuit")
    self:AttachChild(self.oButtonQuit)
    self:AddCallback("oButtonQuit", ui_events.BUTTON_CLICKED, self.Quit, self)
	
	--[[
	--	CUIButton()
	--	Attach button to start transmutatsii'start '.
	--]]		
	self.oButtonStart = CUI3tButton() -- aleks1970 and below
	self:Register(xml:Init3tButton("transmutator_start_button", self), "oButtonStart")
	self.oButtonStart:SetWindowName("oButtonStart")  
	self.oButtonStart:SetAutoDelete(true)
	self.oButtonStart:SetTextAlign(CGameFont.alCenter)
--	self.oButtonStart:InitTexture("ui\\amk_transmutator")
--	self.oButtonStart:SetOriginalRect(124,393,92,25)		
--	self.oButtonStart:SetText("Start")
--	self.oButtonStart:SetTextColor(255,0,0,0)
--	self.oButtonStart:SetFont(GetFontGraffiti19Russian())
--	self.oButtonStart:Init(189,302,92,25)	
    self:AttachChild(self.oButtonStart)
    self:AddCallback("oButtonStart", ui_events.BUTTON_CLICKED, self.Start, self)
	--[[
	--	CUIButton()
	--	Attach button control scrollbars 'left'.
	--]]		
	self.oButtonPrevLeft = CUI3tButton() -- aleks1970 and below
	self:Register(xml:Init3tButton("transmutator_PrevLeft_button", self), "oButtonPrevLeft")
	self.oButtonPrevLeft:SetWindowName("oButtonPrevLeft")  
	self.oButtonPrevLeft:SetAutoDelete(true)
--	self.oButtonPrevLeft:InitTexture("ui\\amk_transmutator")
--	self.oButtonPrevLeft:SetOriginalRect(9,393,39,23)
--	self.oButtonPrevLeft:Init(24,167,39,23)	
    self:AttachChild(self.oButtonPrevLeft)
    self:AddCallback("oButtonPrevLeft", ui_events.BUTTON_CLICKED, self.PreviewScrollLeft, self)
	--[[
	--	CUIButton()
	--	Attach button control scrollbars 'right'.
	--]]	
	self.oButtonPrevRight = CUI3tButton() -- aleks1970 and below
	self:Register(xml:Init3tButton("transmutator_PrevRight_button", self), "oButtonPrevRight")
	self.oButtonPrevRight:SetWindowName("oButtonPrevRight")  
	self.oButtonPrevRight:SetAutoDelete(true)
--	self.oButtonPrevRight:InitTexture("ui\\amk_transmutator")
--	self.oButtonPrevRight:SetOriginalRect(52,393,39,23)
--	self.oButtonPrevRight:Init(404,167,39,23)	
    self:AttachChild(self.oButtonPrevRight)
    self:AddCallback("oButtonPrevRight", ui_events.BUTTON_CLICKED, self.PreviewScrollRight, self)
	--[[
	--	CUIButton()
	--	Attach the control button RetseptBarom 'left'.
	--]]		
	self.oButtonRecLeft = CUI3tButton() -- aleks1970 and below
	self:Register(xml:Init3tButton("transmutator_RecLeft_button", self), "oButtonRecLeft")
	self.oButtonRecLeft:SetWindowName("oButtonRecLeft")  
	self.oButtonRecLeft:SetAutoDelete(true)
--	self.oButtonRecLeft:InitTexture("ui\\amk_transmutator")
--	self.oButtonRecLeft:SetOriginalRect(9,393,39,23)
--	self.oButtonRecLeft:Init(24,246,39,23)	
    self:AttachChild(self.oButtonRecLeft)
    self:AddCallback("oButtonRecLeft", ui_events.BUTTON_CLICKED, self.ReceptScrollLeft, self)
	--[[
	--	CUIButton()
	--	Attach the control button RetseptBarom 'right'.
	--]]	
	self.oButtonRecRight = CUI3tButton() -- aleks1970 and below
	self:Register(xml:Init3tButton("transmutator_RecRight_button", self), "oButtonRecRight")
	self.oButtonRecRight:SetWindowName("oButtonRecRight")  
	self.oButtonRecRight:SetAutoDelete(true)
--	self.oButtonRecRight:InitTexture("ui\\amk_transmutator")
--	self.oButtonRecRight:SetOriginalRect(52,393,39,23)
--	self.oButtonRecRight:Init(404,246,39,23)	
    self:AttachChild(self.oButtonRecRight)
    self:AddCallback("oButtonRecRight", ui_events.BUTTON_CLICKED, self.ReceptScrollRight, self)
end

--[[
--	UpdScrollBar(iStartIndex, iFinalIndex, iBarName)
--	Initialize the elements of our pseudo-scrollbar.
--	@param	integer	iStartIndex	Starting index for the table of artifacts.
--	@param	integer	iFinalIndex	The final index for the table of artifacts.
--	@param	string	iBarName		Type scroll to update (inventory - "Inv" / retseptny - "Rec").
--]]
function CAmkDeviceTransmutator:UpdScrollBar(iStartIndex, iFinalIndex, iBarName)
	local iCurrentButton = 0
	for iSectIndex = iStartIndex, iFinalIndex do
		local aButton, aSectInfo
		iCurrentButton = iCurrentButton + 1
		if iBarName == "Inv" then
			aButton = aScrollBar[iCurrentButton]
			aSectInfo = aArtsInfo[iSectIndex]
		elseif iBarName == "Rec" then
			aButton = aRecBar[iCurrentButton]
			aSectInfo = aRecsInfo[iSectIndex]
		end
		--[[
		--	Clear button object from the table of visible items.
		--]]
		if aButton.oSlot then
			self:DetachChild(aButton.oSlot)
			aButton.oSlot = nil
		end
		--[[
		--	Complete the update if there is no scroll
		--	elements to be initialized.
		--]]		
		if not aSectInfo then
			return
		end
		--[[
		--	Obtain the position of the icons.
		--]]			 
		local x = aSectInfo.x * grid
		local y = aSectInfo.y * grid
		--[[
		--	Create pseudo-art slot.
		--]]				
		local oScrollButton = CUIButton()
		oScrollButton:SetWindowName("oScrollButton"..iSectIndex..iBarName)
		oScrollButton:SetAutoDelete(true)	
		if aSectInfo.iCount ~= 0 then
			oScrollButton:InitTexture("ui\\ui_icon_equipment")
			oScrollButton:SetOriginalRect(x, y, aButton.wt, aButton.hg)
		end		
		if aSectInfo.iCount > 1 then
			oScrollButton:SetText(tostring(aSectInfo.iCount))
			oScrollButton:SetTextColor(255,168,230,29)
			oScrollButton:SetFont(GetFontGraffiti32Russian())
		end	 		
		oScrollButton:Init(aButton.x, aButton.y, aButton.wt, aButton.hg)
		self:AttachChild(oScrollButton)
		local sFuncString = "amkII_transmutator.oDevice:AddArtefact("..iSectIndex..",\""..iBarName.."\")"
		self:AddCallback("oScrollButton"..iSectIndex..iBarName, ui_events.BUTTON_CLICKED, loadstring(sFuncString), self)
		aButton.oSlot = oScrollButton	
	end
end

--[[
--	PreviewScrollLeft()
--	Browse the scrollbar to the left.
--]]
function CAmkDeviceTransmutator:PreviewScrollLeft()
	if aArtsInfo[aInterval[1] - 1] and aArtsInfo[aInterval[2] - 1] then
		aInterval = {aInterval[1] - 1, aInterval[2] - 1}
		self:UpdScrollBar(aInterval[1], aInterval[2], "Inv") -- inventory scrollbar
	end
end

--[[
--	PreviewScrollRight()
--	Browse the scrollbar to the right.
--]]
function CAmkDeviceTransmutator:PreviewScrollRight()
	if aArtsInfo[aInterval[1] + 1] and aArtsInfo[aInterval[2] + 1] then
		aInterval = {aInterval[1] + 1, aInterval[2] + 1}
		self:UpdScrollBar(aInterval[1], aInterval[2], "Inv") -- inventory scrollbar
	end
end

--[[
--	ReceptScrollLeft()
--	Browse RetseptBar left.
--]]
function CAmkDeviceTransmutator:ReceptScrollLeft()
	if aRecsInfo[aRecInterval[1] - 1] and aRecsInfo[aRecInterval[2] - 1] then
		aRecInterval = {aRecInterval[1] - 1, aRecInterval[2] - 1}
		self:UpdScrollBar(aRecInterval[1], aRecInterval[2], "Rec") -- recipts bar
	end
end

--[[
--	ReceptScrollRight()
--	Browse RetseptBar right.
--]]
function CAmkDeviceTransmutator:ReceptScrollRight()
	if aRecsInfo[aRecInterval[1] + 1] and aRecsInfo[aRecInterval[2] + 1] then
		aRecInterval = {aRecInterval[1] + 1, aRecInterval[2] + 1}
		self:UpdScrollBar(aRecInterval[1], aRecInterval[2], "Rec") -- recipts bar
	end
end

--[[
--	OnKeyboard(DIK, KeyboardAction)
--	Windy keys to control.
--]]
function CAmkDeviceTransmutator:OnKeyboard(DIK, KeyboardAction)
	CUIScriptWnd.OnKeyboard(self, DIK, KeyboardAction)
	if KeyboardAction == ui_events.WINDOW_KEY_PRESSED then
		if DIK == DIK_keys.DIK_ESCAPE then
			self:Quit()
		end
	end
	return true
end

--[[
--	InitResultButton(sArtSection)
--	Initialize slot for the result of transmutation.
--	@param	string	sArtSection	Section of the artifact, the result of transmutation.
--]]
function CAmkDeviceTransmutator:InitResultButton(sArtSection)	
	local ini = system_ini()	
	if ini:section_exist(sArtSection) then
		
		--	Obtain the coordinates for the icons.
		--
		local x = ini:r_u32(sArtSection, "inv_grid_x") * grid
		local y = ini:r_u32(sArtSection, "inv_grid_y") * grid
		--[[
		--	Obtain the coordinates for the icons..
		--
		--self.oButtonResult = CUIButton()]]	
		oRes = CUIButton()	
		oRes:SetWindowName("oButtonResult")  
		oRes:SetAutoDelete(true)	
		oRes:InitTexture("ui\\ui_icon_equipment")
		oRes:SetOriginalRect(x, y, grid, grid)		
		oRes:Init(430, 69, grid, grid)
		self:AttachChild(oRes)
		self:AddCallback("oButtonResult", ui_events.BUTTON_CLICKED, self.UpdateDevice, self)	
--		_log("... Init oButtonResult")
	end			
end

function CAmkDeviceTransmutator:UpdateDevice()	
	aArtsInfo		= {}
	aArtsInventory 	= {}
	aRecsInfo		= {}
	aRecSections	= {}	
	aInterval		= {1,6}
	aRecInterval	= {1,4}
	CAmkMergerArtefact()
	
	self:DetachChild(oRes)
	oRes = nil
	self:DetachChild(oNotkomp)
	oNotkomp = nil
	
	for k,tbl in pairs(aScrollBar) do
		if tbl.oSlot then
			self:DetachChild(tbl.oSlot)
			tbl.oSlot = nil
		end
		tbl.iSectIndex = nil
	end
	for k,tbl in pairs(aCmpnSlots) do
		if tbl.oSlot then
			self:DetachChild(tbl.oSlot)
			tbl.oSlot = nil
		end
		tbl.iSectIndex = nil
	end
	for k,tbl in pairs(aRecBar) do
		if tbl.oSlot then
			self:DetachChild(tbl.oSlot)
			tbl.oSlot = nil
		end
		tbl.iSectIndex = nil
	end
	amk.oAmkLauncher:AddFunc("UseTransmutator", "amkII_transmutator.amkEnableDevice(2)")
	self:UpdScrollBar(aInterval[1], aInterval[2], "Inv")
	self:UpdScrollBar(aRecInterval[1], aRecInterval[2], "Rec")
end

--[[
--	AddArtefact(index partition in a table component name scroll)
--	Add an artifact to the panel of active ingredients.
--	@param	integer	iSectIndex	The index section artifact to be added into the slot.
--	@param	string	iBarName		Type scroll to update (inventory - "Inv" / retseptny - "Rec").
--]]
function CAmkDeviceTransmutator:AddArtefact(iSectIndex, iBarName)	
	if oRes ~= nil then
		self:UpdateDevice()
		return
	end
	local aSectInfo
	if iBarName == "Inv" then
		aSectInfo = aArtsInfo[iSectIndex]
	else -- "Rec"
		amkII_transmutator.oDevice:ClearSlots()
		txtNotkomp = ""
		txtVremya  = ""
		if oNotkomp then oDevice:DetachChild(oNotkomp) end
		oNotkomp = nil
		aSectInfo = aRecsInfo[iSectIndex]
	end
	if aSectInfo.iCount == 0 then
		return
	end
	--[[
	--	We iterate on the components panel and look for the vacant slot.
	--]]
	if iBarName == "Inv" then
		local x,y
		local oCmpnSlot = nil
		local sFuncString = ""
		for iKey, aButton in pairs(aCmpnSlots) do
			if aButton.oSlot == nil then
				aSectInfo.iCount = aSectInfo.iCount - 1
				--[[
				--	Obtain the coordinates of the icons.
				--]]			
				x = aSectInfo.x * grid
				y = aSectInfo.y * grid
				--[[
				--	Initialize pseudo slot. (Click)
				--]]				
				oCmpnSlot = CUIButton()
				oCmpnSlot:SetWindowName("oCmpnSlot"..iKey)  
				oCmpnSlot:SetAutoDelete(true)		
				oCmpnSlot:InitTexture("ui\\ui_icon_equipment")
				oCmpnSlot:SetOriginalRect(x,y,grid,grid)
				oCmpnSlot:Init(aButton.x, aButton.y, aButton.wt, aButton.hg)	
				self:AttachChild(oCmpnSlot)
				sFuncString = "amkII_transmutator.oDevice:DelArtefact("..iKey..")"
				self:AddCallback("oCmpnSlot"..iKey, ui_events.BUTTON_CLICKED, loadstring(sFuncString), self)
	--			_log("... Init oCmpnSlot"..iKey)
				--[[
				--	Save the data.
				--]]	
				aButton.oSlot = oCmpnSlot
				aButton.iSectIndex = iSectIndex
				--[[
				--	Update scrollbar.
				--]]	
				self:UpdScrollBar(aInterval[1], aInterval[2], "Inv")				
				break
			end
		end
	else
		-- amk.dump_table(aReciptsHave)
		local ini = system_ini()
		local tblNotKomp = {}
		local CountLostKomp = 0
		local txTime = ""
		local time_var
		for info, recept in pairs(aReciptsHave) do
			if aReciptsHave[info]["cel"][aSectInfo.sSection] then
				-- _log("... aReciptsHave[info][cel]: "..aSectInfo.sSection)
				for aSect, k in pairs(aReciptsHave[info]["komp"]) do
					if system_ini():section_exist(aSect) then
						for i=1, table.getn(aArtsInfo) do						
							if aArtsInfo[i]["sSection"] == aSect and aArtsInfo[i]["iCount"] ~= 0 then
								-- _log("... aArtsInfo["..i.."][iCount]: "..tostring(aArtsInfo[i]["iCount"]).." "..translate(amk.get_inv_name(aSect)))
								self:AddArtefact(i,"Inv")
								aReciptsHave[info]["komp"][aSect] = "added"
							end
						end
					end
				end
				for cSect, m in pairs(aReciptsHave[info]["komp"]) do
--[[					if aReciptsHave[info]["komp"][cSect] ~= "added" then
						CountLostKomp = CountLostKomp + 1
						local str = translate(amk.get_inv_name(cSect))
						if txtNotkomp == "" then
							txtNotkomp = str
						else
							txtNotkomp = txtNotkomp..", "..str
						end
					end]]--
					if aReciptsHave[info]["komp"][cSect] ~= "added" then
						table.insert(tblNotKomp, translate(amk.get_inv_name(cSect)))
					end
				end
				if CountLostKomp == 0 then -- have all the ingredients and a recipe, watch the cooking
					time_var = amk_mod.get_af_transform_param("vremya", aReciptsHave[info], aReciptsHave)
					if type(time_var) == "table" then
						if time_var[1] ~= 0 then
							txTime = time_var[1].." secs "
						end
						if time_var[2] ~= 0 then
							txTime = txTime.." "..time_var[2].." hours "
						end
						if time_var[3] ~= 0 then
							txTime = txTime.." "..time_var[3].." minutes"
						end
					end
					txtVremya = txTime
					end
				if type(tblNotKomp) == "table" then
					txtNotkomp = table.concat(tblNotKomp, ", ")
				end
			end
		end
		-- show a string of missing components
		if string.len(txtNotkomp) > 0 then
			oNotkomp = CUIStatic()
			oNotkomp:SetWindowName("oNotkomp")
			oNotkomp:SetAutoDelete(true)
			oNotkomp:SetText(translate("No_Com_Found_trans_script").." "..tostring(txtNotkomp))
			oNotkomp:SetTextColor(255,255,0,0)
			oNotkomp:SetFont(GetFontGraffiti19Russian())
			oNotkomp:Init(30,118,470,20)
			self:AttachChild(oNotkomp)			
			--sound_object("device\pda\pda_sos"):play_at_pos(db.actor, db.actor:position())
		-- shows lines of time cooking the recipe
		elseif string.len(txtVremya) > 0 then
			oNotkomp = CUIStatic()
			oNotkomp:SetWindowName("oNotkomp")
			oNotkomp:SetAutoDelete(true)
			oNotkomp:SetText(translate("Recipe_Cooking_transmutator_script").." "..tostring(txtVremya))
			oNotkomp:SetTextColor(255,0,255,0)
			oNotkomp:SetFont(GetFontGraffiti19Russian())
			oNotkomp:Init(140,118,470,20)
			self:AttachChild(oNotkomp)
		end
	end
end

--[[
--	ClearSlots()
--	Cleaning the panel components for cooking.
--]]
function CAmkDeviceTransmutator:ClearSlots()
	for iKey, aButton in pairs(aCmpnSlots) do
		if aCmpnSlots[iKey] ~=nil then
			amkII_transmutator.oDevice:DelArtefact(iKey)
		end
	end
end

--[[
--	DelArtefact(iCmpnSlotIndex)
--	Remove the artifact from the components panel.
--	@param	integer	iSectIndex	The index of the slot panel components.
--	@param	string	iBarName		Type scroll to update (inventory - "Inv" / retseptny - "Rec").
--]]
function CAmkDeviceTransmutator:DelArtefact(iCmpnSlotIndex)
	aButton = aCmpnSlots[iCmpnSlotIndex]
	aSectInfo = aArtsInfo[aButton.iSectIndex]
	--[[
	--	If the slot is active, it disables it.
	--]]
	if aButton.oSlot then
		self:DetachChild(aButton.oSlot)
		aSectInfo.iCount = aSectInfo.iCount + 1
		aButton.iSectIndex = nil
		aButton.oSlot = nil
		self:UpdScrollBar(aInterval[1], aInterval[2], "Inv")
	end
	if oNotkomp then
		self:DetachChild(oNotkomp)
		oNotkomp = nil
		txtNotkomp = ""
		txtVremya  = ""
	end
end

--[[
--	Quit()
--	Exit.
--]]
function CAmkDeviceTransmutator:Quit()
	amkDisableDevice()
	self:GetHolder():start_stop_menu(self,true)
end

--[[
--	Start()
--	Home transmutation.
--]]
function CAmkDeviceTransmutator:Start()
	-- local aCmpnButtons = {aCmpnSlots[1], aCmpnSlots[2], aCmpnSlots[3], aCmpnSlots[4]}
	-- with empty slots, components, and outside the anomaly does not start the
	if not aAnomaly then return end
	local count = 0
	for i=1, table.getn(aCmpnSlots) do
		if aCmpnSlots[i] and aCmpnSlots[i].oSlot~=nil and aCmpnSlots[i].iSectIndex~=nil then
			count=count+1
		end
	end
	if count == 0 then return end
--[[	for iKey, aButton in pairs(aCmpnButtons) do
		if aButton.oSlot == nil or aButton.iSectIndex == nil then
			return
		end
	end]]
	--[[
	--	Try to transmute the artifacts.
	--]]
	CAmkTransmutacion()
end


--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
-- *			               CAmkTransmutacion 		                                       *
--* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

class "CAmkTransmutacion"

--[[
--	__init()
--	The class constructor.
--]]
function CAmkTransmutacion:__init()
--	_log("*****   Transmutation   *****")
	-- self.ini = ini_file("scripts\\transmutator_schemes.ltx")
	-- self.aSchemes = self:iniData()
	self.sTransmutants = self:SearchSchemes()
	if self.sTransmutants ~= nil then
		self:CreateAtrefact()
	else
-- hews:)
		self:Shooting()
	end
end

--[[
--	iniData()
--	Reads data from the ini file.
--]]
--[[function CAmkTransmutacion:iniData()
	if self.ini:section_exist("schemes") then
		local result, id, value = nil, nil, nil
		local aSchemes = {}
		for index = 0, self.ini:line_count("schemes")-1 do
			result, id, value = self.ini:r_line("schemes",index,"","")
			if id~="" and id~=nil then
				table.insert(aSchemes, id)
			end
		end
		return aSchemes
	end
	return nil
end]]

--[[
--	SearchSchemes()
--	Searching for the perfect transmutation schemes.
--]]
function CAmkTransmutacion:SearchSchemes()
	local sTransmutants
--[[	if self.aSchemes~=nil and table.getn(self.aSchemes) < 1 then
		return
	end]]
--[[	local function sSort(a,b)
		return (a > b)
	end]]
--[[	local aCmpnSects = {
		aArtsInfo[aCmpnSlots[1].iSectIndex].sSection,
		aArtsInfo[aCmpnSlots[2].iSectIndex].sSection, 
		aArtsInfo[aCmpnSlots[3].iSectIndex].sSection,
		aArtsInfo[aCmpnSlots[4].iSectIndex].sSection		
	}]]
	local aCmpnSects = {}
	for iKey, aButton in pairs(aCmpnSlots) do
		if aCmpnSlots[iKey].iSectIndex ~= nil then
			table.insert(aCmpnSects, aArtsInfo[aCmpnSlots[iKey].iSectIndex].sSection)
		end
	end
	-- table.sort(aCmpnSects,sSort)
	-- if aAnomaly then
		-- dump_table(aCmpnSects)
		-- result = amk_mod.check_komp(aAnomaly,aCmpnSects)
		numArts = table.getn(aCmpnSects)
		local count
		local af = nil
		for info, recept in pairs(aRecipts) do
			count = 0
			for k,v in pairs(aRecipts[info]["komp"]) do
				-- believe how many components in the recipe
				count = count + 1
			end
			if count == numArts then
				for i=1, numArts do
					af = aCmpnSects[i]			
					if not aRecipts[info]["komp"][af] then
						break
					end
					if i == count then 
						sTransmutants = aRecipts[info]["cel"] --sifted through all the arts and is the result of
						-- dump_table(sTransmutants)
						iInfo = info
					end
				end
			end
		end
	-- end
	return sTransmutants
end

--[[
--	CreateAtrefact()
--	Creating an artifact transmutanta.
--]]
function CAmkTransmutacion:CreateAtrefact()
	-- collect a plate prepared for cooking ingredients
	local komp = {}
	local cel = {}
	local aButton = nil
	local aArtInfo = nil
	local oObject = nil
	local obj_sect = nil
	for i = 1, table.getn(aCmpnSlots) do
		if aCmpnSlots[i].iSectIndex ~= nil then
			aButton = aCmpnSlots[i]
			aArtInfo = aArtsInfo[aButton.iSectIndex]
			--[[
			--	Pull the artifact from the base components.
			--]]
			oObject = aArtInfo.aArts[table.getn(aArtInfo.aArts)]
			obj_sect = oObject:section()
-- [[			table.insert(komp, oObject:id())
			-- komp[obj_sect] = oObject:id()
			-- aRecipts[iInfo]["komp"][obj_sect] = oObject:id()]]
			-- _log("... Deletion Artefact["..i.."] ID : "..oObject:id().." section : "..obj_sect)
			table.remove(aArtInfo.aArts, table.getn(aArtInfo.aArts))
			--[[
			--	Remove the artifact and the clear slot.
			--]]
			amkDelObj(oObject:id())
			oDevice:DetachChild(aButton.oSlot)
			aCmpnSlots[i].iSectIndex = nil
			aCmpnSlots[i].oSlot = nil
		end
	end

	local cel				= self.sTransmutants
	local komp 				= aRecipts[iInfo]["komp"]
	local v_udachi 			= amk_mod.get_af_transform_param("v_udachi", aRecipts[iInfo], aRecipts)
	local v_virogd 			= amk_mod.get_af_transform_param("v_virogd", aRecipts[iInfo], aRecipts)
	local virogd 			= amk_mod.get_af_transform_param("virogd", aRecipts[iInfo], aRecipts)
	local vremya 			= amk_mod.get_af_transform_param("vremya", aRecipts[iInfo], aRecipts)
	local remove_anomaly 	= amk_mod.get_af_transform_param("remove_anomaly", aRecipts[iInfo], aRecipts)
	local remove_anomaly_id = aAnomId
	local result, udacha 	= amk_mod.af_select_result(v_udachi, v_virogd, virogd, cel, komp)
--     local info                = aRecipts[iInfo]["info"]
	local info              = iInfo
	local lv 				= db.actor:level_vertex_id()
	local gv 				= db.actor:game_vertex_id()
	local pos 				= db.actor:position()	
	
	if cel == nil or v_udachi == nil or v_virogd == nil
		or virogd == nil or vremya == nil or remove_anomaly == nil 
		or cel == nil and remove_anomaly == false
		or v_udachi + v_virogd > 100 then		
		-- curve of a recipe - leave
		oDevice:Quit()
	end

	-- failure
	if udacha == false then
		remove_anomaly = false
		info = nil
	end
	level.add_pp_effector("teleport.ppe", 1524, false)

	amk_mod.as_start_universal_transform_timer(komp, result, pos, vremya, gv, lv, info, remove_anomaly, remove_anomaly_id)
	
	-- in case you want to cook the same art (for correct strings missing components)
	if aReciptsHave[iInfo] then
		for cSect, m in pairs(aReciptsHave[iInfo]["komp"]) do
			if aReciptsHave[iInfo]["komp"][cSect] == "added" then
				aReciptsHave[iInfo]["komp"][cSect] = true
			end
		end
	end
	-- alife():create(self.sTransmutant, db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
--	_log("... Creating Artefact : "..self.sTransmutant)
	-- oDevice:InitResultButton(self.sTransmutant)
	-- oDevice:Quit()
end

--[[
--	Shooting()
--	Dolbonut actor because of that device in the shove all that horrible.
--]]
function CAmkTransmutacion:Shooting()
--	_log("Schemes not Found")
	oDevice:Quit()
	level.add_pp_effector("blink.ppe", 234, false)
	local posActor = db.actor:position()
	particles_object("anomaly2\\electra2_blast"):play_at_pos(posActor)
	sound_object("anomaly\\electra_blast1"):play_at_pos(db.actor, posActor)
	if TB3D_Modders.mutator_hit == true then
		TB3D_hit_styles.shock(db.actor, db.actor, 0.3, 0, vector():set(0,0,0))
	end
end
