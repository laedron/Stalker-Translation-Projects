--TB3D 1.1.0.0.1.0 replaced debug flags, added my_ver, switch online, companion, brain update, companion moved, generators_udav, opt
function my_ver() return "1.1.0.0.1.0" end
--[[
Changes script_version:
  3 - conservation field job_online
  5 - conservation field was_in_smart_terrain
  6 - conservation field death_droped
]]
local string_find = string.find

class "se_stalker"  (cse_alife_human_stalker)

--------------------
function se_stalker:__init (section) super (section)
	self.ini = nil
	self.ini_initialized = false
	self.spawner_present = false
	self.smart_terrain_conditions = nil
	self.smart_terrain_conditions_initialized = false
	-- This flag is taken from the work of Smart
	-- true     = always online
	-- false    = always online!
	-- condlist = condition that is true or false otpredelyaet
	-- nil      = smart anyway
	self.job_online          = nil
	self.job_online_condlist = nil
	-- attended a stalker at least one smart_terrain
	self.was_in_smart_terrain = false
	self.death_droped = false --'Generates a character drop items or not.
	self.dont_spawn_online = false  --TB3D_Modders.test_without_npc or false
end

--------------------
function se_stalker:get_ini()
  if not self.ini_initialized then
    self.ini             = self:spawn_ini ()
    self.ini_initialized = true
    if self.ini:section_exist("spawner") then
      self.spawner = xr_logic.parse_condlist(db.actor, "spawner", "cond", self.ini:r_string("spawner", "cond"))
    end
  end
end

--------------------
function se_stalker:get_job_online(parent)
	--if TB3D_Modders.use_smh3_message == true then TB3D_Services.packet_alert("se stalker:  get job online") end
  if self.job_online_condlist == nil then
	local state = self.job_online
    return state
  else
	local sect = xr_logic.pick_section_from_condlist(db.actor, self, self.job_online)
	return sect ~= nil
  end
end

--------------------
function se_stalker:can_switch_offline()
	local result = false
	local is_report = false
	if TB3D_Modders.use_state_message and string_find(self:name(), TB3D_Modders.npc_to_log) then is_report = true end
	if is_report then
		TB3D_Services.packet_alert("se stalker: ["..self:name().."]  can switch offine?")
	end
	if string_find(self:name(), "generators_udav") and not has_alife_info("udav_pabota_ok_start") then			--109988
		result = false
	elseif amk.convert_npc[self.id]==true then  	--110001
		result = true 
	--dc-- elseif amk.convert_npc[self.id]==false then
		--  return false
	elseif self.job_online_condlist ~= nil then
		result = not (xr_logic.pick_section_from_condlist(db.actor, self, self.job_online) ~= nil)
	elseif self.job_online ~= nil then
		result = not self.job_online
	else
		result = cse_alife_human_stalker.can_switch_offline(self)
	end
	if is_report then
		TB3D_Services.packet_alert("se stalker: ["..self:name().."] can switch offline["..utils.to_str(result).."]")
	end
	return result
end

--------------------
local without_npc = TB3D_Modders.test_without_npc					--110010, local is faster
function se_stalker:can_switch_online()
	local result = false								--assume no
	if without_npc then
		if TB3D_Modders.pop_spawn_message then TB3D_Services.packet_alert("SE STALKER: cso["..self:name().."] blocked!!!!") end		--110007
		self.dont_spawn_online = true
	elseif not self.dont_spawn_online then
		if TB3D_Population_Control.stalker_can_go_online(self) then
			--TB3D_Services.packet_alert("se stalker: ["..self:name().."] can switch online")
			-- local ecolog=string.find(self:name(),"bar_ecolog")
			-- if ecolog then TB3D_Services.packet_alert("chp1 "..self:name()) end
			-- if ecolog then amk.dump_table(self.spawner) end
			if amk.convert_npc[self.id]==true then		--110001
				result = false
			--dc-- elseif amk.convert_npc[self.id]==false then
				-- result = true
			elseif self.job_online_condlist ~= nil then
				result = xr_logic.pick_section_from_condlist(db.actor, self, self.job_online) ~= nil
			elseif self.job_online ~= nil then
				result = self.job_online
			elseif self.ini == nil or self.spawner == nil then
				result = cse_alife_human_stalker.can_switch_online(self)
			elseif db.actor and db.actor:alive() == false then
				result = self.online
			elseif self.online == false then
				result = (xr_logic.pick_section_from_condlist(db.actor, self, self.spawner) ~= nil) and cse_alife_human_stalker.can_switch_online(self)
			elseif xr_logic.pick_section_from_condlist(db.actor, self, self.spawner) ~= nil then 
				result = true
			end
		end
	end
	if TB3D_Modders.use_setup_message and string_find(self:name(), TB3D_Modders.npc_to_log) then
		TB3D_Services.packet_alert("se stalker: ["..self:name().."] can switch online["..utils.to_str(result).."]")
	end
	return result
end

--------------------
function se_stalker:STATE_Write(packet)
	--TB3D_Services.abort_alert("se stalker: state write npc["..self:name().."] script ver["..self.script_version.."]")
  cse_alife_human_stalker.STATE_Write (self, packet)
  if self.job_online == true then										--bits 1 & 2, upper bits will be used in future
    packet:w_u8(0)
  elseif self.job_online == false then
    packet:w_u8(1)
  elseif self.job_online == nil then
    packet:w_u8(2)
  else																	-- normal condition
    packet:w_u8(3)
    packet:w_stringZ(self.job_online_condlist)
  end
  packet:w_bool(self.was_in_smart_terrain)
  local ddw=0  															-- We write the condition of the wounded.
  if self.death_droped then ddw = ddw + 1 end							-- upper bits are free
  if self.wounded then ddw = ddw + 2 end
  packet:w_u8(ddw)
end

--------------------
function se_stalker:STATE_Read(packet, size)
	cse_alife_human_stalker.STATE_Read (self, packet, size)
	--TB3D_Services.abort_alert("se stalker: state read npc["..self:name().."] script ver["..self.script_version.."]")
	if self.script_version >= 3 then
		local t = packet:r_u8()
		if t then t=bit_and(t,3) else t = 2 end								-- Reserve upper bits for future use
		if t == 0 then
		  self.job_online = true
		elseif t == 1 then
		  self.job_online = false
		elseif t == 2 then
		  self.job_online = nil
		else															-- normal condition
		  self.job_online_condlist = packet:r_stringZ()
		  self.job_online = xr_logic.parse_condlist(nil, "se_stalker:STATE_Read", "job_online", self.job_online_condlist)
		end
		if self.script_version >= 5 then
			self.was_in_smart_terrain = packet:r_bool()
			if self.script_version >= 6 then  							-- Read the condition of the wounded.
				local ddw = packet:r_u8()
				if ddw then
					self.death_droped = bit_and(ddw,1) == 1					-- upper bits are free
					self.wounded = bit_and(ddw,2) == 2
				else
					self.death_droped = false								--110007, set false
					self.wounded = false
				end
			end
		end
	end
end

--------------------
function se_stalker:on_before_register()
  self:fill_exclusives()
end

--------------------
function se_stalker:on_register()
	if TB3D_Modders.use_setup_message and string_find(self:name(), TB3D_Modders.npc_to_log) then TB3D_Services.packet_alert("se stalker on register["..utils.to_str(self:name()).."]") end
	-- We clean the restrictor
	local tbl=amk.read_stalker_params(self)
	tbl.crvu32u16u2={}
	amk.write_stalker_params(tbl,self)
	cse_alife_human_stalker.on_register( self )
	--if TB3D_Services.is_collector(70) then xr_companion.is_companion_se(self) end		--109950, 109978 moved to xr_motivator.update
  --if(actor_stats.add_to_ranking~=nil)then
    local community = self:community()
    if not(community == "zombied" or
       community == "monolith" or
       community == "arena_enemy")
    then
      actor_stats.add_to_ranking(self.id)
    end
  --end
  --' Registration in task manager
  task_manager.get_random_task():register_target(self)
--[[													--OGSE 109950   use?
	local smart_terrain_id = expendable_object
	local result, smt_id = pcall(smart_terrain.prot_smt_td,self)
	if result then
		smart_terrain_id = smt_id
	end	
]]--
  if self:alive() and self.brain then -- and self:smart_terrain_id() == expendable_object then			--109974
    self:brain():update()
  end
end

--------------------
function se_stalker:on_unregister()
	--TB3D_Services.packet_alert("se stalker: net destroy")
	if _g.is_disconnecting == false then			--109980
		if TB3D_Modders.use_destroy_message == true then TB3D_Services.packet_alert("se stalker: on unregister["..utils.to_str(self:name()).."]") end
		cse_alife_human_stalker.on_unregister(self)									--unregister in task manager
		--if TB3D_Modders.use_smh3_message == true then TB3D_Services.packet_alert("se stalker:  on unregister 2") end
		task_manager.get_random_task():unregister_target(self)
		--if TB3D_Modders.use_smh3_message == true then TB3D_Services.packet_alert("se stalker:  on unregister 3") end
		if actor_stats.remove_from_ranking ~= nil then
			local community = self:community()
			if rx_ai.IsTrader(self.npc) == false then 				--109981, community ~= "trader" then
				if TB3D_Modders.use_destroy_message == true then TB3D_Services.packet_alert("se stalker:  on unregister["..utils.to_str(self:name()).."] community["..utils.to_str(community).."] remove from ranking") end
				actor_stats.remove_from_ranking(self.id)
			end
		end
		local object_id = smart_terrain.get_strn(self.id)								--returns the obj or nil
		if object_id then
			if object_id.gulag then														--if smt and gulag then clear dead
				if TB3D_Modders.use_setup_message and string_find(self:name(), TB3D_Modders.npc_to_log) then
					TB3D_Services.packet_alert("se stalker: on_unregister["..utils.to_str(self:name()).."] clear dead!!!!!!!!")
				end
				object_id.gulag:clear_dead(obj_id)
			end
		elseif self.alive and self:alive() == false then
			TB3D_Services.packet_alert("se stalker: on_unregister["..utils.to_str(self:name()).."] relaese object!!!!!!!!")
			if self.object then alife():release(self.object) end
		end
		if TB3D_Modders.use_destroy_message == true then TB3D_Services.packet_alert("se stalker:  on unregister["..utils.to_str(self:name()).."] done") end
	end
	--TB3D_Services.packet_alert("se stalker: net destroy done")
end

--------------------
function se_stalker:on_spawn()
  cse_alife_human_stalker.on_spawn(self)
end

--------------------
function se_stalker:on_death(killer)
  cse_alife_human_stalker.on_death(self, killer)
end

--------------------
function se_stalker:fill_exclusives()
  self:get_ini()
  self.smart_terrain_conditions = smart_terrain.read_smart_terrain_conditions( self )
  if self.smart_terrain_conditions then
    for name, condlist in pairs(self.smart_terrain_conditions) do
      db.exclusives[name] = (db.exclusives[name] or 0) + 1
    end
  end
end

class "se_trader" (cse_alife_trader)
function se_trader:__init (section) super (section)
end
function se_trader:keep_saved_data_anyway()
  return true
end

function se_stalker:get_job_online_old()
	if TB3D_Modders.use_smh3_message == true then TB3D_Services.packet_alert("se stalker:  get job online old") end
  if self.job_online_condlist == nil then
    return self.job_online
  else
    return xr_logic.pick_section_from_condlist(db.actor, self, self.job_online) ~= nil
  end
end

--------------------
function se_stalker:can_switch_offline_old()
	local result = false
	--if TB3D_Modders.use_smh3_message == true then
		TB3D_Services.packet_alert("se stalker:	can switch offline old")
	--end
  if amk.convert_npc[self.id]==true then 	--110001
    result = true 
  --elseif amk.convert_npc[self.id]==false then
  --  return false
  elseif self:get_job_online_old() ~= nil then
    result = not self:get_job_online_old()
  else
    result = cse_alife_human_stalker.can_switch_offline(self)
  end
	--if TB3D_Modders.use_setup_message and string_find(self:name(), TB3D_Modders.npc_to_log) then
		TB3D_Services.packet_alert("se stalker: ["..self:name().."] can switch offline_old["..utils.to_str(result).."]")
	--end
	return result
end
--------------------
function se_stalker:can_switch_online_old()
	local result = false
	--if TB3D_Modders.use_smh3_message == true then
		TB3D_Services.packet_alert("se stalker:  can switch online old")
	--end
	-- local ecolog=string.find(self:name(),"bar_ecolog")
	-- if ecolog then TB3D_Services.packet_alert("chp1 "..self:name()) end
	-- if ecolog then amk.dump_table(self.spawner) end
	if TB3D_Population_Control.stalker_can_go_online(self) then --:name()) then
		if amk.convert_npc[self.id]==true then 		--110001
			result = false
		--elseif amk.convert_npc[self.id]==false then 
			-- return true
		elseif self:get_job_online_old() ~= nil then
			result = self:get_job_online_old()
		elseif self.ini == nil or self.spawner == nil then
			result = cse_alife_human_stalker.can_switch_online(self)
		elseif db.actor and db.actor:alive() == false then
			result = self.online
		elseif self.online == false then
			result = (xr_logic.pick_section_from_condlist(db.actor, self, self.spawner) ~= nil) and cse_alife_human_stalker.can_switch_online(self)
		elseif xr_logic.pick_section_from_condlist(db.actor, self, self.spawner) ~= nil then 
			result = true
		end  
	end
	--if TB3D_Modders.use_setup_message and string_find(self:name(), TB3D_Modders.npc_to_log) then
		TB3D_Services.packet_alert("se stalker: ["..self:name().."] can switch online_old["..utils.to_str(result).."]")
	--end
	return result
end
--------------------