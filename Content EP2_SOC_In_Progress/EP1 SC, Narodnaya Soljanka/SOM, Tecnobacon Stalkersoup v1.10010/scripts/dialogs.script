--TB3D 1.0.9.9.8.9 added my_ver, db calls, esc_medkit, debug, clear_community, faction changes
function my_ver() return "1.0.9.9.8.9" end

function allow_break_dialog(first_speaker, second_speaker, id)
	if second_speaker:profile_name() == "osoznanie" then
		return false
	end
	return true
end

function break_dialog(first_speaker, second_speaker, id)
	first_speaker:stop_talk()
	second_speaker:stop_talk()
end

function disable_talk_self(first_speaker, second_speaker)
	first_speaker:disable_talk()
end
function disable_talk_victim(first_speaker, second_speaker)
	second_speaker:disable_talk()
end

function punch(first_speaker, second_speaker)
	--' xr_punch.punch[first_speaker:id()] = second_speaker
	--db.storage[second_speaker:id()].punch.enabled = true
	db.set_punch(second_speaker, true)
end

function get_money_then_leave(first_speaker, second_speaker)
	--db.storage[first_speaker:id()].meet.enabled = false
	db.set_meet(first_speaker, false)
	--db.storage[first_speaker:id()].robber.enabled = true
	db.set_robber(first_speaker, true)
end

function is_wounded(first_speaker, second_speaker) --!!!!TB3D ctd fix
	--TB3D_Services.packet_alert("is wounded["..utils.to_str(first_speaker:name()).."]")
    if  db.storage[first_speaker:id()] and db.storage[first_speaker:id()].wounded ~= nil and
       db.storage[first_speaker:id()].wounded.wound_manager.can_use_medkit == true
    then
        return false
    end
	return xr_wounded.is_wounded(first_speaker)
end

function is_opp_wounded(first_speaker, second_speaker, dialog_id) --!!!!TB3D ctd fix
	--TB3D_Services.packet_alert("is op wounded["..utils.to_str(first_speaker:name()).."]")
    if db.storage[first_speaker:id()] and db.storage[second_speaker:id()].wounded ~= nil and
       db.storage[second_speaker:id()].wounded.wound_manager.can_use_medkit == true
    then
        return false
    end
	return	xr_wounded.is_wounded(second_speaker)
end

function is_not_wounded(first_speaker, second_speaker)
	--TB3D_Services.packet_alert("is not wounded["..utils.to_str(first_speaker:name()).."]")
	return not this.is_wounded(first_speaker, second_speaker)
end

function actor_have_medkit(first_speaker, second_speaker)
	return first_speaker:object("medkit") ~= nil
		   or first_speaker:object("esc_medkit") ~= nil
		   or first_speaker:object("medkit_army") ~= nil
		   or first_speaker:object("medkit_scientic") ~= nil
		   or first_speaker:object("medkit_elite") ~= nil
end

function actor_have_bandage(first_speaker, second_speaker)
	return first_speaker:object("bandage") ~= nil
end

function transfer_medkit(first_speaker, second_speaker)
	if first_speaker:object("esc_medkit") ~= nil then
		dialogs.relocate_item_section(second_speaker, "esc_medkit", "out")
	elseif first_speaker:object("medkit") ~= nil then
		dialogs.relocate_item_section(second_speaker, "medkit", "out")
	elseif first_speaker:object("medkit_army") ~= nil then
		dialogs.relocate_item_section(second_speaker, "medkit_army", "out")
	elseif first_speaker:object("medkit_scientic") ~= nil then
		dialogs.relocate_item_section(second_speaker, "medkit_scientic", "out")
	else
		dialogs.relocate_item_section(second_speaker, "medkit_elite", "out")
	end
	--' You've got to unlock the kit to make available for use.
	xr_wounded.unlock_medkit(second_speaker)
	local dead_friends = amk.load_variable("dead_fr", 0)		--109950
	if dead_friends > 0 then 
		dead_friends = dead_friends - 1
		amk.save_variable("dead_fr", dead_friends)	
	end
	if second_speaker:relation(first_speaker) ~= game_object.enemy then
		second_speaker:set_relation(game_object.friend, first_speaker)
		TB3D_Services.change_reputation(first_speaker, 10)
	elseif obj_community == "monolith" then
		rnd = math.random(1, 2)
		if rnd == 1 then
			second_speaker:set_relation(game_object.friend, first_speaker)
			first_speaker:change_character_reputation(-10)
		elseif rnd == 2 then	
			second_speaker:set_relation(game_object.enemy, first_speaker)
			first_speaker:change_character_reputation(-10)
		end
	elseif obj_community == "zombied" then
		rnd = math.random(1, 2)
		if rnd == 1 then
			second_speaker:set_relation(game_object.friend, first_speaker)
			first_speaker:change_character_reputation(-10)
		elseif rnd == 2 then	
			second_speaker:set_relation(game_object.enemy, first_speaker)
			first_speaker:change_character_reputation(-10)
		end
	elseif has_alife_info("actor_set_actor") then
		rnd = math.random(1, 3)
		if rnd == 1 then
			second_speaker:set_relation(game_object.friend, first_speaker)
			first_speaker:change_character_reputation(-10)
		elseif rnd == 2 then
			second_speaker:set_relation(game_object.friend, first_speaker)
			second_speaker:set_character_community("stalker", 0, 0)
			first_speaker:change_character_reputation(15)
		elseif rnd == 3 then	
			second_speaker:set_relation(game_object.enemy, first_speaker)
			first_speaker:change_character_reputation(-10)
		end
	elseif has_alife_info("actor_set_zombied") then
		rnd = math.random(1, 5)
		if rnd == 1 then
			second_speaker:set_relation(game_object.friend, first_speaker)
			first_speaker:change_character_reputation(10)
		elseif rnd == 2 then
			second_speaker:set_relation(game_object.friend, first_speaker)
			first_speaker:change_character_reputation(10)
		elseif rnd == 3 then	
			second_speaker:set_relation(game_object.enemy, first_speaker)
		elseif rnd == 4 then
			second_speaker:set_relation(game_object.friend, first_speaker)
			first_speaker:change_character_reputation(10)
		elseif rnd == 5 then
			second_speaker:set_relation(game_object.friend, first_speaker)
			first_speaker:change_character_reputation(10)
		end
	elseif has_alife_info("actor_set_freedom") then
		rnd = math.random(1, 3)
		if rnd == 1 then
			second_speaker:set_relation(game_object.friend, first_speaker)
			first_speaker:change_character_reputation(-10)
		elseif rnd == 2 then
			second_speaker:set_relation(game_object.friend, first_speaker)
			second_speaker:set_character_community("freedom", 0, 0)
			first_speaker:change_character_reputation(15)
		elseif rnd == 3 then	
			second_speaker:set_relation(game_object.enemy, first_speaker)
			first_speaker:change_character_reputation(-10)
		end
	elseif has_alife_info("actor_set_dolg") then
		rnd = math.random(1, 3)
		if rnd == 1 then
			second_speaker:set_relation(game_object.friend, first_speaker)
			first_speaker:change_character_reputation(-10)
		elseif rnd == 2 then
			second_speaker:set_relation(game_object.friend, first_speaker)
			second_speaker:set_character_community("dolg", 0, 0)
			first_speaker:change_character_reputation(15)
		elseif rnd == 3 then	
			second_speaker:set_relation(game_object.enemy, first_speaker)
			first_speaker:change_character_reputation(-10)
		end
	else
		TB3D_Services.change_reputation(first_speaker, -10)
		xr_wounded.help_wounded(second_speaker)
	end
	--xr_wounded.help_wounded(second_speaker)
end

function transfer_bandage(first_speaker, second_speaker)
	dialogs.relocate_item_section(second_speaker, "bandage", "out")
	second_speaker:set_relation(game_object.friend, first_speaker)
end

function kill_yourself(npc, actor)
	npc:kill(actor)
end

--' Obsolete, do not use!!!
function relocate_item(victim, obj, type)
	if db.actor and victim then
		--TB3D_Services.packet_alert("dialogs: relocate item victim["..victim:name().."] obj["..section.."] type["..type.."]")
		if type == "in" then
			victim:transfer_item(obj, db.actor)
		elseif type == "out" then
			db.actor:transfer_item(obj, victim)
		end
		--'news_manager.relocate_item(db.actor, type, obj)
	end
end

--' Use this function instead.   TB3D 109940 - fails if called more than once on the same section out!!!!
function relocate_item_section(victim, section, type, is_silent)
	if db.actor and victim then
		--TB3D_Services.packet_alert("dialogs: relocate item section victim["..victim:name().."] obj["..section.."] type["..type.."]")
		local silent = false
		if is_silent and is_silent == true then silent = true end
		if type == "in" then
			--' Shuttle need only quest items.
			if quest_section[section] == true and victim:object(section) ~= nil then
				if TB3D_Modders.Global_Debug == true then TB3D_Services.info_alert("dialogs: relocate item section [in]") end
				victim:transfer_item(victim:object(section), db.actor)
			else
				alife():create(section,	
					    db.actor:position(),
						db.actor:level_vertex_id(),	
						db.actor:game_vertex_id(),
						db.actor:id())
			end
		elseif type == "out" then
			if TB3D_Modders.Global_Debug == true then TB3D_Services.info_alert("dialogs: relocate item section [out]") end
			db.actor:transfer_item(db.actor:object(section), victim)
		end
		if silent == false then news_manager.relocate_item(db.actor, type, section) end
	end
end

function relocate_money(victim, num, type)
	if db.actor and victim then
		if type == "in" then
			db.actor:give_money(num)
			if TB3D_Modders.log_game_stats == true then game_stats.money_quest_update(num) end
		elseif type == "out" then
			db.actor:transfer_money(num, victim)
			if TB3D_Modders.log_game_stats == true then game_stats.money_quest_update(-num) end
		end
		news_manager.relocate_money(db.actor, type, num)
	end
end

--'---------------------------------------------------------------------------------
--' DIALOG ALLOWED
--'---------------------------------------------------------------------------------
function dialog_allowed(object, victim, id)
	if id ~= nil then
		if db.storage[victim:id()].actor_dialogs ~= nil then
			for k,v in pairs(db.storage[victim:id()].actor_dialogs) do
				if v == id then
					--TB3D_Services.info_alert("Dialog Allowed")
					return true
				end
			end
		end
	end
	--TB3D_Services.info_alert("Dialog NOT Allowed")
	return false
end
function dialog_not_disable(object, victim, id)
	if id ~= nil then
		if db.storage[victim:id()].actor_disable ~= nil then
			for k,v in pairs(db.storage[victim:id()].actor_disable) do
				if v == id then
					--TB3D_Services.info_alert("Dialog disabled")
					return false
				end
			end
		end
	end
	--TB3D_Services.info_alert("Dialog NOT disabled")
	return true
end

function allow_wounded_dialog(object, victim, id)
	local st = db.storage[victim:id()]
	if st then
		if st.wounded ~= nil then
			if db.storage[victim:id()].wounded.help_dialog == id then
				--TB3D_Services.info_alert("IS WOUNDED! Dialog allowed")
				return true
			end
		end
	else
		return true		--ESC S spawn has no db
	end
	--TB3D_Services.info_alert("IS WOUNDED! Dialog not allowed!")
	return false	
end

-----------------------------------------------------------------------------------
-- LEVELS
-----------------------------------------------------------------------------------
function level_escape(first_speaker, second_speaker)
	return level.name() == "l01_escape"
end

function level_garbage(first_speaker, second_speaker)
	return level.name() == "l02_garbage"
end

function level_agroprom(first_speaker, second_speaker)
	--TB3D_Services.info_alert("dialogs: level agro")
	return level.name() == "l03_agroprom_ai2" or level.name() == "l03_agroprom"
end

-----------------------------------------------------------------------------------
-- Relation functions
-----------------------------------------------------------------------------------
function is_friend(first_speaker, second_speaker)
	return first_speaker:relation(second_speaker) == game_object.friend
end

function is_not_friend(first_speaker, second_speaker)
	return not is_friend(first_speaker, second_speaker)
end

function become_friend(first_speaker, second_speaker)
	first_speaker:set_relation(game_object.friend, second_speaker)
end

-----------------------------------------------------------------------------------
-- Community
-----------------------------------------------------------------------------------
function actor_clear_community(actor, npc)			--109989
	--printf("ACTOR NOW IN [NEUTRAL] COMMUNITY")
	if db.actor then
		TB3D_Services.set_community(db.actor, "actor", 0, 0)
		TB3D_Services.give_info("actor_set_actor")	
	end
	TB3D_Services.remove_info("actor_set_dolg")
	TB3D_Services.remove_info("actor_set_freedom")
	TB3D_Services.remove_info("actor_set_bandit")
	TB3D_Services.remove_info("actor_prebandit")
	TB3D_Services.remove_info("osvedomitel_actor_prebandit")
	return true
end

function actor_in_dolg(actor, npc)
	if db.actor then
		return db.actor:character_community() == "actor_dolg"
	end
	return false
end

function actor_not_in_dolg(actor, npc)
	return not actor_in_dolg(actor, npc)
end

function actor_set_dolg(actor, npc)			--109989
	--printf("ACTOR NOW IN [DOLG] COMMUNITY")
	if db.actor then
		TB3D_Services.set_community(db.actor, "actor_dolg", 0, 0)
		TB3D_Services.give_info("actor_set_dolg")			--109950
		TB3D_Services.remove_info("actor_set_actor")
		TB3D_Services.remove_info("actor_set_freedom")
		TB3D_Services.remove_info("actor_set_bandit")
		TB3D_Services.remove_info("actor_prebandit")
		TB3D_Services.remove_info("osvedomitel_actor_prebandit")
		return true
	end
end

function actor_set_freedom()			--109989
	--printf("ACTOR NOW IN [FREEDOM] COMMUNITY")
	if db.actor then
		TB3D_Services.set_community(db.actor, "actor_freedom", 0, 0)
		TB3D_Services.give_info("actor_set_freedom")
		TB3D_Services.remove_info("actor_set_actor")
		TB3D_Services.remove_info("actor_set_dolg")
		TB3D_Services.remove_info("actor_set_bandit")
		TB3D_Services.remove_info("actor_prebandit")
		TB3D_Services.remove_info("osvedomitel_actor_prebandit")
		return true
	end
end

function actor_set_bandit()			--109989
	--printf("ACTOR NOW IN [BANDIT] COMMUNITY")
	if db.actor then
		TB3D_Services.set_community(db.actor, "bandit", 0, 0)
		TB3D_Services.give_info("actor_set_bandit")
		TB3D_Services.remove_info("actor_set_actor")
		TB3D_Services.remove_info("actor_set_dolg")
		TB3D_Services.remove_info("actor_set_freedom")
		TB3D_Services.remove_info("actor_prebandit")
		TB3D_Services.remove_info("osvedomitel_actor_prebandit")
		return true
	end
end

function set_actor_prebandit()			--109989
	--printf("ACTOR NOW IN [PREBANDIT] COMMUNITY")
	if db.actor then
		TB3D_Services.set_community(db.actor, "actor_prebandit", 0, 0)
		TB3D_Services.give_info("actor_prebandit")
		amk.g_start_timer("dismiss_prebandit",0,0,86000)
		TB3D_Services.remove_info("actor_set_actor")
		TB3D_Services.remove_info("actor_set_dolg")
		TB3D_Services.remove_info("actor_set_freedom")
		return true
	end
end

function set_actor_prebandit1()			--109989
	--printf("ACTOR NOW IN [PREBANDIT] COMMUNITY")
	if db.actor and not has_alife_info("actor_set_bandit") then
		TB3D_Services.set_community(db.actor, "actor_prebandit", 0, 0)
		TB3D_Services.give_info("actor_prebandit")
		amk.g_start_timer("dismiss_prebandit",0,0,64000)
		TB3D_Services.remove_info("actor_set_actor")
		TB3D_Services.remove_info("actor_set_dolg")
		TB3D_Services.remove_info("actor_set_freedom")
		return true
	end
end

function escort_task_fail(task, objective)
    return 
  not has_alife_info("val_escort_actor_helped")
end

-----------------------------------------------------------------------------------
-- Zombied
-----------------------------------------------------------------------------------
function actor_in_zombied(actor, npc)
	if db.actor then
		return db.actor:character_community() == "zombied"
	end
	return false
end

function actor_not_in_zombied(actor, npc)
	return not actor_in_zombied(actor, npc)
end

function actor_set_zombied(actor, npc)			--109989
	--printf("ACTOR NOW IN [ZOMBIED] COMMUNITY")
	if db.actor and not has_alife_info("actor_set_zombied") then
		TB3D_Services.set_community(db.actor, "actor_zombied", 0, 0)
		TB3D_Services.give_info("actor_set_zombied")
		soundtrack.set_zombie()
		TB3D_Services.remove_info("actor_set_actor")
		TB3D_Services.remove_info("actor_set_dolg")
		TB3D_Services.remove_info("actor_set_freedom")
		TB3D_Services.remove_info("actor_prebandit")
		TB3D_Services.remove_info("actor_set_bandit")
		TB3D_Services.remove_info("osvedomitel_actor_prebandit")
	else
		db.actor:kill(db.actor)
	end
	return true
end

function actor_clear_community(actor, npc)
	--printf("ACTOR NOW IN [NEUTRAL] COMMUNITY")
	if db.actor then
		TB3D_Services.set_community(db.actor, "actor")
	end
	return true
end

-----------------------------------------------------------------------------------
-- Money functions
-----------------------------------------------------------------------------------
function has_2000_money(first_speaker, second_speaker)
	return first_speaker:money() >= 2000
end

-----------------------------------------------------------------------------------
-- TRADE
-----------------------------------------------------------------------------------
--' Initialization of trade
function trade_init(seller, buyer)
	db.set_meet_wait_begin(seller, time_global()/1000)
	xr_position.setPosition(db.storage[seller:id()].meet.Seller, 
							db.storage[seller:id()].meet.Seller:level_vertex_id())
	db.set_meet_buyer(seller, buyer)
end

function want_trade(seller, buyer)
	if seller:relation(buyer) == game_object.friend or
		seller:relation(buyer) == game_object.neutral
	then
		return true
	else
		return false
	end
end

function dont_want_trade(seller, buyer)	
	return not want_trade(seller,buyer)
end

------------------------------------------------------------------------------------
-- Companion			--109950
------------------------------------------------------------------------------------
local not_follow_type = 0

function check_following(npc, actor)
	not_follow_type = 0
	local npc_rank_level = 0
	local actor_rank_level = 0
	local st = db.storage[npc:id()]
	local actor_comm = db.actor:character_community()
	actor_comm = xr_companion.community_by_actor(actor_comm)
	local npc_comm = npc:character_community()
	local npc_rank = ranks.get_obj_rank_name(npc)
	local actor_rank = db.actor:character_rank()
	local name = npc:name()
	local profile = npc:profile_name()
	local dead_friends = amk.load_variable("dead_fr", 0)
	if npc_rank == "novice" then npc_rank_level = 1
	elseif npc_rank == "experienced" then npc_rank_level = 2
	elseif npc_rank == "veteran" then npc_rank_level = 3
	elseif npc_rank == "master" then npc_rank_level = 4 end
	if actor_rank < 300 then actor_rank_level = 1
	elseif actor_rank >= 300 and actor_rank < 600 then actor_rank_level = 2
	elseif actor_rank >= 600 and actor_rank < 900 then actor_rank_level = 3
	elseif actor_rank >= 900 then actor_rank_level = 4 end	
	if not st 
	  --or (amk.is_quest_npc(npc) and not (string.find(npc:name(), "esc_wolf") and level.name() == "l07_military"))
	  or string.find(profile, "sniper")
	  or string.find(profile, "leader")
	  or string.find(profile, "commander")
	  or string.find(name, "val_rob")
	then
		not_follow_type = 1
		return true
	else
		if relation_registry.community_goodwill(npc_comm, db.actor:id()) < -30
		then
			not_follow_type = 2
			return true
		else
			if name and (string.find(name, "wounded") or string.find(name, "prisoner"))
			then
				not_follow_type = 3
				return true			
			else
				if npc_rank_level > actor_rank_level then
					not_follow_type = 4
					return true					
				else
					local diff = actor_rank_level - npc_rank_level
					if diff > 1 then
						not_follow_type = 5
						return true						
					else
						if xr_companion.number_of_companions > 0 then
							not_follow_type = 6
							return true	
						else
							if actor_comm ~= npc_comm then
								not_follow_type = 7
								return true	
							else
								if dead_friends >= 4 then
									not_follow_type = 8
									return true	
								else
									not_follow_type = 0
									return false
								end
							end
						end
					end
				end
			end
		end			
	end	
	return false
end

function companion_will_follow(npc, actor)
	if not check_following(npc, actor) then
		return true
	else	
		return false
	end
end

function companion_not_follow(npc, actor)
	if not_follow_type == 1 then
		return true
	else	
		return false
	end
end

function companion_not_follow_bad(npc, actor)
	if not_follow_type == 2 then
		return true
	else	
		return false
	end
end

function companion_not_follow_tired(npc, actor)
	if not_follow_type == 3 then
		return true
	else	
		return false
	end	
end

function companion_not_follow_lowrank(npc, actor)
	if not_follow_type == 4 then
		return true
	else	
		return false
	end	
end

function companion_not_follow_highrank(npc, actor)
	if not_follow_type == 5 then
		return true
	else	
		return false
	end	
end

function companion_not_follow_toomuch(npc, actor)
	if not_follow_type == 6 then
		return true
	else	
		return false
	end	
end

function companion_not_follow_other_community(npc, actor)
	if not_follow_type == 7 then
		return true
	else	
		return false
	end	
end

function companion_not_follow_deadly(npc, actor)
	if not_follow_type == 8 then
		return true
	else	
		return false
	end	
end

function companion_start_following(npc, actor)
	local st = db.storage[npc:id()]
	local st_c = db.storage[npc:id()].companion
	local actor_comm = db.actor:character_community()
	local npc_com = xr_companion.community_by_actor(actor_comm)
	if st and st_c then
		xr_gulag.resetJob(npc)
		xr_companion.number_of_companions = xr_companion.number_of_companions + 1
		xr_companion.companions[npc:id()] = "companion"
		xr_companion.save_var_companion(npc:id(), "is_companion", 1)
		xr_companion.save_var_companion(npc:id(), "orig_community", npc:character_community())
		xr_companion.save_var_companion(npc:id(), "friendship_status", npc:relation(db.actor))
		xr_companion.save_var_companion(npc:id(), "companion_behavior", xr_companion.beh_walk_simple)
		local time_to_release = game.time() + 30*60*1000*amk.game_time_factor
		xr_companion.save_var_companion(npc:id(), "release_time", time_to_release)
		npc:set_character_community(npc_com, 0, 0)
		npc:set_relation(game_object.friend, db.actor) 
		trade_manager.trade_init(npc, "trade\\trade_obmen.ltx")	-- misc to trade folder - aleks1970
		level.map_add_object_spot_ser(npc:id(), "alife_presentation_companion", "Companion")	
		st_c.enabled = true
		st_c.behavior = xr_companion.beh_walk_simple
	end	
end

function companion_stop_following(npc, actor)
	db.storage[npc:id()].companion.enabled = false
	xr_companion.number_of_companions = xr_companion.number_of_companions - 1
	-- local comm = xr_companion.real_community(npc)
	xr_companion.save_var_companion(npc:id(), "is_companion", 0)
	local comm = xr_companion.load_var_companion(npc:id(), "orig_community", nil)
	local relation = xr_companion.load_var_companion(npc:id(), "friendship_status", nil)
	npc:set_character_community(comm, 0, 0)
	npc:set_relation(tonumber(relation), db.actor)
	trade_manager.trade_init(npc, "trade\\trade_generic.ltx")	
	level.map_remove_object_spot(npc:id(), "alife_presentation_companion")
	xr_companion.companions[npc:id()] = nil
	xr_gulag.resetJob(npc)
end

function is_companion(actor, npc)
	local st = db.storage[npc:id()]
	if not st then
		return false
	end
	if not st.companion then
		return false
	end
	if not st.companion.enabled then
		return false
	end
	return true
end

function can_be_free(actor, npc)
	local st = db.storage[npc:id()]
	if not st then
		return false
	end
	if not st.companion then
		return false
	end
	if not st.companion.enabled then
		return false
	end
	local time_release = xr_companion.load_var_companion(npc:id(), "release_time", 0)
	if not time_release then time_release = 0 end
	if tonumber(game.time()) > tonumber(time_release) then
		return true
	else	
		return false
	end
end

function not_is_companion(actor, npc)
	-- local disabled = true
	-- if disabled then return false end
	--if amk.is_quest_npc(npc) and not (string_find(npc:name(), "esc_wolf") and level.name() == "l07_military") then
		--return false
	--end
	--if not has_alife_info("esc_kill_bandits_quest_done") then
		--return false
	--end
	if xr_wounded.is_wounded(npc) then
		return false
	end
	if npc:relation(actor) == game_object.enemy then
		return false
	end
	if is_companion(actor, npc) then
		return false
	end
	return true
end

function is_stalker_companion(actor, npc)
	local npc_comm = npc:character_community()
	if npc_comm == "stalker" then return true else return false end
end

function is_dolg_companion(actor, npc)
	local npc_comm = npc:character_community()
	if npc_comm == "dolg" then return true else return false end
end

function is_freedom_companion(actor, npc)
	local npc_comm = npc:character_community()
	if npc_comm == "freedom" then return true else return false end
end

function is_bandit_companion(actor, npc)
	local npc_comm = npc:character_community()
	if npc_comm == "bandit" then return true else return false end
end

function is_zombie_companion(actor, npc)
	local npc_comm = npc:character_community()
	if npc_comm == "zombied" then return true else return false end
end

function companion_beh_walk_simple(actor, npc)
	local st = db.storage[npc:id()]
	if st and st.companion then
		st.companion.behavior = xr_companion.beh_walk_simple
		xr_companion.save_var_companion(npc:id(), "companion_behavior", st.companion.behavior)
		xr_companion.save_var_companion(npc:id(),"w_lvl",nil)
	end
end

function companion_beh_walk_low_aggr(actor, npc)
	local st = db.storage[npc:id()]
	if st and st.companion then
		st.companion.behavior = xr_companion.beh_walk_low_aggr
		xr_companion.save_var_companion(npc:id(), "companion_behavior", st.companion.behavior)
		xr_companion.save_var_companion(npc:id(),"w_lvl",nil)
	end
end

function companion_beh_walk_ignore(actor, npc)
	local st = db.storage[npc:id()]
	if st and st.companion then
		st.companion.behavior = xr_companion.beh_walk_ignore
		xr_companion.save_var_companion(npc:id(), "companion_behavior", st.companion.behavior)
		xr_companion.save_var_companion(npc:id(),"w_lvl",nil)
	end
end

function companion_beh_wait_simple(actor, npc)
	local st = db.storage[npc:id()]
	if st and st.companion then
		st.companion.behavior = xr_companion.beh_wait_simple
		xr_companion.save_var_companion(npc:id(), "companion_behavior", st.companion.behavior)
		xr_companion.save_var_companion(npc:id(),"w_lvl",level.name())
	end
end

function companion_beh_wait_low_aggr(actor, npc)
	local st = db.storage[npc:id()]
	if st and st.companion then
		st.companion.behavior = xr_companion.beh_wait_low_aggr
		xr_companion.save_var_companion(npc:id(), "companion_behavior", st.companion.behavior)
		xr_companion.save_var_companion(npc:id(),"w_lvl",level.name())
	end
end

function companion_beh_wait_ignore(actor, npc)
	local st = db.storage[npc:id()]
	if st and st.companion then
		st.companion.behavior = xr_companion.beh_wait_ignore
		xr_companion.save_var_companion(npc:id(), "companion_behavior", st.companion.behavior)
		xr_companion.save_var_companion(npc:id(),"w_lvl",level.name())
	end
end

function companion_beh_crouch_simple(actor, npc)
	local st = db.storage[npc:id()]
	if st and st.companion then
		st.companion.behavior = xr_companion.beh_crouch_simple
		xr_companion.save_var_companion(npc:id(), "companion_behavior", st.companion.behavior)
		xr_companion.save_var_companion(npc:id(),"w_lvl",nil)
	end
end

function companion_beh_crouch_low_aggr(actor, npc)
	local st = db.storage[npc:id()]
	if st and st.companion then
		st.companion.behavior = xr_companion.beh_crouch_low_aggr
		xr_companion.save_var_companion(npc:id(), "companion_behavior", st.companion.behavior)
		xr_companion.save_var_companion(npc:id(),"w_lvl",nil)
	end
end

function companion_beh_crouch_ignore(actor, npc)
	local st = db.storage[npc:id()]
	if st and st.companion then
		st.companion.behavior = xr_companion.beh_crouch_ignore
		xr_companion.save_var_companion(npc:id(), "companion_behavior", st.companion.behavior)
		xr_companion.save_var_companion(npc:id(),"w_lvl",nil)
	end
end

function companion_beh_hide_simple(actor, npc)
	local st = db.storage[npc:id()]
	if st and st.companion then
		st.companion.behavior = xr_companion.beh_hide_simple
		xr_companion.save_var_companion(npc:id(), "companion_behavior", st.companion.behavior)
		xr_companion.save_var_companion(npc:id(),"w_lvl",level.name())
	end
end

function companion_beh_hide_low_aggr(actor, npc)
	local st = db.storage[npc:id()]
	if st and st.companion then
		st.companion.behavior = xr_companion.beh_hide_low_aggr
		xr_companion.save_var_companion(npc:id(), "companion_behavior", st.companion.behavior)
		xr_companion.save_var_companion(npc:id(),"w_lvl",level.name())
	end
end

function companion_beh_hide_ignore(actor, npc)
	local st = db.storage[npc:id()]
	if st and st.companion then
		st.companion.behavior = xr_companion.beh_hide_ignore
		xr_companion.save_var_companion(npc:id(), "companion_behavior", st.companion.behavior)
		xr_companion.save_var_companion(npc:id(),"w_lvl",level.name())
	end
end

function companion_suicide(actor, npc)
	local h = hit()
	h.power = 1000
	--h.direction = vector_rotate_y(npc:direction(), 90)
	h.direction = npc:direction()
	h.bone = "bip01_head"
	h.draftsman = npc 
	h.impulse = 10
	h.type = hit.wound
	npc:hit(h)
end
