-- TB3D 1.1.0.0.1.0, optimized db.actor, hit styles, send_tip_id optimization, clear callbacks
function my_ver() return "1.1.0.0.1.0" end
--[[----------------------------------------------------
 File         : dmx_sleep_binder.script
 Description  : Binder bed
 Copyright    : DMX MOD
 Author       : Shadows and Charsi
 Last update  : 22.04.2011
--]]------------------------------------------------------------------------
local force_obinder = TB3D_Modders.use_sleep_obinder				--110010, calls into game binder (alife)
if force_binder == nil then force_binder = true end

function init(obj)
    obj:bind_object(BSleep(obj))
end

class "BSleep" (object_binder)

function BSleep:__init(obj) super(obj)
    self.object=obj
end 

function BSleep:reload(section)
    if force_obinder then object_binder.reload(self, section) end			--110010
end

function BSleep:reinit()
   if force_obinder then object_binder.reinit(self) end			--110010
   self.object:set_callback(callback.use_object, BSleep.use_callback, self) 
end

function BSleep:update(delta)
	if TB3D_Modders.Global_Debug then
		TB3D_Services.packet_alert("Bind dmx sleep: update["..game.get_game_time():timeToString(game.CTime.TimeToMilisecs).."] delta["..utils.to_str(delta).."]")
	end
   if force_obinder then object_binder.update(self, delta) end			--110010
	if TB3D_Modders.Global_Debug then
		TB3D_Services.packet_alert("Bind dmx sleep: update["..game.get_game_time():timeToString(game.CTime.TimeToMilisecs).."] done")
	end
end

function BSleep:net_spawn(data)
	--if TB3D_Modders.sleep_hit == true then TB3D_hit_styles.strike(db.actor, self.object, "bip01_spine", 0.0001, 0.0001, vector():set(0, 0, 0)) end
    self.object:set_tip_text("st_dmx_sleep")
	if level.map_has_object_spot(self.object:id(), "sleep_place") == 0 then level.map_add_object_spot(self.object:id(), "sleep_place", "A place to sleep") end
	if force_obinder then
		return object_binder.net_spawn(self, data)			--110010
	else
		return true
	end
end

function BSleep:net_destroy()
	--TB3D_Services.packet_alert("sleep binder: net destroy")
	if TB3D_Modders.use_destroy_message then TB3D_Services.packet_alert("bsleep: net destroy["..utils.to_str(self.object:name()).."] section["..self.object:section().."]") end
   self.object:set_callback(callback.use_object, nil) 				--109990
    level.map_remove_object_spot(self.object:id(), "sleep_place")
    if force_obinder then object_binder.net_destroy(self) end			--110010
	if TB3D_Modders.use_destroy_message then TB3D_Services.packet_alert("bsleep: net destroy["..utils.to_str(self.object:name()).."] done") end
	--TB3D_Services.packet_alert("sleep binder: net destroy done")
end

function BSleep:net_save_relevant()
return true
end

function BSleep:use_callback(obj, who)
    local enemy=false
    local obj
    local level_object_by_id = level.object_by_id
    local actor = db.actor
    local actorPos = actor:position()
	if TB3D_Modders.default_sleep == true then   -- !!!!TB3D, why even parse data
		for npcId, npc in pairs(db.storage) do
			obj = level_object_by_id(npcId)
			if obj then
				if ((IAmAStalker[obj:clsid()] and amk.get_npc_relation(obj,actor)=="enemy") or IAmAMonster[obj:clsid()])
					and obj:position():distance_to(actorPos) < 40 and obj:see(actor) then
					enemy=true
					break
				end
			end
		end
	end
    if enemy==true then
        news_manager.amk_send_tip_id("not_need_sleep_enemy","important_msg", 2, 25, "pda_icon")
    else
        if amk.load_variable("blowout",-1)>-1 and amk.load_variable("blowout",-1)<5 then
            news_manager.amk_send_tip_id("blowout_not_sleep","important_msg", 2, 25, "pda_icon")
        else
            if has_alife_info("horror_time_begin") then
                news_manager.amk_send_tip_id("not_need_sleep_in_hell","important_msg", 2, 25, "pda_icon")
            elseif amk.load_variable("block_sleep_menu",0)==0 then
				local spwn = dmx_sleep_menu.cheat()
				level.start_stop_menu(spwn,true)
			else
				news_manager.amk_send_tip_id("not_need_sleep_nrg","important_msg", 2, 25, "pda_icon")
			end
        end
    end
end
