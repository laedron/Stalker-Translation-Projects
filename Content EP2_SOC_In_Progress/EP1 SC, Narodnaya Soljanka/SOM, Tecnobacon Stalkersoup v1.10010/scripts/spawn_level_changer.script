--TB3D 1.0.9.9.9.8 centralized create_level_changer, new Collector 12/05/11, optimized
function my_ver() return "1.0.9.9.9.8" end

-- Table teleports
-- art - art required for teleportation (if specified - will take away HS)
-- keep - whether to leave the teleporter
-- goto_func - list of options of getting to teleport
local teleports = {
	["device_teleport"] = {
		art = "af_electra_moonlight",
		can_eat = true,
		goto_func = {
			"exit_agroprom",
			"exit_agroprom2",
			"exit_agroprom3",
			"exit_as",
			"exit_as2",
			"exit_as3",
			"exit_as4",
			"exit_bar",
			"exit_bar2",
			"exit_bar3",
			"exit_bar4",
			"exit_bar5",
			"exit_bar6",
			"exit_bar7",
			"exit_bunker",
			"exit_dt1",
			"exit_dt2",
			"exit_dt3",
			"exit_dt4",
			"exit_dt5",
			"exit_dt6",
			"exit_dt7",
			"exit_dt8",
			"exit_dt9",
			"exit_dt10",
			"exit_dt11",
			"exit_kordon",
			"exit_kordon2",
			"exit_kordon3",
			"exit_kordon4",
			"exit_kordon5",
			"exit_kordon6",
			"exit_kordon7",
			"exit_kordon8",
			"exit_kordon9",
			"exit_kordon10",
			"exit_kordon11",
			"exit_kordon12",
			"exit_kordon13",
			"exit_kordon14",
			"exit_kordon15",
			"exit_pripyat",
			"exit_pripyat2",
			"exit_radar",
			"exit_radar2",
			"exit_radar3",
			"exit_radar4",
			"exit_svalka",
			"exit_svalka2",
			"exit_svalka3",
			"exit_svalka4",
			"exit_svalka5",
			"exit_svalka6",
			"exit_svalka7",
			"exit_svalka8",
			"exit_svalka9",
			"exit_svalka10",
			"exit_svalka11",
			"exit_svalka12",
			"exit_td",
			"exit_td2",
			"exit_undergraund",
			"exit_x18",
			"exit_yantar1",
			"exit_yantar2",
			"exit_yantar3",
			"exit_yantar4",
			"exit_yantar5",
			"exit_yantar6",
			"exit_yantar7",
			"exit_yantar8",
			"exit_yantar9",
			"exit_yantar10",
			"exit_yantar11"
		}
	},
	["science_teleport3"] = {
		art = "af_electra_moonlight",
		can_eat = true,
		goto_func = {
			"exit_yantar1",
			"exit_yantar2",
			"exit_yantar3",
			"exit_yantar4",
			"exit_yantar5",
			"exit_yantar6",
			"exit_yantar7",
			"exit_yantar8",
			"exit_yantar9",
			"exit_yantar10",
			"exit_yantar11"
		}
	},
	["science_teleport2"] = {
		art = "af_electra_moonlight",
		can_eat = true,
		goto_func = {
			"exit_bar",
			"exit_bar2",
			"exit_bar3",
			"exit_bar4",
			"exit_bar5",
			"exit_bar6",
			"exit_bar7"
		}
	},
	["science_teleport"] = {
		art = "af_electra_moonlight",
		can_eat = true,
		goto_func = {
			"exit_kordon",
			"exit_kordon2",
			"exit_kordon3",
			"exit_kordon4",
			"exit_kordon5",
			"exit_kordon6",
			"exit_kordon7",
			"exit_kordon8",
			"exit_kordon9",
			"exit_kordon10",
			"exit_kordon11",
			"exit_kordon12",
			"exit_kordon13",
			"exit_kordon14",
			"exit_kordon15"
		}
	},
	["arhara_tele"] = {
		--keep = true,
		can_eat = true,
		goto_func = {
			"exit_to_stancia21"
		}
	},
	["snotvornoe_tele"] = {
		--keep = true,
		can_eat = true,
		goto_func = {
			"exit_peshera"
		}
	},
	["shaxter_tele"] = {
		--keep = true,
		can_eat = true,
		goto_func = {
			"exit_peshera1"
		}
	},
	--new Collector -------------------------
["dav_htd_rft"] = {
		--keep = true,
		can_eat = false,
		goto_func = {
			"exit_redf_htd"
		}
	},
	["dav_htd_npp"] = {
		--keep = true,
		can_eat = false,
		goto_func = {
			"exit_nppt_htd"
		}
	},
	["dav_htd_lmk"] = {
		--keep = true,
		can_eat = false,
		goto_func = {
			"exit_limk_htd"
		}
	},	
	-- end new -----------------------------------
	["arhara_obman"] = {
		--keep = true,
		can_eat = false,
		goto_func = {
			"exit_as21"
		}
	}
}

function checking_droped_obj(obj)
	local obj_sect = obj:section()
	if teleports[obj_sect] then					-- our teleport
		local sim = alife()
		local actor = db.actor
		local obj_id = obj:id()
		local is_go = false
		--TB3D_Services.packet_alert("spawn level changer: droped["..utils.to_str(obj_sect).."]")
		if teleports[obj_sect].art and actor:object(teleports[obj_sect].art) then
			--TB3D_Services.packet_alert("spawn level changer: droped["..utils.to_str(obj_sect).."] 1")
			local art = actor:object(teleports[obj_sect].art)	-- we select the art in HS, if you want to select
			if art then
				local se_art = sim:object(art:id())
				if se_art then
					sim:release(se_art)
				end
				 is_go = true
			end
		elseif teleports[obj_sect].art then
			--TB3D_Services.packet_alert("spawn level changer: droped["..utils.to_str(obj_sect).."] 2")
			news_manager.amk_send_tip_id("teleport_art_not_found","teleport_art_not_found_title",1,20,"pda_icon")
		else
			is_go = true
		end
		if is_go then
			--TB3D_Services.packet_alert("spawn level changer: droped["..utils.to_str(obj_sect).."] 3")
			--if obj_id then			--109999, on use instead of on drop
				--local sobj_id = sim:object(obj_id)
				--if sobj_id then sim:release(sobj_id) end	--if dropped
			--end
			if teleports[obj_sect].can_eat == false then
				amk.spawn_item_in_inv(obj_sect)
			end
			local tbl		= {}
			tbl.obj_id		= obj_id
			tbl.obj_sect	= obj_sect
			amk.start_timer("timer_drop_obj_teleport", 0.2, tbl)
		end
		return true
	end
	return false
end

function teleport_start(obj_sect, obj_id, ate_it)
	local actor = db.actor
	-- call a random function for the teleport
	TB3D_Services.teleportate(teleports[obj_sect].goto_func[math.random(#(teleports[obj_sect].goto_func))])
end





