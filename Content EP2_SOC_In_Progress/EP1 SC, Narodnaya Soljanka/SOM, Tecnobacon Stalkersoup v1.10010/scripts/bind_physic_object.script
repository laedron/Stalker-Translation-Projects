-- TB3D 1.1.0.0.1.0   use_DMX_cars, db calls, use_binder_message, clear callbacks, net spawn, hit_car, obinder
function my_ver() return "1.1.0.0.1.0" end
----------------------------------------------------------------------------------------------------
-- Physic objects binding
----------------------------------------------------------------------------------------------------
-- Developer: Evgeniy Negrobov (Jon) jon@gsc-game.kiev.ua
-- Revised: Andrey Fidrya (Zmey) af@svitonline.com
----------------------------------------------------------------------------------------------------
local string_find = string.find
local string_sub = string.sub
local force_obinder = TB3D_Modders.use_obj_obinder				--110010, calls into game binder (alife)
if force_binder == nil then force_binder = true end

local actor_inside_car = false
function restore_actor_inside_car()
    actor_inside_car = false
end

local hit_car = {
vehicle_zil131 = true,					--truck in dv
falling_car = true,
dar_zaz = true,
ds_m_car_0002 = true,
ds_m_car_0003 = true,
ds_m_car_0004 = true,
ds_m_car_0013 = true,
ds_m_car_0015 = true,
ds_m_car_0017 = true,
ds_m_car_0030 = true,
ds_m_car_0040 = true,
ds_m_car_0070 = true,
ds_m_car_0090 = true,
vehicle_laz4202 = true,					--truck in agro
vehicle_zil130_truck = true				--truck in radar
}
function init(obj)
	--TB3D_Services.packet_alert("bind physic object: bind["..utils.to_str(obj:name()).."] section["..get_section(obj).."]")
	----------------------------------------------------------------------------------------
	-- Old scheme
	----------------------------------------------------------------------------------------
	local ini = obj:spawn_ini()
	if ini and ini:section_exist("animation") then
		--obj:bind_object(hanging_lamp_binder(obj))
		if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("bind physic object init: animation section is deprecated, use logic + impulse combination object["..obj:name().."]") end
		return
	end
	----------------------------------------------------------------------------------------
	-- New schemes
	----------------------------------------------------------------------------------------
	-- Bindi the subject does not make sense, if it has no section logic
	if not ini or not ini:section_exist("logic") then
		-- Searchlight to Bindi, even without logic
		if ini and not ini:section_exist("drop_box") then
			if obj:clsid() ~= clsid.projector then
				return
			end
		end
	end
	db.init_my_storage(obj)
	local new_binder = generic_physics_binder(obj)
	obj:bind_object(new_binder)
	if get_section(obj) == "m_car" then
		--TB3D_Services.packet_alert("bind physic object: bind["..utils.to_str(obj:name()).."] section["..get_section(obj).."]")
		if hit_car[obj:name()] == true then
			TB3D_hit_styles.hit_car(obj)										--110004, falling truck in ds
		end
	elseif string_sub(obj:name(), 1, 8) == "vehicle_" then
		--TB3D_Services.packet_alert("bind physic object: bind["..utils.to_str(obj:name()).."] section["..get_section(obj).."]")
		if hit_car[get_section(obj)] == true then
			TB3D_hit_styles.hit_car(obj)										--110004, make sure they aren't floating
		end
	end
end

---------------------------------------------------------------------------------------------
class "generic_physics_binder" (object_binder)
function generic_physics_binder:__init(obj) super(obj)
	self.initialized = false
	self.loaded = false
end 

function generic_physics_binder:reload(section)
	if force_obinder then object_binder.reload(self, section) end		--110010
end

function generic_physics_binder:reinit()
	if force_obinder then object_binder.reinit(self) end		--110010
	--printf("generic_physics_binder:reinit()")
	--printf("_bp: generic_physics_binder: %s", self.object:name())
	db.init_my_storage(self.object)
	self.st = db.storage[self.object:id()]
  self.health=self.object:get_car() and self.object:get_car():GetfHealth()
end

function generic_physics_binder:update(delta)
	if _g.is_disconnecting or delta > 1800 then return end			--110010
	if TB3D_Modders.Global_Debug then
		TB3D_Services.packet_alert("bind phys obj: update["..game.get_game_time():timeToString(game.CTime.TimeToMilisecs).."] delta["..utils.to_str(delta).."]")
	end
	if force_obinder then object_binder.update(self, delta) end		--110010
	if not self.initialized and db.actor then
		self.initialized = true
		xr_logic.initialize_obj(self.object, self.st, self.loaded, db.actor, modules.stype_item)        
        --' Run associated with the object particle.
        local particle = utils.cfg_get_string(self.st.ini, self.st.section_logic, "particle", self.object, false, "", nil)
        if particle ~= nil then
            self.particle = particles_object(particle)
            self.particle:play_at_pos(self.object:position())
        end
        --' disable association with the object graph
        local graph_point_marker = utils.cfg_get_string(self.st.ini, self.st.section_logic, "graph_point_marker", self.object, false, "", nil)
        if graph_point_marker ~= nil then
            self.disable_graph_point = patrol(graph_point_marker):game_vertex_id(0)
            game_graph():accessible(self.disable_graph_point, false)
            --printf("GRAPH POINT DISABLED")
        end
	end
	if self.st.active_section ~= nil or (self.object:spawn_ini() ~= nil and self.object:spawn_ini():section_exist("drop_box") == true) then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta)
		--if not self.callbackset then
  		self.object:set_callback(callback.hit, generic_physics_binder.hit_callback, self)
  		self.object:set_callback(callback.death, generic_physics_binder.death_callback, self)
  		self.object:set_callback(callback.use_object, generic_physics_binder.use_callback, self)
		--self.callbackset=true
		--end
		-- for BTR hit_callback not called. shut this hole.
		if self.health and (not self.nofixonhit) then
			local health=self.object:get_car() and self.object:get_car():GetfHealth()
			if health then
				if self.health-health>0.00001 then
					-- amk.mylog("health decrease for "..self.object:name())
					self.health=health
					self:hit_callback(self.object, self.health-health, vector():set(1,0,0), db.actor, 0)
					self.nofixonhit=nil
				end
			end
		end
	else
		--self.callbackset=false
	end
	if not actor_inside_car and self.object:clsid() == clsid.car_s and self.object:get_car():engaged() then
		dmx_cars.on_vehicle_input(self.object:id())
		actor_inside_car = true
	end
	dmx_cars.signaling_light_activation()
	if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("bind phys obj: update["..game.get_game_time():timeToString(game.CTime.TimeToMilisecs).."] done") end
end

function generic_physics_binder:net_spawn(data)
	if force_obinder and not object_binder.net_spawn(self, data) then return false end			--110010
	local sobj = self.object
	if sobj then
		local obj_name, obj_sect
		if sobj.name then obj_name = sobj:name() else obj_name = "nil" end
		local obj_sect = get_section(sobj)
		--TB3D_Services.packet_alert("bind physic object: net spawn["..obj_name.."] sect name["..obj_sect.."] clsid["..utils.to_str(sobj:clsid()).."] sect["..utils.to_str(sobj:section()).."]")
		if sobj:clsid() == clsid.projector then
			db.add_sl(sobj)
		end
		if sobj:spawn_ini() ~= nil and sobj:spawn_ini():section_exist("drop_box") == true then
			self.box_items = xr_box.ph_item_box(sobj)
		end
		amk.on_net_spawn(sobj)
	end
	return true
end

function generic_physics_binder:net_destroy()
	--if TB3D_Modders.use_destroy_message then TB3D_Services.info_alert("bind physic object: net destroy", true) end
	local sobj = self.object
	local obj_name, obj_sect
	if self.particle ~= nil then
		self.particle:stop()
	end
	if sobj then
		if sobj.name then obj_name = sobj:name() else obj_name = "nil" end
		if TB3D_Modders.use_destroy_message then
			obj_sect = get_section(sobj)
			TB3D_Services.packet_alert("bind physic object: net destroy["..obj_name.."] sect name["..obj_sect.."] clsid["..utils.to_str(sobj:clsid()).."] sect["..utils.to_str(sobj:section()).."]")
		end
		if (sobj.clsid) and sobj:clsid() == clsid.projector then
			db.del_sl(sobj)
		end
		if sobj.id then
			--self.object:set_callback(callback.hit, nil)			--109990
			--self.object:set_callback(callback.death, nil)			--109990
			--self.object:set_callback(callback.use_object, nil)			--109990
			local st = db.storage[sobj:id()]
			if st and (st.active_scheme) then
				xr_logic.issue_event(sobj, st[st.active_scheme], "net_destroy")
			end
			db.destroy_my_storage(sobj)
			if force_obinder then object_binder.net_destroy(self) end		--110010
		else
			TB3D_Services.packet_alert("bind physic object: net destroy["..obj_name.."] no id!!!!")
		end
		if TB3D_Modders.use_destroy_message then TB3D_Services.info_alert("bind physic object: net destroy done", true) end
	end
end

function generic_physics_binder:net_save_relevant()
	--printf("generic_physics_binder:net_save_relevant(): self.object:name()='%s'", self.object:name())
	return true
end

function generic_physics_binder:save(packet)
	--printf("generic_physics_binder:save(): self.object:name()='%s'", self.object:name())
	if force_obinder then object_binder.save(self, packet) end		--110010
	xr_logic.save_obj(self.object, packet)
end

function generic_physics_binder:load(reader)
	self.loaded = true
	--printf("generic_physics_binder:load(): self.object:name()='%s'", self.object:name())
	if force_obinder then object_binder.load(self, reader) end		--110010
	xr_logic.load_obj(self.object, reader)
end

function generic_physics_binder:use_callback(obj, who)
	--TB3D_Services.packet_alert("bind physics object: use["..obj:name().."]")
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "use_callback", obj, who)
	end
	if obj:clsid() == clsid.car_s then
		dmx_cars.signaling_start(self.object)  --dmx135
	end
	amk.on_use(obj, who)	--AMK UTILS
end

function generic_physics_binder:hit_callback(obj, amount, local_direction, who, bone_index)
	amk.on_ph_obj_hit(obj, amount, local_direction, who, bone_index)	--AMK UTILS
	--printf("_bp: generic_physics_binder:hit_callback: obj='%s'", obj:name())
	self.nofixonhit=true
	if self.st.ph_on_hit then
		xr_logic.issue_event(self.object, self.st.ph_on_hit, "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "hit_callback", obj, amount, local_direction, who, bone_index)
	end
end

function generic_physics_binder:death_callback(victim, who)
	--printf("_bp: generic_physics_binder:death_callback: obj='%s'", victim:name())
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "death_callback", victim, who)
	end
    if self.particle ~= nil then
        self.particle:stop()
    end
    if self.disable_graph_point ~= nil then
        game_graph():accessible(self.disable_graph_point, true)
        --printf("GRAPH POINT ENABLED")
    end
	if self.object:spawn_ini() ~= nil and self.object:spawn_ini():section_exist("drop_box") == true then
		self.box_items:spawn_items()
	end
end
