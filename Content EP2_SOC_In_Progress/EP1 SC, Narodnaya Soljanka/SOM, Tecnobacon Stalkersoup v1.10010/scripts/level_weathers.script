--TB3D 1.0.9.9.8.9  fixed miss-spelled weather vice wather line 283, added jupitor_underground, dmx135, blowout(), cleanup, weather option,
--added labx8 to indoor, aes blowout
function my_ver() return "1.0.9.9.8.9" end
-- [[ Dynamic Weather v0.9.5 script ]] --

local ticksize = 1380
local div_minutes = 1440
local cycle_length = div_minutes 				-- * 10
local new_weather = "stormy"					-- default after blowouts

-- UNDERGROUND levels only as used for other checks
-- uses indoor weather as defined in game_maps_single.ltx
function is_indoor(level_name)
    return (level_name == "l03u_agr_underground"
            or level_name == "l04u_labx18"
            or level_name == "labx8"
            or level_name == "l08u_brainlab"
            or level_name == "l10u_bunker"
            or level_name == "l12u_sarcofag"
            or level_name == "l12u_control_monolith"
			or level_name == "jupiter_underground"
            or level_name == "peshera"
            or level_name == "av_peshera"
            or level_name == "lab_x14"
            or level_name == "digger_stash"
            or level_name == "warlab"
			or level_name == "cs_agroprom_underground"
			)
end

-- time in minutes since midnight
local function dayminute()
    return level.get_time_hours() * 60 + level.get_time_minutes()
end

-- returns true if t1 <= t <= t2 assuming 24 hour clock
local function is_time_between(t, t1, t2)
    return (t1 < t2 and (t >= t1 and t <= t2))
        or (t1 > t2 and (t >= t1 or  t <= t2))
end

-- absolute time difference between two times in minutes
local function delta_time(t1, t2)
    return (t2 + div_minutes - t1) % div_minutes
end

class "WeatherManager"		--!!!!TB3D weather cycles from environment.ltx
function WeatherManager:__init()
    self.ini = ini_file("weathers\\environment.ltx")
    self.time = 0
    self.lvl_suffix  = ""    -- suffix used for this level's weather cycle variation (if any)
    self.lvl_weather = ""    -- weather for the level as set in game_maps_single.ltx
    self.dyn_weather = ""    -- currently selected dynamic weather cycle name
    self.cur_weather = ""    -- weather that should be used right now in current level
                             -- NOTE: this is equal to lvl_weather..lvl_suffix for indoor levels
                             -- and to dyn_weather..lvl_suffix for outdoor levels 
    self.cycle_time = 0      -- the time that the current cycle has run
    self.cycles = {}         -- weather cycle info table by cycle id
    self.cycle_idx = {}      -- cycle name to cycle id lookup table
    self.trans_lists = {}    -- master list of transition lists by time of day
    self.trans_times = {}    -- corresponding table of transition times
    self.last_time_idx = 0   -- index into trans_times for last update time
    self.next_time_idx = 0   -- ditto for next update time
    self.last_time = 0       -- last update time of day in minutes since midnight
    self.next_time = 0       -- ditto for next
    local rand, res, key, val, n
    n = self.ini:line_count("weather_cycles")
    -- randomly select a cycle ID for a default cycle
    rand = math.random(n) - 1
    -- load cycle information from the .ltx
	local tmptab
    for i = 0, n - 1 do
        res, key, val = self.ini:r_line("weather_cycles", i, "", "")
        -- setup a default weather cycle for initialization etc.
        if self.default_cycle_id == nil or rand == i then
            self.default_cycle_id = key
        end
        -- temporary table of tokens from comma separated string
        tmptab = {}
        -- split the comma separated string and store the tokens
        for w in string.gmatch(val, "[%w_-]+") do 
            table.insert(tmptab, w)
        end
        -- construct the cycle info from the string tokens
        self.cycles[key]             = {}
        self.cycles[key].name        = tmptab[1]
        self.cycles[key].to          = tonumber(tmptab[2])
        self.cycles[key].from        = tonumber(tmptab[3])
        self.cycles[key].to_weight   = tonumber(tmptab[4])
        self.cycles[key].from_weight = tonumber(tmptab[5])
        -- least-frequently-used counter, incremented each time this
        -- cycle is NOT transitioned to
        self.cycles[key].skipped     = 0
        -- provide a cycle name to cycle id lookup
        self.cycle_idx[self.cycles[key].name] = key
    end
    n = self.ini:line_count("weather_transition_times")
    -- read a by-minute-of-day list of transition list sections
    for i = 0, n - 1 do
        res, key, val = self.ini:r_line("weather_transition_times", i, "", "")
        table.insert(self.trans_times, tonumber(key))
        self.trans_lists[tonumber(key)] = val
    end
    -- sort the table since reading from .ltx does not guarantee any order
    -- table needs to be sorted for the sliding time window indexes to work
    table.sort(self.trans_times)
end

function WeatherManager:dbgmsg(fmt, ...)
    if TB3D_Modders.global_debug == true then
        local msgtext = string.format("%02d:%02d idx:%d->%d,time:%02d:%02d->%02d:%02d ",
                                      level.get_time_hours(), level.get_time_minutes(),
                                      self.last_time_idx, self.next_time_idx,
                                      math.floor(self.last_time / 60), self.last_time % 60, 
                                      math.floor(self.next_time / 60), self.next_time % 60)
        msgtext = msgtext .. string.format(fmt, ...)
        msgtext = string.gsub(msgtext, "%s", "_")
        TB3D_Services.packet_alert("LEVEL WEATHERS: "..msgtext)
    end
end

-- get cycle name for the weather that should be in use right now
function WeatherManager:current_weather()
    if is_indoor(level.name()) then
        return self.lvl_weather
    end
    return self.dyn_weather .. self.lvl_suffix
end

-- update the sliding time window indexes
function WeatherManager:update_times(last_idx)
    self.last_time_idx = last_idx
    self.next_time_idx = last_idx % #self.trans_times + 1
    self.last_time = self.trans_times[self.last_time_idx]
    self.next_time = self.trans_times[self.next_time_idx]
end

-- adjust time indexes so that current time is within the window
-- that is defined by these indexes
function WeatherManager:fix_times()
    self.next_time_idx = 1
    repeat
       self:update_times(self.next_time_idx)
    until is_time_between(self.time, self.last_time, self.next_time)
end

-- setup a valid weather cycle name and the correct time indexes
-- used if savedgame is from an incompatible version and when a new game is started
function WeatherManager:convert_savedgame()
    self.cycle_time = 0
    if self.cycle_idx[self.dyn_weather] == nil then
        self.dyn_weather = self.cycles[self.default_cycle_id].name
    end
    self:fix_times()
end

function WeatherManager:force_weather()
	if new_weather then
		level.set_weather(new_weather)
		self.dyn_weather = new_weather
		self.lvl_suffix = ""
		--self.cur_weather = new_weather
		level.set_weather(new_weather)
	end
end

-- update weather selection
-- used on game load / level change with force = false to resume last weather
-- and on timed update with force = true to do dynamic weather updates
function WeatherManager:select_weather(force)
	if level.name() == "l12_stancia" and has_alife_info("aes_actor_road") and not has_alife_info("aes_timer_20000") then return end
    local tmp_dyn_weather = self.dyn_weather
    if force then
        -- load list of transitions that complete / initiate at this time of day
        local list_sect = self.trans_lists[self.next_time]
        -- update time that this weather has been active by time since last time update
        self.cycle_time = self.cycle_time + delta_time(self.last_time, self.next_time)
        -- if there is a transition from current weather at this time of day
        if self.ini:section_exist(list_sect) and self.ini:line_exist(list_sect, self.dyn_weather) then
            -- load the string with possible transitions from current weather
            local transdef = self.ini:r_string(list_sect, self.dyn_weather)
            -- get id for current weather cycle - if not found then this must be a transition
            local cycle_id = self.cycle_idx[self.dyn_weather]
            if cycle_id ~= nil then
                -- probability of transition based on the time this cycle has been active
                local trans_prob = (self.cycles[cycle_id].from_weight * self.cycle_time / 300 + 33) * 10
                if math.random(1000) <= trans_prob then
                    local min_skips        -- skip count for the least skipped cycle
                    local max_skips        -- ditto for most skipped
                    local transtab    = {} -- array of available transitions
                    local weighttab   = {} -- weight table for available transitions
                    local weightsum   = 0  -- sum of weights for these transitions
                    -- find minimum and maximum skip counts
                    min_skips = self.cycles[self.default_cycle_id].skipped
                    max_skips = min_skips
                    for cycle_id, cycle in ipairs(self.cycles) do
                        if cycle.skipped < min_skips then
                            min_skips = cycle.skipped
                        end
                        if cycle.skipped > max_skips then
                            max_skips = cycle.skipped
                        end
                    end
                    -- assume that transdef is a comma separated list of transition_name:cycle_id
                    local skipped_weight		--109989
                    for trans, cycle_id in string.gmatch(transdef, "([%w_-]+):(%d+)") do
                        -- least skipped cycle gets 0.5 weight, most skipped used gets 1.5
                        if min_skips < max_skips then
                            skipped_weight = 0.5 + (self.cycles[cycle_id].skipped - min_skips) / (max_skips - min_skips)
                        else
                            skipped_weight = 1
                        end
                        weightsum = weightsum + self.cycles[cycle_id].to_weight * skipped_weight
                        table.insert(weighttab, weightsum)
                        table.insert(transtab, trans)
                        -- use the opportunity to mark all these cycles as skipped 
                        --  note: the cycle that will be picked for transition will be "unmarked"
                        self.cycles[cycle_id].skipped = self.cycles[cycle_id].skipped + 1
                    end
                    local rand = math.random(weightsum)
                    -- use weight table for random transition selection
                    for i = 1, #weighttab do
                        if rand <= weighttab[i] then
                            self.dyn_weather = transtab[i]
                            self.cycle_time = 0
                            break
                        end
                    end
                end
            else -- current weather is a transition phase so complete the transition
                local cycle_id = self.cycle_idx[transdef]
                self.dyn_weather = transdef
                self.cycle_time = 0
                -- undo skip increment since this cycle has just been selected
                self.cycles[cycle_id].skipped = self.cycles[cycle_id].skipped - 1
            end
        end
        self:update_times(self.next_time_idx)
        if not is_time_between(self.time, self.last_time, self.next_time) then
            --self:dbgmsg("need to fix times")
            self:fix_times()
            -- HACK: transition was initiated at wrong time so undo it
            if self.cycle_idx[self.dyn_weather] == nil then
                self.dyn_weather = tmp_dyn_weather
            end
        end
		self.cur_weather = self:current_weather()
		-- if blowout is not in progress then apply the current weather
		if amk_mod.blowout() == false and (not Psy or (db.Flag2 == 0 and db.Flag3 == 0 and db.Flag4 == 0 and db.Flag5 == 0)) then
			level.set_weather(self.cur_weather)
		end
	else
		local weather_opt = amk.load_variable("option_weather", 0)
		if weather_opt > 0 then
			if self.ini:section_exist("level_suffix_table") and self.ini:line_exist("level_suffix_table", level.name()) then
				self.lvl_suffix = self.ini:r_string("level_suffix_table", level.name()) or ""
			else
				self.lvl_suffix = ""
			end
			if weather_opt == 1 then							--moderate weather
				self.dyn_weather = "grey"
			else												--sunny weather
				self.dyn_weather = "dry"
			end
			TB3D_Services.packet_alert("LEVEL WEATHERS: forced weather["..utils.to_str(self.dyn_weather).."] suffix["..utils.to_str(self.lvl_suffix).."]")
			self:select_weather(true)
		end														--otherwise default weather
		self.cur_weather = self:current_weather()
		-- if blowout is not in progress then apply the current weather
		if amk_mod.blowout() == false and (not Psy or (db.Flag2 == 0 and db.Flag3 == 0 and db.Flag4 == 0 and db.Flag5 == 0)) then
			level.set_weather(self.cur_weather)
		end
    end
    --self:dbgmsg("weather:%s,cycle_time:%d", level.get_weather(), self.cycle_time)
end

-- called on game begin, game load and level change
function WeatherManager:reset()
	if level.name() == "l12_stancia" and has_alife_info("aes_actor_road") and not has_alife_info("aes_timer_20000") then return end
    local ini = ini_file("game.ltx")
	local force_it = false
	if self.dyn_weather == "" then		--start of level
		self.time = dayminute()
		self:convert_savedgame()		--initializes vars
	end
	if self.ini:section_exist("level_suffix_table")
	   and self.ini:line_exist("level_suffix_table", level.name()) then
		self.lvl_suffix = self.ini:r_string("level_suffix_table", level.name()) or ""
	else
		self.lvl_suffix = ""
	end
	if amk.load_variable("opt_sunny", 0) < 1 then			--default weather - indoor levels only
		self.lvl_weather = utils.cfg_get_string(ini, level.name(), "weathers", db.actor, false, "", "default")
	elseif amk.load_variable("opt_sunny", 0) < 2 then		--moderate weather
        TB3D_Services.packet_alert("LEVEL WEATHERS: forced weather[grey]")
		self.lvl_weather = "default"
		self.dyn_weather = "grey"
		force_it = true
	else													--sunny weather
        TB3D_Services.packet_alert("LEVEL WEATHERS: forced weather[dry]")
		self.lvl_weather = "default"
		self.dyn_weather = "dry"
		force_it = true
	end
	if not self.time then self.time = dayminute() end   --start
	local postprocess = utils.cfg_get_string(ini, level.name(), "postprocess", db.actor, false, "")
	if postprocess ~= nil then
		level.add_pp_effector(postprocess, 999, true)	
	else
		level.remove_pp_effector(999)
	end
    self:select_weather(force_it)
end

-- save states by encoding the necessary state variables
-- to fit inside existing vanilla savegame structure
    -- encode a string with comma separated cycle:count pairs that keep
    -- track of the skip count for each cycle
    -- the first element in this list is the name of current cycle
function WeatherManager:save(F)
    local composite = self.cycle_time * div_minutes + self.last_time_idx
    local info_str = self.dyn_weather
    for id, cycle in pairs(self.cycles) do
        info_str = info_str .. "," .. cycle.name .. ":" .. cycle.skipped
    end
    F:w_stringZ(info_str)
    F:w_u32(composite)
    --TB3D_Services.packet_alert("level weathers: saved["..utils.to_str(info_str).."] composite["..utils.to_str(composite).."]")
end

-- load and decode state variables - if they don't make sense setup from scratch
function WeatherManager:load(F)
    local info_str = F:r_stringZ()
    local composite = F:r_u32()
    local lastidx = composite % div_minutes
    self.cycle_time = math.floor(composite / div_minutes)
    self.time = dayminute()
    self.dyn_weather = string.sub(info_str, string.find(info_str, "^[%w-_]*"))		-- recover current cycle name as first element of the saved info string
	local cycle_id		--109989
    for name, skipped in string.gmatch(info_str, "([%w-_]+):(%d+)") do    			-- load the skip counters from the remaining portion of the string
        cycle_id = self.cycle_idx[name]
        if cycle_id ~= nil then
            self.cycles[cycle_id].skipped = skipped
        else
            TB3D_Services.packet_alert("level weathers: Warning! unknown cycle["..utils.to_str(name).."] with skip count["..utils.to_str(skipped).."]")
            lastidx = 0   														-- set to invalid value so the savedgame is "converted"
        end
    end
    TB3D_Services.packet_alert("level weathers: loaded["..utils.to_str(self.dyn_weather).."] current cycle["..utils.to_str(cycle_id).."]")
    if lastidx > 0
       and lastidx <= #self.trans_times
       and self.cycle_time <= cycle_length  									--was 14400 in dmx
       and self.ini:line_exist("weather_dynamic", self.dyn_weather) then
        self.cur_weather = self:current_weather()
        self:update_times(lastidx)
        if is_time_between(self.time, self.last_time, self.next_time)        	-- allow up to 5 minute tolerance
           or delta_time(self.time, self.next_time) <= 5 then
            return		--valid dynamic weather
        end        
    end
    TB3D_Services.packet_alert("level weathers: savedgame is incompatible")
    self:convert_savedgame()
end

-- update function called from bind_stalker.script
function WeatherManager:update()				--109989
	if TB3D_Modders.Global_Debug then TB3D_Services.info_alert("level weathers: update["..utils.to_str(time_global()).."]") end
	if level.name() == "l12_stancia" and has_alife_info("aes_actor_road") and not has_alife_info("aes_timer_20000") then return end
    local time = dayminute()
    local update_flag = 0
    -- if weather is not what it should be so unless a blowout is underway
    -- the correct weather should be resumed
    if level.get_weather() ~= self.cur_weather then
        TB3D_Services.packet_alert("level weathers: restoring weather")
        update_flag = 2
    elseif time > self.time or self.time >= time + ticksize then					-- see if has been 1 minute
		update_flag = 1
	end
	if update_flag > 0 then															--time to update
        self.time = time
		-- check if time has increased by at least one minute
		-- care must be taken around midnight when time wraps around
		if update_flag == 1 then
			if self.time == self.next_time or not is_time_between(self.time, self.last_time, self.next_time) then
				self:select_weather(true)								-- time of next available transition is reached
			end
		else
			self:select_weather(false)									-- something makes it necessary to update now (e.g. post-blowout state)
		end
    end
	if TB3D_Modders.Global_Debug then TB3D_Services.info_alert("level weathers: update done["..utils.to_str(time_global()).."]") end
end

-- singleton object
local weather_manager = nil

function get_weather_manager()
    if weather_manager == nil then
        weather_manager = WeatherManager()
    end
    return weather_manager
end

function set_new_weather(str)
	new_weather = str
end