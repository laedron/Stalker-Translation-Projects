-- TB3D 1.1.0.0.1.0  use_binder_message, update
function my_ver() return "1.1.0.0.1.0" end

local indicator = nil
local ind_bar = nil
local crosshair = nil
local icon = nil
local ggunable = {}
local force_obinder = TB3D_Modders.use_mgun_obinder				--110010, calls into game binder (alife)
if force_binder == nil then force_binder = true end

--local function log(arg)
	--con:execute(string.gsub(tostring(arg), " ", "_"))
	--con:execute("flush")
--end

function init(obj)
	if TB3D_Modders.use_binder_message then TB3D_Services.packet_alert("bind ggun: bind["..utils.to_str(obj:name()).."] section["..obj:section().."]") end
	local new_binder = ggun_binder(obj)
	obj:bind_object(new_binder)
end

---------------------------------------------------------------------------------------------
class "ggun_binder" (object_binder)
function ggun_binder:__init(obj) super(obj)
	--log("ggun_binder:__init")
	self.initialized = false
	self.loaded = false
end 

function ggun_binder:reload(section)
	if force_obinder then object_binder.reload(self, section) end		--110010
	self.ammo_max = system_ini():r_u32(section, "ammo_mag_size")
	self.impulse_max = system_ini():r_u32(section, "hit_impulse")
	self.particle_hold = particles_object([[weapons\group_items\flame_center]])
	self.particle_fire = particles_object([[weapons\group_items\rpg7_rocket_glow]])
	self.sound_hold = sound_object([[weapons\gravigun\gravigun_hold]])
	self.sound_fire = sound_object([[weapons\gravigun\gravigun_fire]])
	self.sound_open = sound_object([[weapons\gravigun\gravigun_open]])
	self.sound_close = sound_object([[weapons\gravigun\gravigun_close]])
	self.sound_pickup = sound_object([[weapons\gravigun\gravigun_pickup]])
	self.sound_drop = sound_object([[weapons\gravigun\gravigun_drop]])
	self.sound_nohold = sound_object([[weapons\gravigun\gravigun_nohold]])
	self.sound_nofire = sound_object([[weapons\gravigun\gravigun_nofire]])
	self.nofire_stop_time = 0
	--log("ggun_binder:reload")
end

function ggun_binder:reinit()
	if force_obinder then object_binder.reinit(self) end			--110010
	--log("ggun_binder:reinit")
end

function ggun_binder:net_spawn(data)
	if force_obinder and not object_binder.net_spawn(self, data) then return false end		--110010
	--log("ggun_binder:net_spawn")
	self.lbutton_pressed = false
	self.rbutton_pressed = false
	self.first_update = true
	self.target = nil
	self.last_ammo_elapsed = 0
	self.last_accuracy = 0
	self.last_in_slot = false
	return true
end

function ggun_binder:update(delta)
	if _g.is_disconnecting then return end
	if TB3D_Modders.Global_Debug then
		TB3D_Services.packet_alert("gravi gun: update["..game.get_game_time():timeToString(game.CTime.TimeToMilisecs).."] delta <<<<["..utils.to_str(delta).."]>>>>")
	end
	if force_obinder then object_binder.update(self, delta) end				--110010
	local ammo_elapsed = self.object:get_ammo_in_magazine()
	local accuracy = db.actor:accuracy()
	--position particles and sounds
	local pos = vector()
	pos:mad(device().cam_pos,device().cam_dir,0.75)
	pos:mad(pos,device().cam_top,-0.3)
	pos:mad(pos,device().cam_right,0.3)
	self.gun_end_pos = vector():set(pos.x,pos.y,pos.z)
	if self.first_update then
		self.first_update = false
		self.last_ammo_elapsed = ammo_elapsed
		self.last_accuracy = accuracy
		return
	end
	-- generate events to pick up and putting away
	local active_item = db.actor:active_item()
	local qwerty = active_item and (self.object:id() == active_item:id())
	if qwerty then 
		if not self.last_in_slot then -- only took
			self.last_in_slot = true
			self:OnTake()
		else -- just keep
			self:OnHold(delta)
		end
	else
		if self.last_in_slot then -- only removed
			self.last_in_slot = false
			self:OnRemove()
		end
		return -- no longer does anything
	end
	-- Determine what to do with the left mouse button
	local da = self.last_ammo_elapsed - ammo_elapsed
	if da > 0 then -- it's either the first press, or hold
		if not self.lbutton_pressed then -- first press
			self:OnLButtonDown()
			self.lbutton_pressed = true
		else -- retention
			self:OnLButtonHold(delta)
		end
	elseif self.lbutton_pressed then -- release
		self:OnLButtonUp()
		self.lbutton_pressed = false
	end
	self.last_ammo_elapsed = ammo_elapsed
	---- Similarly, are working on for the right mouse button ---------
	if accuracy*1000 < 1 then -- it's either the first press, or hold
		if not self.rbutton_pressed then -- first press
			self:OnRButtonDown()
			self.rbutton_pressed = true
		else -- retention
			self:OnRButtonHold(delta)
		end
	elseif self.rbutton_pressed then -- release
		self:OnRButtonUp()
		self.rbutton_pressed = false
	end
	-- track position in partiklov fastcall-e, update does not have time to work out
	self.object:set_fastcall( self.sound_particle_fastcall, self )
	--track the fate of the cast from the capture object
	if self.thrown then
		self:track_thrown()
	end
	if TB3D_Modders.Global_Debug then
		TB3D_Services.packet_alert("gravi gun: update["..game.get_game_time():timeToString(game.CTime.TimeToMilisecs).."] <<<<done>>>>")
	end
end

function ggun_binder:net_destroy()
	--TB3D_Services.packet_alert("bind ggun: net destroy")
	if TB3D_Modders.use_destroy_message then TB3D_Services.packet_alert("bind ggun: net destroy["..utils.to_str(self.object:name()).."] section["..self.object:section().."]") end
	self.rbutton_pressed = false
	self.lbutton_pressed = false
	self:HideCrosshair()
	ggunable = {}
	if force_obinder then object_binder.net_destroy(self) end			--110010
	if TB3D_Modders.use_destroy_message then TB3D_Services.packet_alert("bind ggun: net destroy["..utils.to_str(self.object:name()).."] done") end
	--TB3D_Services.packet_alert("bind ggun: net destroy done")
end

function ggun_binder:net_save_relevant()
	--log("ggun_binder:net_save_relevant")
	return true
end

function ggun_binder:save(packet)
	--log("ggun_binder:save")
	if force_obinder then object_binder.save(self, packet) end			--110010
end

function ggun_binder:load(reader)
	self.loaded = true
	--log("ggun_binder:load")
	if force_obinder then object_binder.load(self, reader) end		--110010
end

-----------------------------------------------------------------------------------
local function check_object_in_frustrum(v1)
end

function ggun_binder:sound_particle_fastcall()
	if self.rbutton_pressed or self.lbutton_pressed then
		local pos = vector()
		pos:mad(device().cam_pos,device().cam_dir,0.75)
		pos:mad(pos,device().cam_top,-0.3)
		pos:mad(pos,device().cam_right,0.3)
		self.gun_end_pos = vector():set(pos.x,pos.y,pos.z)
		if self.sound_hold:playing() then
			self.sound_hold:set_position(self.gun_end_pos)
		end
		if self.sound_fire:playing() then
			self.sound_fire:set_position(self.gun_end_pos)
		end
		if self.sound_open:playing() then
			self.sound_open:set_position(self.gun_end_pos)
		end
		if self.sound_close:playing() then
			self.sound_close:set_position(self.gun_end_pos)
		end
		if self.sound_pickup:playing() then
			self.sound_pickup:set_position(self.gun_end_pos)
		end
		if self.sound_drop:playing() then
			self.sound_drop:set_position(self.gun_end_pos)
		end
		if self.sound_nohold:playing() then
			self.sound_nohold:set_position(self.gun_end_pos)
		end
		if self.sound_nofire:playing() then
			self.sound_nofire:set_position(self.gun_end_pos)
		end
		if self.particle_hold:playing() then
			--self.particle_hold:move_to(self.gun_end_pos,vector():set(0,0,0))
			self.particle_hold:stop()
			self.particle_hold:play_at_pos(self.gun_end_pos)
		end
		if self.particle_fire:playing() then
			self.particle_fire:move_to(self.gun_end_pos,vector():set(0,0,0))
		end
		return false
	else
		if self.particle_hold:playing() then
			self.particle_hold:stop()
			if (time_global() < self.nofire_stop_time) then
				self.particle_hold:play_at_pos(self.gun_end_pos)
				return false
			end
		end
		return true
	end
end

function ggun_binder:OnRButtonDown(no_sound) -- was L
	ggunable = {}
	if not no_sound then
		self.block_nohold = nil
		if not self.sound_open:playing() then
			self.sound_open:play_at_pos(db.actor, self.gun_end_pos)
		end
	else
		self.block_nohold = true
	end
	if not self.particle_hold:playing() then
		self.particle_hold:play_at_pos(self.gun_end_pos)
	end
	-- looking for goal: an online facility with the physical shell of the capture radius and the cone of sight
	local cobj
	local ps
	for id=first_object,last_object do
		cobj = level.object_by_id(id)
		if cobj then -- is an online facility
			ps = cobj:get_physics_shell()
			if ps and cobj:mass() < 1000 then -- is the envelope
				ggunable[id] = true
			end 
		end 
	end
end

function ggun_binder:capture(cone,dist)
	if not cone then cone = 0.999 end -- actually - cos of the angle of capture at a distance dist
	if not dist then dist = 13 end -- distance capture
	local back = 2 --  displacement of the cone of capture behind the actor.
	dist = dist + back
	local capt_id = nil
	local capt_obj = nil
	local dist_min = 1.2*dist
	local cone_max = 0.8*cone
	local cobj
	local rvec
	local r
	local proj
	local cos_a
	for id,v in pairs (ggunable) do
		cobj = level.object_by_id(id)
		if cobj and cobj:get_physics_shell() then
			rvec = cobj:center():sub(device().cam_pos:mad(device().cam_dir, -2.0))
			r = rvec:magnitude()
			if r < 1.1*dist and r > back + 1 then -- within a radius of capture, but before the actor
				proj = rvec:dotproduct(device().cam_dir)
				cos_a = proj/r
				if cos_a > cone then -- falls into the cone of sight
					if cos_a >= cone_max and r < dist_min then 
					-- if the subject of at least no farther from the axis of sight than the previous selected, 
					-- but the closer the distance, then choose it
						dist_min = r
						cone_max = cos_a
						capt_id = id
						capt_obj = cobj
					end
				end
			end
		else
			ggunable[id] = nil
		end
	end
	if capt_id and capt_obj then -- if you have chosen a suitable object for capture
		self.target = capt_obj -- remember
		self.target_id = capt_id -- remember id
		self.capture_nomove_counter = 3
		capt_obj:set_const_force(vector():set(0,1,0), capt_obj:mass()*19.62, value_65535*value_65535)
	else
		if not self.sound_nohold:playing() then
			if not self.block_nohold then
				self.sound_nohold:play_at_pos(db.actor, self.gun_end_pos)
				self.block_nohold = true
			end
		end
	end
end

function ggun_binder:OnRButtonHold(delta) -- was L
	--self:UpdateBatteryIndicator(self.object:get_ammo_in_magazine())
	if self.captured then
		if not self.sound_pickup:playing() then
			if not self.sound_hold:playing() then
				self.sound_hold:play_at_pos(db.actor, self.gun_end_pos, 0, 1)
			end
		end
	end
	if not self.particle_hold:playing() then
		self.particle_hold:play_at_pos(self.gun_end_pos)
	end
	if not self.target then
		self:capture(0.999,13)
	end
	if self.target then
		if not level.object_by_id(self.target_id) then
			-- Protection from freezing binder with the disappearance of the trapped gravity gun facility 
			-- (keg exploded, disappearing from time to time chip box, etc.)
			ggunable[self.target_id] = nil
			self.target = nil
			self.target_id = nil
			return
		end
		local ps = self.target:get_physics_shell()
		if not ps then -- protection against relegation when taking captured object in your inventory HS
			self:OnRButtonUp() 
			return
		end
		if self.target_id == self.thrown then
			self.thrown = nil
			last_lvel = nil
			last_avel = nil
		end
		local current_velocity = vector()
		ps:get_linear_vel(current_velocity)
		-- Now simulate a situation close to capture, when the subject should buzuslovno
		-- located in the "Focus" gravipushki
		--local desired_height = device().cam_pos.y -- height at which the object will float
		local aim_pos = device().cam_pos:mad(device().cam_dir, 2.0) -- point of destination
		local rvec = aim_pos:sub(self.target:center()) -- vector from current position to the destination
		local r = rvec:magnitude() -- its length
		if not self.captured and (r < 0.5 or device().cam_pos:distance_to_sqr(self.target:center()) < 5) then -- if the object is the first time approached the point of retention, we believe it captured
			self.captured = true
			if not self.sound_pickup:playing() then
				self.sound_pickup:play_at_pos(db.actor, self.gun_end_pos)
			end
		end
		-- should give a kick to at sleduyushem apdeyte object found himself at the point of destination
		-- maybe it's worth the speed limit. Let's see...
		-- speed that gives a kick consider the formula
		-- V = <momentum> &lt;mass&gt;
		-- On the other hand the rate should be equal
		-- V = r / dt
		-- Here r - displacement vector
		-- dt - time. Equate it to the interval update
		-- <momentum> <weight> = r / dt    ==>     <pulse> = <mass> * r / dt
		-- give a short lag - the error margin for the time step
		local impulse = rvec:mul(0.7*self.target:mass() / (1e-3*delta))
		-- we must now calculate the current momentum
		local current_impulse = current_velocity:mul(self.target:mass())
		-- the resulting momentum is the difference between desired and current
		local result_impulse = impulse:sub(current_impulse):mul(100)
		local imp = result_impulse:magnitude()
		local imp_cap = self.impulse_max*r*self.target:mass()/100
		--if r > 5 then imp_cap = imp_cap*0.75 end -- weakening of gravity away
		if not self.captured then -- if the object has not yet been captured, tightens careful not to get them on the head
			local vel = vector()
			ps:get_linear_vel(vel)
			local vm = vel:magnitude()
			local vel_n = vector():set(vel.x,vel.y,vel.z):dotproduct(device().cam_dir)
			-- check on speed: if the goal is not the focus of seizure
			if imp > imp_cap then -- accelerated, but carefully
				result_impulse:set_length(imp_cap)
			end
			if vel_n < -15 then -- speed limit to avoid samovynosa captured object
				local break_impulse = device().cam_dir:mul(-1*vel_n*result_impulse:magnitude()/vm)
				result_impulse:add(break_impulse)
			end
			-- checking for immobility: if the goal is not the focus of seizure and almost motionless, then into something rested.
			if vm < 0.5 then
				self.capture_nomove_counter = self.capture_nomove_counter - 1
			else
				self.capture_nomove_counter = 3
			end
			-- checking for the failure of capture: if not captured until the end goal rested, and a long time - to lose grip
			if self.capture_nomove_counter == 0 then
				self.target:set_const_force(vector():set(0,1,0), -self.target:mass()*19.62, value_65535*value_65535)
				ggunable[self.target_id] = nil
				self.target = nil
				self.target_id = nil
				self.block_nohold = nil
			end
		end
		ps:apply_force(result_impulse.x, result_impulse.y, result_impulse.z)
	end -- if self.target ...
end -- ggun_binder:OnLButtonHold

function ggun_binder:OnRButtonUp() -- was L
	--log("ggun_binder:OnLButtonUp___start")
	if self.sound_hold:playing() then
		self.sound_hold:stop_deffered()
	end
	if not self.sound_close:playing() then
		self.sound_close:play_at_pos(db.actor, self.gun_end_pos)
	end
	if self.particle_hold:playing() then
		self.particle_hold:stop()
	end
	if self.captured then
		self.captured = nil
		if not self.sound_drop:playing() then
			self.sound_drop:play_at_pos(db.actor, self.gun_end_pos)
		end
	end
	if self.target then -- if released, is that the release
		-- returned to the force of gravity !!!!!!! do not forget to check box and then enter the inclusion ST
		-- because the goal may be captured, but the force of gravity will be included
		-- only from a distance
		self.target:set_const_force(vector():set(0,1,0), -self.target:mass()*19.62, value_65535*value_65535)
		--local ps = self.target:get_physics_shell()
		--local impulse = device().cam_dir:mul(self.target:mass()*10000)
		--ps:apply_force(impulse.x, impulse.y, impulse.z)
		self.target = nil
	end
	--log("ggun_binder:OnLButtonUp___end")
end

function ggun_binder:OnLButtonDown() -- was R
	if self.captured then
		self.captured = nil
	end
	if self.target then
		self.target:set_const_force(vector():set(0,1,0), -self.target:mass()*19.62, value_65535*value_65535)
		local ps = self.target:get_physics_shell()
		local impulse = device().cam_dir:mul(self.target:mass()*5000)
		ps:apply_force(impulse.x, impulse.y, impulse.z)
		self.pulse = impulse
		self.thrown = self.target_id
		self.throw_time = time_global()
		ggunable[self.target_id] = nil
		self.target = nil
		self.target_id = nil
		self.sound_fire:play_at_pos(db.actor, self.gun_end_pos)
		self.particle_fire:play_at_pos(self.gun_end_pos)
	else
		if table.getn(ggunable) == 0 then
			self:OnRButtonDown(0)
		end
		self:capture(0.99,4)
		if self.target then
			self.target:set_const_force(vector():set(0,1,0), -self.target:mass()*19.62, value_65535*value_65535)
			local ps = self.target:get_physics_shell()
			local impulse = device().cam_dir:mul(self.target:mass()*5000)
			ps:apply_force(impulse.x, impulse.y, impulse.z)
			self.target = nil
			self.target_id = nil
			self.particle_fire:play_at_pos(self.gun_end_pos)
			self.sound_fire:play_at_pos(db.actor, self.gun_end_pos)
		else
			self.nofire_stop_time = time_global() + 100
			self.sound_nofire:play_at_pos(db.actor, self.gun_end_pos)
		end
	end
	--log("ggun_binder:OnRButtonDown")
end

function ggun_binder:OnLButtonHold(delta) -- was R
	--log("ggun_binder:OnRButtonHold")
end

function ggun_binder:OnLButtonUp() -- was R
end

function ggun_binder:OnTake()
	--log("ggun_binder:OnTake")
	self:ShowCrosshair()
end

function ggun_binder:OnHold(delta)
	local ammo = self.object:get_ammo_in_magazine()
	if ammo < self.ammo_max then ammo = ammo + 1 end
	self.object:set_ammo_elapsed(ammo)
end

function ggun_binder:OnRemove()
	--log("ggun_binder:OnRemove")
	self.rbutton_pressed = false
	self.lbutton_pressed = false
	self:HideCrosshair()
end

function ggun_binder:track_thrown()
	if self.thrown then
		local obj = level.object_by_id(self.thrown)
		if obj then
			local pos = obj:position()
			local dist = pos:distance_to(device().cam_pos)
			if not check_on_level(pos) then -- If the object flew beyond the level of,
				alife():release(alife():object(self.thrown),true) -- remove it from harm's way
			end
			local ps = obj:get_physics_shell()
			if ps then
				if self.throw_time and (time_global() > self.throw_time + 500) then
					ggunable[self.thrown] = true -- return a thrown object in the list of captured
					self.throw_time = nil
					if not string.find(obj:section(),"explosive") and not string.find(obj:section(),"af_") then 
					-- if the impact is nothing special should not happen, then follow the subject further there is no need
						self.thrown = nil
						self.throw_time = nil
						self.last_lvel = nil
						self.lvel = nil
						self.last_avel = nil
						self.avel = nil
						return
					end
				end
				self.lvel = vector()
				ps:get_linear_vel(self.lvel)
				self.avel = vector()
				ps:get_angular_vel(self.avel)
				if not self.last_lvel or not self.last_avel then
					self.last_lvel = self.pulse -- device().cam_dir:mul((5000/obj:mass()))
					self.last_avel = self.avel
					return
				end
				local lvel_mag = self.lvel:magnitude()
				local last_lvel_mag = self.last_lvel:magnitude()
				local lvel_norm = vector():set(self.lvel.x, self.lvel.y, self.lvel.z):normalize()
				local last_lvel_norm = vector():set(self.last_lvel.x, self.last_lvel.y, self.last_lvel.z):normalize()
				local avel_mag = self.avel:magnitude()
				local last_avel_mag = self.last_avel:magnitude()
				local avel_norm = vector():set(self.avel.x, self.avel.y,  self.avel.z):normalize()
				local last_avel_norm = vector():set(self.last_avel.x, self.last_avel.y, self.last_avel.z):normalize()
				local cos_l = lvel_norm:dotproduct(last_lvel_norm)
				local cos_a = avel_norm:dotproduct(last_avel_norm)
				-- catch a thrown object hit about anything.
				if cos_l < 0.86 or (cos_l < 0.99 and dist > 3) then -- primary indicator of impact - to change the direction of the vector of linear velocity
					if (cos_a < 0.99 and last_avel_mag ~= 0 and avel_mag ~= 0) or	(last_avel_mag == 0 and avel_mag ~= 0) then
						-- fuse of false positives: at the top of the steep hanging trajectory direction of the linear velocity varies, without hitting
						-- monitor changes in angular velocity. Or vrasheniya object was not (the angular velocity = 0), but it appeared
						-- either direction of the angular velocity has changed markedly in a short time (cos of the angle between the old angular velocity and the new  < 0.99)
						local sect = obj:section()
						if string.find(sect,"explosive") then
							obj:explode()
						elseif string.find(sect,"af_") then
							af_activate(sect,obj:position(),self.thrown)
						end
						self.thrown = nil
						self.throw_time = nil
						self.last_lvel = nil
						self.lvel = nil
						self.last_avel = nil
						self.avel = nil
						return
					end
				end
				self.last_lvel = self.lvel
				self.last_avel = self.avel
			end
		else
			self.thrown = nil
			self.throw_time = nil
			self.last_lvel = nil
			self.lvel = nil
			self.last_avel = nil
			self.avel = nil
			return
		end
	else
		self.thrown = nil
		self.throw_time = nil
		self.last_lvel = nil
		self.lvel = nil
		self.last_avel = nil
		self.avel = nil
		return
	end
end

function check_on_level(pos)
	return pos.y > level.get_bounding_volume().min.y
end

function ggun_binder:ShowCrosshair()
	local ar = device().aspect_ratio
	if not crosshair then
		local scale_x = 32
		local scale_y = math.floor(scale_x*0.8/ar)
		crosshair = CUIStatic()
		crosshair:Init(513-scale_x/2,385-scale_y/2,scale_x,scale_y)
		crosshair:InitTexture("wpn\\gravigun\\crosshair")
		crosshair:SetStretchTexture(true)
		get_hud():AddDialogToRender(crosshair)
	end
	if not icon then
		local pos_x
		local scale_x = 170
		if ar > 0.75 then
			pos_x = 975
			scale_x = 170
		else
			pos_x = 996
			scale_x = 150
		end
		local scale_y = math.floor(scale_x/2*0.8/ar)
		icon = CUIStatic() --740
		icon:Init(pos_x-scale_x/2,739-scale_y/2,scale_x,scale_y)
		icon:InitTexture("wpn\\gravigun\\gravigun_icon")
		icon:SetStretchTexture(true)
		get_hud():AddDialogToRender(icon)
	end
end

function ggun_binder:HideCrosshair()
	if crosshair then
		get_hud():RemoveDialogToRender(crosshair)
		crosshair = nil
	end
	if icon then
		get_hud():RemoveDialogToRender(icon)
		icon = nil
	end
end

----------------------------- ACTIVATION ARTOV GRAVIGUN

function af_activate(sect,pos,id)
	local ini = system_ini()
	if not ini:line_exist("wpn_gravigun", sect) then return end
	local strng = ini:r_string("wpn_gravigun", sect)
	local anomaly_params = parse_data(strng)
	local radius = math.random((anomaly_params[2]*100),(anomaly_params[3]*100))/100
	local power = math.random((anomaly_params[4]*100),(anomaly_params[5]*100))/100
	an_spawn(anomaly_params[1],radius,pos,db.actor:level_vertex_id(),db.actor:game_vertex_id(),power)
	if ini:line_exist(anomaly_params[1], "blowout_particles") then
		local part = ini:r_string(anomaly_params[1], "blowout_particles")
		local particle = particles_object(part)
		particle:play_at_pos(pos)
	end
	if ini:line_exist(anomaly_params[1], "blowout_sound") then
		local snd = ini:r_string(anomaly_params[1], "blowout_sound")
		local sound = sound_object(snd)
		sound:play_at_pos(level.object_by_id(id),pos)
	end
	alife():release(alife():object(id),true)
end

-- Not all anomalies is working 100% correctly, long-privatized, AMC Forum...
function an_spawn(anom_name,plosh,position,level_vertex_id,game_vertex_id,powers_a,time_dangeros)
	local obj = alife():create(anom_name,position,level_vertex_id,game_vertex_id)
	local pac = net_packet()
	obj:STATE_Write(pac)
	local game_vertex_id = pac:r_u16()
	local distance = pac:r_float()
	local direction = pac:r_u32()
	local level_vertex_id = pac:r_u32()
	local object_flags = pac:r_s32()
	local custom_data = pac:r_stringZ()
	local story_id = pac:r_s32()
	local spawn_story_id = pac:r_s32()
	local shape_count = pac:r_u8()
	local shape_type
	local center = {}
	local plosh
	local box = {}
	for i=1,shape_count do
		shape_type = pac:r_u8()
		if shape_type == 0 then
			center = pac:r_vec3()
			plosh = pac:r_float()
		else
			box = pac:r_matrix()
		end
	end
	local restrikror_type = pac:r_u8()
	local powers = pac:r_float()
	local owner_id = pac:r_s32()
	local on_off_mode_enabled_time = pac:r_u32()
	local on_off_mode_disabled_time = pac:r_u32()
	local on_off_mode_shift_time = pac:r_u32()
	local offline_interactive_radius = pac:r_float()
	local artefact_spawn_places_count = pac:r_u16()
	local artefact_position_offset = pac:r_s32()
	local last_spawn_time_present = pac:r_u8()
	if pac:r_elapsed()~= 0 then 
		--TB3D_Services.abort_alert("BGUN an spawn: left= "..pac:r_elapsed())
	end
	pac:w_begin(game_vertex_id)
	pac:w_float(distance)
	pac:w_u32(direction)
	pac:w_u32(level_vertex_id)
	pac:w_u32(object_flags)
	pac:w_stringZ(custom_data)
	pac:w_s32(story_id)
	pac:w_s32(spawn_story_id)
	pac:w_u8(1)
	pac:w_u8(0)
	local sphere_center = vector()
	sphere_center:set(0,0,0)
	pac:w_vec3(sphere_center)
	pac:w_float(plosh)
	pac:w_u8(restrikror_type)
	if powers_a ~= nil then 
		powers = powers_a 
	end
	pac:w_float(powers)
	if time_dangeros == nil then 
		owner_id = bit_not(0) 
	else 
		owner_id = time_dangeros 
	end
	pac:w_u32(owner_id)
	pac:w_u32(on_off_mode_enabled_time)
	pac:w_u32(on_off_mode_disabled_time)
	pac:w_u32(on_off_mode_shift_time)
	pac:w_float(offline_interactive_radius)
	pac:w_u16(artefact_spawn_places_count)
	pac:w_u32(artefact_position_offset)
	pac:w_u8(last_spawn_time_present)
	pac:r_seek(0)
	obj:STATE_Read(pac,pac:w_tell())
	return obj
end

function parse_data(str)
	local string_parts = {}
	if str == nil then
		string_parts[1] = nil
		return string_parts
	end
	local str_beg,str_end
	str_end = str
	local split_pos = find_split_pos(str_end)
	while split_pos ~= nil do
		str_beg, str_end = split_string(str_end,split_pos)
		table.insert(string_parts,str_beg)
		split_pos = find_split_pos(str_end)
	end
	table.insert(string_parts,str_end)
	return string_parts
end

function find_split_pos(str)
	local split_pos = string.find(str,",")
	if split_pos == nil then
		return nil
	end
	local br1_pos = string.find(str,"(",1,true)
	local br2_pos = string.find(str,")",1,true)
	if br1_pos ~= nil and br2_pos ~= nil and br1_pos < br2_pos and split_pos > br1_pos then
		local str_end1 = string.sub(str,(br2_pos +1),string.len(str))
		if string.find(str_end1,",") ~= nil then
			split_pos = br2_pos + string.find(str_end1,",")
		else
			split_pos = nil
		end
	end
	return split_pos
end

function split_string(str,split_pos)
	local str_beg = (string.sub(str,1,split_pos-1))
	local str_end = string.sub(str,(split_pos+1),string.len(str))
	return str_beg,str_end
end
