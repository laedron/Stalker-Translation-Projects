--TB3D 1.0.9.9.2.6 new 10/15/12
function my_ver() return "1.0.9.9.2.6" end
class "action_process_hit"

function action_process_hit:__init(obj, storage)
	self.object = obj
	self.st = storage
end

function action_process_hit:hit_callback(obj, amount, local_direction, who, bone_index)
	if amount > 0 then
		if TB3D_Modders.use_combat_message then TB3D_Services.packet_alert("xr hit: HIT_CALLBACK["..obj:name().."] by["..who:name().."] amount["..utils.to_str(amount).."] bone["..utils.to_str(bone_index).."]") end
		if who then
			db.storage[obj:id()].hit.who = who:id()
		else
			db.storage[obj:id()].hit.who = -1
		end
		if db.storage[self.object:id()].active_scheme then
			xr_logic.try_switch_to_another_section(obj, self.st, db.actor)
		end
	end
end

----------------------------------------------------------------------------------------------------------------------
-- binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, storage) 	
 	local new_action = this.action_process_hit(npc, storage)
	storage.action = new_action
end

function set_hit_checker(npc, ini, scheme, section)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	st.logic = xr_logic.cfg_get_switch_conditions(ini, section, npc)
	xr_logic.subscribe_action_for_events(npc, st, st.action)
end

function disable_scheme(npc, scheme)
	--npc:set_callback(callback.hit, nil)
	local st = db.storage[npc:id()][scheme]
	if st then
		xr_logic.unsubscribe_action_from_events(npc, st, st.action)
	end
end

