--<!-- TB3D 1.1.0.0.0.0   added scheme alert, optimized, removed npc hit, hit_callback, blow(), blowout_type(), optimized, gar_sniper_bandit, gar_wounded_bandit, evaluator_outside:evaluate
function my_ver() return "1.1.0.0.0.0" end
-----------------------------------------------------------------------------------
-- first created: 2007 Dmitri 'Red75' Roschin, Blowout hide v0.25 Behavioral scheme 
-----------------------------------------------------------------------------------

local string_find = string.find

evid_blowout=18572
evid_outside=evid_blowout+1
evid_preblowout=evid_blowout+2
evid_anomaly=evid_blowout+3
--evid_regen=evid_blowout+4

actid_runtohide=evid_blowout
actid_inhide=evid_blowout+1
actid_preblow=evid_blowout+2
actid_monopray=evid_blowout+3
actid_anomaly=evid_blowout+4

class "evaluator_anomaly" (property_evaluator)

function evaluator_anomaly:__init(st) super(nil,"evaluator_anomaly")
  self.st=st
  self.prevstr=""
  self.st.anomnotdone=false
  self.st.prevanom=""
  self.st.curanom=""
end

function evaluator_anomaly:evaluate()
  local npc=self.object
  if not self.prev_pos then
    self.prev_pos=vector():set(0,-100,0)
  end
  if self.prev_pos:distance_to(npc:position())>15 then
    self.st.avg_dir=npc:position():sub(self.prev_pos):normalize()
    self.prev_pos=npc:position()
    local list=amk_anoms.get_anomaly_list(npc,20)
    for i,o in ipairs(list) do
			amk_anoms.add_restriction(npc,o.id,o.name)
    end
  end
  return amk_anoms.have_pending_sync(npc)
end

class "evaluator_blowout" (property_evaluator)

function evaluator_blowout:__init(st) super(nil,"evaluator_blowout")  
  self.st=st
  self.prevblow=0
end

function evaluator_blowout:evaluate()
	local npc=self.object
	if TB3D_Modders.use_scheme_message then TB3D_Services.packet_alert("BLOW SCHEME: eval blowout ["..utils.to_str(npc:character_name()).."]") end
	local blowout=TB3D_Services.blow() 							--109980
	if blowout and TB3D_Services.blowout_type() == 0 and not xr_wounded.is_wounded(npc) then
		if self.prevblow == huddle_up and blowout ~= huddle_up then
			self.prevblow=blowout
			--npc.health=1
		end
		if blowout == get_nervous then			--109980
			if self.st.out_rest then
				npc:add_restrictions(self.st.out_rest,"") --self.st.in_rest)
				self.st.out_rest=nil
				self.st.in_rest=nil
			end
			self.st.need_run=false
		elseif blowout == huddle_up then				--109980
			if TB3D_Modders.blowout_npc == true then
				if self.hittime==nil or self.hittime<time_global() then
					self.hittime=time_global()+1000
					if amk_mod.on_blowout_hit(npc,self.st.hide) then
						self.st.need_run=true
						if npc:alive() then
							xr_wounded.hit_callback(npc:id())
						end
						hit_callback(npc)
					end
				end
			end
		end
		if self.st.washitat and self.st.washitat>time_global() then
			return false
		end  
		return (blowout > get_nervous and blowout < can_leave) and (not self.st.nohide)		--109980
	end
	return false
end

class "evaluator_monolith_blowout" (property_evaluator)

function evaluator_monolith_blowout:__init(st) super(nil,"evaluator_monolith_blowout")  
  self.st=st
end

function evaluator_monolith_blowout:evaluate()
	local blowout=TB3D_Services.blow() 							--109980
	if blowout and blowout == huddle_up then
		if TB3D_Services.blowout_type() == 0 then
			return true
		end
	end
	return false
end

class "evaluator_preblowout" (property_evaluator)

function evaluator_preblowout:__init(st) super(nil,"evaluator_preblowout")  
  self.st=st
end

function evaluator_preblowout:evaluate()
	local blowout=TB3D_Services.blow() 							--109980 
	if blowout and blowout == get_nervous then
		if TB3D_Services.blowout_type() == 0 then
			return true
		end
	end
	return false
end

class "evaluator_outside" (property_evaluator)

function evaluator_outside:__init(st) super(nil,"evaluator_outside")  
  self.st=st
  self.prev=false
  self.uptime=nil
end

local ret_points={}
function evaluator_outside:evaluate()
	local blowout=TB3D_Services.blow() 							--109980
	if blowout and TB3D_Services.blowout_type() == 0 then
		local npc=self.object
		if TB3D_Modders.use_scheme_message then
			TB3D_Services.packet_alert("BLOW SCHEME: eval inhide execute["..utils.to_str(npc:character_name()).."]")
		end
		if npc.alive and not npc:alive() then return false end
		if self.st.washitat and self.st.washitat>time_global() then
			return false
		end
		self.st.washitat=nil
		if blowout >= run_hide then
			if self.st.nohide then
				-- If the shelter can not be found, then ignore the release of
				return false
			end
			-- For Phase 2 of the soluble NPCs running out of hiding if there is an enemy or a danger
			--if level.name() ~= "l01_escape" then															--causes block post attack, removed 109980
				--if npc:best_danger() and npc:best_danger():type() == danger_object.grenade then
					--return false
				--end
			--end
			local inhide=amk_mod.check_npc_in_hideout(npc,self.st.hide)
			local retpt=false
			for i,o in ipairs(ret_points) do
				if o.pos:distance_to(npc:position())<0.7 then
					retpt=true
					break
				end
			end
			if self.prev and (not inhide) and (not retpt) then
				table.insert(ret_points,{pos=npc:position()})	-- NPC tries to climb out of the shelter. Put an end return
			end
			self.prev=inhide
			inhide=inhide and (not retpt)	-- NPC is considered to be got out of the shelter if it is outside or near the cusp
			if inhide then
				if self.uptime and self.uptime>time_global() then	-- If the NPC has gone into hiding, then give him another 1 second to go deeper
					--if npc:character_name()=="Wolf" then amk.mylog(npc:character_name().." outside1") end
					return true  -- Already in the shelter, but a second has not yet passed
				elseif self.uptime and self.uptime<=time_global() then
					-- In the woods. A second just passed
				elseif not self.uptime then
					-- Just went to the shelter
					self.uptime=time_global()+1000
					--if npc:character_name()=="Wolf" then amk.mylog(npc:character_name().." outside2") end
					--TB3D_Services.packet_alert("BLOW SCHEME: eval inhide execute["..utils.to_str(npc:character_name()).."] return[true]")
					return true
				end
				self.st.need_run=false
			else
				-- Not in hiding
				self.uptime=nil
			end
			if TB3D_Modders.use_scheme_message then TB3D_Services.packet_alert("BLOW SCHEME: eval inhide execute["..utils.to_str(npc:character_name()).."] return not inhide["..utils.to_str(inhide).."]") end
			return (not inhide)
		else
			self.st.hidefound=nil
			--return false
		end
		--self.st.hidefound=nil
		if TB3D_Modders.use_scheme_message then TB3D_Services.packet_alert("BLOW SCHEME: eval inhide execute["..utils.to_str(npc:character_name()).."] return[false]") end
	end
	return false
end

class "action_anomaly" (action_base)

function action_anomaly:__init(st) super(nil,"action_anomaly")
  self.st=st
end

function action_anomaly:initialize()
  action_base.initialize(self)
  local npc=self.object
	amk_anoms.syncronize(npc)
	npc:set_path_type(game_object.level_path)
	npc:set_detail_path_type(move.line)
	npc:set_desired_position()
	npc:set_desired_direction()
	local lvid=npc:vertex_in_direction(npc:level_vertex_id(),npc:direction(),2)
	utils.send_to_nearest_accessible_vertex(npc,lvid)
end

function action_anomaly:execute()
	action_base.execute(self)
	if TB3D_Modders.use_scheme_message then 
		local npc=self.object
		TB3D_Services.packet_alert("BLOW SCHEME: action anomaly execute["..utils.to_str(npc:character_name()).."]")
		local inr=npc:in_restrictions()
		for r in string.gmatch(inr, "[^,]+") do
			TB3D_Services.packet_alert("BLOW SCHEME: restrictor["..r.."]")
		end
	end
end

class "action_runtohide" (action_base)

function action_runtohide:__init(st) super(nil,"action_runtohide")
  self.st=st
end

function action_runtohide:initialize()
  action_base.initialize(self)
  local npc=self.object
  npc:set_detail_path_type(move.line)
  npc:set_path_type(game_object.level_path)
  if TB3D_Modders.use_scheme_message then TB3D_Services.packet_alert("BLOW SCHEME: runtohide init["..utils.to_str(npc:character_name()).."]") end
  -- Looking for the nearest shelter
  if not self.st.hidefound then
    local hide,lvid=nearest_hide(npc) --  seek shelter without removing the restrictor
    if not hide then
      if self.st.out_rest==nil then
        self.st.out_rest=npc:out_restrictions()
        self.st.in_rest=npc:in_restrictions()
				npc:remove_restrictions(self.st.out_rest,"")
--        npc:remove_all_restrictions()
      end
      hide,lvid=nearest_hide(npc) -- seek shelter in remote restrictor
    end
    if hide==nil then
      self.st.nohide=true
      if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("BLOW SCHEME npc["..utils.to_str(npc:character_name()).."] has no hide") end
      return
    end
    self.st.hidefound=true
    self.st.hide=hide
    self.st.lvid=lvid
    -- if npc:name()=="mil_freedom_member0021" then
      -- amk.mylog(npc:character_name().." hc "..hide.center.." lvid "..lvid)
    -- end
  end
  if level.vertex_position(self.st.lvid):distance_to(npc:position())>30 then
    self.st.need_run=true
  end
  if self.st.need_run then
    state_mgr.set_state(npc,"sprint")
  else
    state_mgr.set_state(npc,"assault")
    self.nosprint=true
  end
  -- amk.mylog(npc:name().." to "..self.st.lvid.." center "..self.st.hide.center)
  utils.send_to_nearest_accessible_vertex(npc,self.st.lvid)
  self.kicktime=time_global()
  self.ttchst=0
  self.sprinttime=time_global()+10000
end

function action_runtohide:execute()
  action_base.execute(self)
  local npc=self.object
  if TB3D_Modders.use_scheme_message then TB3D_Services.packet_alert("BLOW SCHEME: runtohide execute["..utils.to_str(npc:character_name()).."]") end
  if self.st.hide==nil then
    return
  end
  if self.st.lvid and self.st.lvid~=self.st.hide.center and level.vertex_position(self.st.lvid):distance_to(npc:position())<3 then
    self.st.lvid=self.st.hide.center
    utils.send_to_nearest_accessible_vertex(npc,self.st.lvid)
  end
  if (self.st.need_run or self.sprinttime<time_global()) and self.nosprint and self.ttchst<time_global() then
    self.ttchst=time_global()+2000
    state_mgr.set_state(npc,"sprint")
    self.nosprint=false
  elseif npc:best_enemy() and npc:see(npc:best_enemy()) and self.ttchst<time_global() then
    self.ttchst=time_global()+4000
    state_mgr.set_state(npc,"assault_fire",nil,nil,{look_object=npc:best_enemy()})
    self.nosprint=true
  end
  if self.kicktime<time_global() then
    self.kicktime=time_global()+2000
    local vid=level.vertex_in_direction(npc:level_vertex_id(),level.vertex_position(self.st.lvid):sub(npc:position()),30)
    if level.vertex_position(vid):distance_to(npc:position())>29 then
      utils.send_to_nearest_accessible_vertex(npc,vid)
    else
      utils.send_to_nearest_accessible_vertex(npc,self.st.lvid)
    end
--   state_mgr.set_state(npc,"assault")
  end
end

function nearest_hide(npc)
  local lname=level.name()
  local hides=amk_hideouts.hide[lname]
  local mindist=1000000
  local lvid=npc:level_vertex_id()
  local hide
  if hides then
	local dist
    for i,o in ipairs(hides) do
      if o.center and npc:accessible(o.center) then
        dist=level.vertex_position(o.center):distance_to(npc:position())
        if o.community and o.community==npc:character_community() then dist=dist/2 end
        if dist<mindist then
          mindist=dist
          lvid=o.center
          hide=o
        end
        for j,v in ipairs(o.entrances) do
          if npc:accessible(v) then
            dist=level.vertex_position(v):distance_to(npc:position())
            if o.community and o.community==npc:character_community() then dist=dist/2 end
            if dist<mindist then
              mindist=dist
              lvid=v
              hide=o
            end
          end
        end
      end
    end
  end
  return hide,lvid,mindist
end

class "action_inhide" (action_base)

function action_inhide:__init(st) super(nil,"action_inhide")
  self.st=st
end

local wstates={"caution","choose","press","ward","search","salut","trans_0","trans_1","trans_zombied"}

function action_inhide:initialize()
  action_base.initialize(self)
  local npc=self.object
  npc:set_detail_path_type(move.line)
  npc:set_path_type(game_object.level_path)
  if self.st.hide==nil then self.st.hide={} end
  if self.st.hide.place==nil then self.st.hide.place={} end
  if TB3D_Modders.use_scheme_message then TB3D_Services.packet_alert("BLOW SCHEME: inhide init["..utils.to_str(npc:character_name()).."]") end
  -- Choose a point inside the shelter
  local ang0=math.random(0,360)
  local r0=math.random(1,15)
  local v0=vector():set(1,0,0)
  self.lvid=npc:level_vertex_id()
  local stop=false
  local v
  local lvid
  for r=r0,0,-1 do
    for ang=ang0,ang0+360,30 do
      v=utils.vector_rotate_y(v0,ang)
      lvid=level.vertex_in_direction(self.st.hide.center,v,r)
      if npc:accessible(lvid) and (not self.st.hide.place[lvid]) and
         amk_mod.check_npc_in_hideout(level.vertex_position(lvid),self.st.hide) and 
         level.vertex_position(lvid):distance_to(level.vertex_position(self.st.hide.center))>r/1.5 then
        self.lvid=lvid
        stop=true
        break
      end
      if stop then break end
    end
  end
  state_mgr.set_state(npc,"raid")
  self.begin=time_global()
  self.kicktime=time_global()+5000
  utils.send_to_nearest_accessible_vertex(npc,self.lvid)
  self.tgtvec=control_entrance_vec(self.lvid,self.st.hide)
  self.st.hide.place[self.lvid]=true
 end

function action_inhide:execute()
  action_base.execute(self)
  local npc=self.object
  if TB3D_Modders.use_scheme_message then TB3D_Services.packet_alert("BLOW SCHEME: inhide execute["..utils.to_str(npc:character_name()).."]") end
  if npc:level_vertex_id()==self.lvid and self.begin and self.begin<time_global() then
    self.begin=nil
    state_mgr.set_state(npc,"hide_na",nil,nil,{look_position=self.tgtvec})
  elseif npc:level_vertex_id()~=self.lvid then
    if self.kicktime<time_global() then
      if not self.begin then
        state_mgr.set_state(npc,"raid")
      end
      self.kicktime=time_global()+5000
      utils.send_to_nearest_accessible_vertex(npc,self.lvid)
      self.begin=0
    end
  end
end

function action_inhide:finalize()
  action_base.finalize(self)
  local npc=self.object
  if self.st.hide and self.st.hide.place then
    self.st.hide.place[self.lvid]=nil
  end
  if TB3D_Modders.use_scheme_message then TB3D_Services.packet_alert("BLOW SCHEME: inhide finalize["..utils.to_str(npc:character_name()).."]") end
end

function control_entrance_vec(vtx,hide)
  local delt=level.vertex_position(vtx):sub(level.vertex_position(hide.center))
  local tgtvtx=vector():set(0,0,0)
  local maxdist=-10000
  local delt1
  local dist
  for i,v in ipairs(hide.entrances) do
    delt1=level.vertex_position(v):sub(level.vertex_position(hide.center))
    dist=delt1:dotproduct(delt)
    if dist>maxdist then
      maxdist=dist
      tgtvtx=level.vertex_position(v)
    end
  end
  return tgtvtx
end

class "action_preblow" (action_base)

function action_preblow:__init(st) super(nil,"action_preblow")
  self.st=st
end

local pstates={"preblow"}

function random_cylinder(r0,r1,h0,h1)
  local ang=math.random()*2*math.pi
  local r=r0+math.random()*(r1-r0)
  local h=h0+math.random()*(h1-h0)
  return vector():set(r*math.sin(ang),h,r*math.cos(ang))
end

function action_preblow:initialize()
  action_base.initialize(self)
  local npc=self.object
  self.state="preblow"
  if npc:object("wpn_binoc") then
    self.state="binocular"
  end
  -- We are looking for an open area. To not look at the wall
  local vec=vector():set(1,0.5,0)
  vec:normalize()
  local maxdist=0
  if not self.prefang then self.prefang=math.random(0,360) end
  local preflook
  preflook,self.prefang=find_open_dir(npc,self.prefang,30)
  state_mgr.set_state(npc,self.state,nil,nil,{look_position=preflook})
  stop_play_sound(npc)
  xr_sound.set_sound(npc,"")
  self.nextupd=time_global()+math.random(5000,10000)
  self.st.nohide=nil
  if TB3D_Modders.use_scheme_message then TB3D_Services.packet_alert("BLOW SCHEME: preblow init["..utils.to_str(npc:character_name()).."]") end
 end

function action_preblow:execute()
  action_base.execute(self)
  local npc=self.object
  if self.nextupd<time_global() then
    self.nextupd=time_global()+math.random(5000,10000)
    local preflook
    preflook,self.prefang=find_open_dir(npc,self.prefang,45)
    state_mgr.set_state(npc,self.state,nil,nil,{look_position=preflook})
  end
  if TB3D_Modders.use_scheme_message then TB3D_Services.packet_alert("BLOW SCHEME: preblow execute["..utils.to_str(npc:character_name()).."]") end
end

function find_open_dir(npc,excludeang,excludewidth)
  local vec=vector():set(1,0.5,0)
  vec:normalize()
  local maxdist=0
  local preflook=vector():set(0,0,0)
  local prefang=0
    local vec1
    local vtx
    local dist
  for ang=excludeang+excludewidth/2,excludeang+360-excludewidth/2,20 do
    vec1=utils.vector_rotate_y(vec,ang)
    vtx=level.vertex_in_direction(npc:level_vertex_id(),vec1,100)
    dist=level.vertex_position(vtx):distance_to(npc:position())
    if dist>maxdist then
      maxdist=dist
      preflook=level.vertex_position(vtx)
      prefang=ang
    end
  end
  return preflook,prefang
end 

class "action_monolith_pray" (action_base)

function action_monolith_pray:__init(st) super(nil,"action_monolith_pray")
  self.st=st
end

function action_monolith_pray:initialize()
  action_base.initialize(self)
  local npc=self.object
  self.state="trans_"..math.random(0,1)
  state_mgr.set_state(npc,self.state)
  stop_play_sound(npc)
  xr_sound.set_sound(npc,"")
end

function action_monolith_pray:execute()
  action_base.execute(self)
  local npc=self.object
end

function set_hide(npc, ini, scheme, section)
  local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
end

function add_to_binder(object, char_ini, scheme, section, st)
  bind_scheme(object,st)
end

function disable_scheme(npc, scheme)
	local st = db.storage[npc:id()][scheme]
	if st then
		st.enabled = false
	end
end

local cnt=0

--Specifies a list of NPCs to ignore the emissions (eg guards, who are already in the area of ??the shelter and can safely perform their work during ejection)
--[[------------------------------ ignore blowout -------------------------------]]
local npcNameBlowoutIgnore = {
    ["mil_stalker0012"]         = true, --Mad Dog at AU
    ["yantar_ecolog_general"]   = true, --Sakharov
    ["mil_freedom_member0009"]  = true, --Guard Lucas
    ["mil_freedom_member0012"]  = true, --Lukas
    ["mil_freedom_member0019"]  = true, --Guard Lucas
    ["mil_freedom_member0021"]  = true, --Miser
    ["bar_bar_guard"]           = true, --Garik in the bar
    ["bar_bar_osvedomitel"]     = true, --The informant in the bar
    ["bar_bar_guard_2"]         = true,  --Zhorik in the bar
    ["brat_luis"]         		= true,  --in the marsh
	["gar_sniper_bandit"]		= true,	--109984, can cause path error after blowout
	["gar_wounded_bandit"]		= true,	--109987, bandit with pda
	["zemlyk"]					= true	--109988, countryman in gen
}
local npcCommunityBlowoutIgnore = {
    ["zombied"]     = true,
    ["trader"]      = true,
    ["arena_enemy"] = true
}
function bind_scheme(npc,storage)  
	--TB3D_Services.packet_alert("blowout scheme: bind["..npc:name().."]")
	local is_report = false
	if TB3D_Modders.use_binder_message or (TB3D_Modders.use_setup_message and string_find(npc:name(), TB3D_Modders.npc_to_log)) then is_report = true end
	local evid_wounded=xr_evaluators_id.sidor_wounded_base
	local manager = npc:motivation_action_manager()
	if manager then
		if npcCommunityBlowoutIgnore[npc:character_community()]
			or npcNameBlowoutIgnore[npc:name()]
			or npc:out_restrictions()=="bar_arena_restrictor"
			or string_find(npc:name(), "aem_a")
			or string_find(npc:name(), "syslov")
			or string_find(npc:name(), "kombat")
			or string_find(npc:name(), "shadows")
			or string_find(npc:name(), "mudri")
			or string_find(npc:name(), "grozn")
			or string_find(npc:name(), "alex")
			or string_find(npc:name(), "esc_blokpost") then										--keep trying to hide in village
				if is_report then TB3D_Services.packet_alert("blowout scheme: bind["..npc:name().."] to ignore scheme") end
				manager:add_evaluator (evid_blowout, property_evaluator_const(false))
				manager:add_evaluator (evid_outside, property_evaluator_const(false))
				manager:add_evaluator (evid_preblowout, property_evaluator_const(false))
				manager:add_evaluator (evid_anomaly, property_evaluator_const(false))
		elseif npc:character_community() == "monolith" then
			if is_report then TB3D_Services.packet_alert("blowout scheme: bind["..npc:name().."] to monolith scheme") end
			manager:add_evaluator (evid_blowout, evaluator_monolith_blowout(storage))
			manager:add_evaluator (evid_outside, property_evaluator_const(false))
			manager:add_evaluator (evid_preblowout, property_evaluator_const(false))
			manager:add_evaluator (evid_anomaly, evaluator_anomaly(storage))
			local action = action_monolith_pray(storage)
			action:add_precondition(world_property(stalker_ids.property_alive, true))
			action:add_precondition(world_property(evid_wounded, false))
			action:add_precondition(world_property(evid_anomaly, false))
			action:add_precondition(world_property(evid_blowout, true))
			action:add_effect(world_property(evid_blowout, false))
			action:add_effect(world_property(evid_wounded, true))
			manager:add_action(actid_monopray, action)
			action=action_anomaly(storage)
			action:add_precondition(world_property(stalker_ids.property_alive, true))
			action:add_precondition(world_property(evid_wounded, false))
			action:add_precondition(world_property(evid_anomaly, true))
			action:add_effect(world_property(evid_anomaly, false))
			manager:add_action(actid_anomaly, action)
			action = manager:action (xr_actions_id.alife)
			action:add_precondition(world_property(evid_anomaly, false))
			action:add_precondition (world_property(evid_blowout, false))
			action = manager:action (stalker_ids.action_combat_planner)
			action:add_precondition(world_property(evid_anomaly, false))
			action:add_precondition (world_property(evid_blowout, false))
			action = manager:action (stalker_ids.action_danger_planner)
			action:add_precondition(world_property(evid_anomaly, false))
			action:add_precondition (world_property(evid_blowout, false))
		else
			if is_report then TB3D_Services.packet_alert("blowout scheme: bind["..npc:name().."] to stalker scheme") end
			manager:add_evaluator (evid_blowout, evaluator_blowout(storage))
			manager:add_evaluator (evid_outside, evaluator_outside(storage))
			manager:add_evaluator (evid_preblowout, evaluator_preblowout(storage))  
			manager:add_evaluator (evid_anomaly, evaluator_anomaly(storage))
			local action = action_runtohide(storage)
			action:add_precondition(world_property(stalker_ids.property_alive, true))
			action:add_precondition(world_property(evid_wounded, false))
			action:add_precondition(world_property(evid_anomaly, false))
			action:add_precondition(world_property(evid_blowout, true))
			action:add_precondition(world_property(evid_outside, true))
			action:add_effect(world_property(evid_outside, false))
			action:add_effect(world_property(evid_blowout, false))
			action:add_effect(world_property(evid_wounded, true))
			manager:add_action(actid_runtohide, action)
			action = action_monolith_pray(storage)										-- [outside = true] [blowout = false] likely due to asynch: hit_callback
			action:add_precondition(world_property(stalker_ids.property_alive, true))
			action:add_precondition(world_property(evid_wounded, false))
			action:add_precondition(world_property(evid_anomaly, false))
			action:add_precondition(world_property(evid_blowout, false))
			action:add_precondition(world_property(evid_outside, true))
			action:add_effect(world_property(evid_outside, false))
			action:add_effect(world_property(evid_wounded, true))
			manager:add_action(actid_monopray, action)
			action=action_inhide(storage)
			action:add_precondition(world_property(stalker_ids.property_alive,true))
			action:add_precondition(world_property(stalker_ids.property_enemy, false))
			action:add_precondition(world_property(stalker_ids.property_danger, false))
			action:add_precondition(world_property(evid_wounded, false))
			action:add_precondition(world_property(evid_anomaly, false))
			action:add_precondition(world_property(evid_blowout,true))
			action:add_precondition(world_property(evid_outside,false))
			action:add_effect(world_property(evid_blowout,false))
			action:add_effect(world_property(evid_wounded, true))
			manager:add_action(actid_inhide, action)
			action=action_anomaly(storage)
			action:add_precondition(world_property(stalker_ids.property_alive, true))
			action:add_precondition(world_property(evid_wounded, false))
			action:add_precondition(world_property(evid_anomaly, true))
			action:add_effect(world_property(evid_anomaly, false))
			manager:add_action(actid_anomaly, action)
			action=action_preblow(storage)
			action:add_precondition(world_property(stalker_ids.property_alive,true))
			action:add_precondition(world_property(evid_wounded, false))
			action:add_precondition(world_property(stalker_ids.property_enemy, false))
			action:add_precondition(world_property(stalker_ids.property_danger, false))
			action:add_precondition(world_property(evid_anomaly, false))
			action:add_precondition(world_property(evid_preblowout,true))
			action:add_effect(world_property(evid_preblowout,false))
			action:add_effect(world_property(evid_wounded, true))
			manager:add_action(actid_preblow, action)
			action = manager:action (xr_actions_id.alife)
			action:add_precondition (world_property(evid_outside, false))
			action:add_precondition (world_property(evid_blowout, false))
			action:add_precondition(world_property(evid_anomaly, false))
			action = manager:action (stalker_ids.action_combat_planner)
			action:add_precondition (world_property(evid_outside, false))
			action:add_precondition(world_property(evid_anomaly, false))
			action = manager:action (stalker_ids.action_danger_planner)
			action:add_precondition (world_property(evid_outside, false))
			action:add_precondition(world_property(evid_anomaly, false))
		end
		npc:set_enemy_callback(ecall,nil)
		if is_report then TB3D_Services.packet_alert("blowout scheme: bind["..npc:name().."] done") end
		return
	end
	if is_report then TB3D_Services.packet_alert("blowout scheme: bind["..npc:name().."] no manager !!!!") end
end

function ecall(p1,obj,enemy)
	local min_dist = TB3D_Modders.blow_enemy_dist or 300
	if min_dist < 100 then min_dist = 100 elseif min_dist > 400 then min_dist = 400 end
	local near=obj:position():distance_to(enemy:position()) <  min_dist
	if not near then
		obj:enable_memory_object(enemy,false)
	end
	if obj:clsid()==clsid.script_stalker and enemy:clsid()==clsid.controller_s and obj:character_community()=="zombied" then
		return false
	end
	if near and db.storage[obj:id()] and db.storage[obj:id()].combat_ignore and db.storage[obj:id()].combat_ignore.action and db.storage[obj:id()].combat_ignore.action.enemy_callback then
		if TB3D_Modders.use_scheme_message then TB3D_Services.packet_alert("BLOW SCHEME: Calling combat ignore handler for ["..utils.to_str(obj:name()).."]") end
		return db.storage[obj:id()].combat_ignore.action:enemy_callback(obj,enemy)
	end
	return near
end

function hit_callback(obj)
	db.set_blowout_hit(obj,time_global()+20000)
end
