--TB3D 1.0.9.9.7.4 db calls
function my_ver() return "1.0.9.9.7.4" end

function set_combat_type( npc, actor, t )
	--db.storage[npc:id()].enemy = npc:best_enemy()
	db.set_enemy(npc)
	local script_combat_type = nil
	if t and t.combat_type and t.combat_type.condlist then								--109974, prevent bad condition calls
		local script_combat_type = xr_logic.pick_section_from_condlist( actor, npc, t.combat_type.condlist )
		if script_combat_type == "nil" 
		  or script_combat_type == "monolith" then
			script_combat_type = nil
		end
		--db.storage[npc:id()].script_combat_type = script_combat_type
	end
	db.set_combat_type(npc, script_combat_type)				--109974, can be nil
	return script_combat_type ~= nil
end

----------------------------------------------------------------------------------------------------------------------
-- false - engine combat, true - script combat
----------------------------------------------------------------------------------------------------------------------
class "evaluator_check_combat" (property_evaluator)

function evaluator_check_combat:__init(name, storage) super (nil, name)
	self.st = storage
end

function evaluator_check_combat:evaluate()
	if self.st.enabled and self.object:best_enemy() then
		local actor = db.actor
		if not actor then
			return false
		end
		if db.storage[self.object:id()] and db.storage[self.object:id()].active_scheme then
			local overrides = xr_logic.generic_scheme_overrides( self.object )
			if overrides and overrides.on_combat and overrides.on_combat.condlist then
				xr_logic.pick_section_from_condlist( actor, self.object, overrides.on_combat.condlist )
			end
			if xr_logic.try_switch_to_another_section(self.object, self.st, actor) then
				--return false																--109974, override caused a switch
			end
			if overrides and overrides.combat_type then
				return set_combat_type( self.object, actor, overrides )
			else
--					db.storage[self.object:id()].script_combat_type = nil
--					return false
				return self.st.combat_type ~= nil and set_combat_type( self.object, actor, self.st )
			end
		else
			return self.st.combat_type ~= nil and set_combat_type( self.object, actor, self.st )
		end
	end
	return false
end

class "evaluator_enemy" (property_evaluator)

function evaluator_enemy:__init(name) super (nil, name)
end

function evaluator_enemy:evaluate()
	return self.object:best_enemy() ~= nil
end

----------------------------------------------------------------------------------------------------------------------
-- binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, ini, scheme, section, storage)	--ini, scheme and section are not used
	if TB3D_Modders.use_combat_message then
		TB3D_Services.packet_alert("xr combat: add to binder["..npc:name().."]["..utils.to_str(storage).."]")
	end
	local manager = npc:motivation_action_manager()
	if manager then
		manager:add_evaluator( xr_evaluators_id.script_combat, this.evaluator_check_combat("script_combat",storage) )
		local action = manager:action(stalker_ids.action_combat_planner)
		if action then
			action:add_precondition(world_property(xr_evaluators_id.script_combat, false))
		elseif TB3D_Modders.use_combat_message then 
			TB3D_Services.packet_alert("xr combat: add to binder["..npc:name().."] action does not exist!!!!")
		end
		if TB3D_Modders.use_combat_planner then														--109974, may use in future
			local planner = planner_action( nil, "script_combat_planner" )
			planner:setup( npc )
			planner:add_evaluator( stalker_ids.property_enemy,     evaluator_enemy( "is_there_enemy" ) )
			planner:add_evaluator( xr_evaluators_id.script_combat, evaluator_check_combat("combat_check",storage) )
			planner:add_precondition( world_property( xr_evaluators_id.script_combat, true ) )
			planner:add_precondition( world_property( stalker_ids.property_enemy,     true ) )
			planner:add_effect      ( world_property( stalker_ids.property_enemy,     false ) )
			manager:add_action( xr_actions_id.script_combat_planner, planner )
			xr_combat_zombied.add_to_binder( npc, ini, storage, planner )
		end
		if manager and manager.action then
			if TB3D_Modders.use_combat_message then TB3D_Services.packet_alert("xr combat: adding zombied to binder["..npc:name().."]["..utils.to_str(storage).."]") end
			if xr_combat_zombied then xr_combat_zombied.add_to_binder( npc, ini, storage, manager ) end
			if TB3D_Modders.use_combat_monolith then xr_combat_monolith.add_to_binder( npc, ini, storage, manager ) end				--109974, may use in future
			xr_combat_camper.add_to_binder( npc, ini, storage, manager )
		elseif TB3D_Modders.use_combat_message then
			TB3D_Services.packet_alert("xr combat: add to binder["..npc:name().."]["..utils.to_str(storage).."] manager or action corrupted!!!!")
		end
	elseif TB3D_Modders.use_combat_message then 
		TB3D_Services.packet_alert("xr combat: add to binder["..npc:name().."] manager does not exist!!!!")
	end
	if TB3D_Modders.use_combat_message then TB3D_Services.packet_alert("xr combat: add to binder["..npc:name().."] done") end
end

function set_combat_checker(npc, ini, scheme, section)
	local is_zombied = npc:section() == "stalker_zombied"
	if section or is_zombied then
		local st      = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
		st.logic      = xr_logic.cfg_get_switch_conditions(ini, section, npc)		
		st.enabled    = true
		st.combat_type = xr_logic.cfg_get_condlist(ini, section, "combat_type", npc)
		if not st.combat_type and is_zombied then
			st.combat_type = { condlist = xr_logic.parse_condlist(npc, section, "", "zombied") }
		end
		if st.combat_type then
			set_combat_type( npc, db.actor, st )
		end
	end
end

function disable_scheme(npc, scheme)
	local st = db.storage[npc:id()][scheme]
	if st then
		st.enabled = false
	end
end
