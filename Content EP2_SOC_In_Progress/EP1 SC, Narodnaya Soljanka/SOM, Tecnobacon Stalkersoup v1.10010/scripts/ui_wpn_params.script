--TB3D 1.0.9.9.2.7 removed ; in several places 
function my_ver() return "1.0.9.9.2.7" end

function normalize(val)
	local nval = val
	if nval > 100 then
		nval = 100
	elseif nval < 1 then
		nval  = 1
	end
	return nval
end

function read_if_exist(ltx, section, value, default)
	if ltx:line_exist(section,value) then
		return ltx:r_float(section,value)
	else
		return default
	end
end

function GetRPM(section)
	local ltx = system_ini()
	local rpm = read_if_exist(ltx, section,"rpm", 1)
	local mag_size = read_if_exist(ltx, section, "ammo_mag_size", 1) --ltx:r_float(section,"ammo_mag_size")
	local f_modes = read_if_exist(ltx, section, "f_mode", 1)
	if rpm > 100 then
		rpm = (mag_size*(60/((mag_size/(rpm/60)) + 5.5)))/2.4
	else
		rpm = rpm/14
	end
	if mag_size < 5	then
		rpm = 30
	end	  
	return normalize(rpm)
end

function GetDamage(section)
	local ltx = system_ini()
	local hit_power = read_if_exist(ltx, section, "hit_power", 2) --ltx:r_float(section,"hit_power")
	local hit_rate = read_if_exist(ltx, section, "hit_rate", 1)	--ltx:r_float(section,"hit_rate")
	local ammo_list	= ltx:r_string(section,"ammo_class")
	local k_hit = 1
	if ammo_list then
		local pos  = string.find(ammo_list,",",1)
		if pos then
			local ammo = string.sub(ammo_list,1,pos - 1)
			if ammo then
				k_hit = read_if_exist(ltx, ammo, "k_hit", 1) --ltx:r_float(ammo, "k_hit")
			else
				k_hit = read_if_exist(ltx, ammo_list, "k_hit", 1) --ltx:r_float(ammo_list, "k_hit")
			end
		else
			k_hit = read_if_exist(ltx, ammo_list, "k_hit", 1) --ltx:r_float(ammo_list, "k_hit")
		end
	end
	local hit = hit_rate + math.log10(2*hit_power*k_hit)
	val =  28*hit
	return normalize(val)
end

function GetDamageMP(section)
	local ltx = system_ini()
	local val = read_if_exist(ltx, section, "hit_power", 1) --ltx:r_float(section,"hit_power")
	if val < 1.05 then
		val = val*100-30
	else
		val = 75 + math.pow(val/4,2)*25
	end
	return normalize(val)	
end

function GetHandling(section)
	local ltx = system_ini()
	local misfire_probability	= read_if_exist(ltx, section, "misfire_probability", 1) --ltx:r_float(section,"misfire_probability")
	local misfire_condition_k  = read_if_exist(ltx, section, "misfire_condition_k", 1) --ltx:r_float(section,"misfire_condition_k")
	local condition_shot_dec = read_if_exist(ltx, section, "condition_shot_dec", 1) --ltx:r_float(section,"condition_shot_dec")
	local ammo_list			= ltx:r_string(section,"ammo_class")
	local impair = 1
	if ammo_list then
		local pos  = string.find(ammo_list,",",1)
		if pos then
			local ammo = string.sub(ammo_list,1,pos - 1)
			if ammo then impair = read_if_exist(ltx, ammo, "impair", 1) end --ltx:r_float(ammo, "impair")
		else
			impair	= read_if_exist(ltx, ammo_list, "impair", 1) --ltx:r_float(ammo_list, "impair")
		end
	end
	local cond = 1 - impair*condition_shot_dec*3000
	if cond < 0 then cond = 0 end
	local prob
	if cond > 0.95 then
		prob = 0
	else
		prob = (0.95 - cond)*(misfire_condition_k - misfire_probability) + misfire_probability
	end
	local val = 100*(1 - prob*7) 
	if val < 20 then val = 20 end
	return normalize(val)
end

function GetAccuracy(section)
	local ltx = system_ini()
	local fire_dispersion_base	= read_if_exist(ltx, section, "fire_dispersion_base", 1)	--ltx:r_float(section,"fire_dispersion_base")
	local disp_rate = read_if_exist(ltx, section, "disp_rate", 1)	--ltx:r_float(section,"disp_rate")
	local ammo_list			= ltx:r_string(section,"ammo_class")
	local k_disp = 1
	if ammo_list then
		local pos  = string.find(ammo_list,",",1)
		if pos then
			local ammo = string.sub(ammo_list,1,pos - 1)
			k_disp				= read_if_exist(ltx, ammo, "k_disp", 1) --ltx:r_float(ammo, "k_disp")
		else
			k_disp				= read_if_exist(ltx, ammo_list, "k_disp", 1) --ltx:r_float(ammo_list, "k_disp")
		end
	end
	local fir = disp_rate + math.log10(0.9/(fire_dispersion_base*k_disp))
	val =  28*fir
	return normalize(val)
end
