--TB3D 1.0.9.9.7.4 added my_ver, optimized, fix {}, added debug, no avail phrase, checks
function my_ver() return "1.0.9.9.7.4" end

local phrase_ini = ini_file("misc\\dialog_manager.ltx")

local intro_id = 100

phrase = {
	intro = {},
	cool_info = {},
	treasure = {},
	help_thanks = {}
	}

function gen_phrase_id_str()
	intro_id = intro_id + 1
	return tostring(intro_id)
end

--' Necessary to generate a set of predicates  table[string_id] = predicate()
function fill_phrase_table()		--called from _g.script
	if TB3D_Modders.Global_Debug then TB3D_Services.info_alert("DM: fill phrase table") end
	--' We iterate over all settings phrases
	if not phrase_ini:section_exist("list") then
		if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("DM: fill phr tab: There is no section [list] in dialog_manager.ltx") end
	end
	local n = phrase_ini:line_count("list")
	local result
	local id, value = "",""
	local category = ""
	local tt
	for i=0,n-1 do
		id, value = "",""
		category = ""
		tt = {}
		result, id, value	= phrase_ini:r_line("list",i,"","")
		if not phrase_ini:section_exist(id) then
			if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("DM: fill phr tab: There is no section ["..utils.to_str(id).."] in dialog_manager.ltx") end
		end		
		--' 2. Necessary to generate a set of predicates  table[string_id] = predicate()
		if not phrase_ini:line_exist(id, "category") then
			if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("DM fill phr tab: Dialog manager error: not categorized section ["..utils.to_str(id).."]") end
		end
		category = phrase_ini:r_string(id, "category")
		tt.name = id
		if phrase_ini:line_exist(id, "community") then
			tt.community = phrase_ini:r_string(id, "community")
		end
		if phrase_ini:line_exist(id, "npc_community") then
			tt.npc_community = phrase_ini:r_string(id, "npc_community")
		end
		if phrase_ini:line_exist(id, "relation") then
			tt.relation = phrase_ini:r_string(id, "relation")
		end
		if phrase_ini:line_exist(id, "npc_rank") then
			tt.npc_rank = phrase_ini:r_u32(id, "npc_rank")
		end
		if phrase_ini:line_exist(id, "level") then
			tt.level = phrase_ini:r_string(id, "level")
		end
		if phrase_ini:line_exist(id, "condlist") then
			tt.condlist = xr_logic.parse_condlist(db.actor, "dialog_manager", "condlist", phrase_ini:r_string(id, "condlist"))
		end
		if phrase_ini:line_exist(id, "smart_terrain") then
			tt.smart_terrain = phrase_ini:r_string(id, "smart_terrain")
		end					
		if phrase_ini:line_exist(id, "cost") then
			tt.price = phrase_ini:r_u32(id, "cost")
		end					
		if phrase_ini:line_exist(id, "article_info") then
			tt.article_info = parse_names(phrase_ini:r_string(id, "article_info"))
		end					
		if phrase_ini:line_exist(id, "treasure") then
			tt.treasure = phrase_ini:r_string(id, "treasure")
		end					
		if phrase_ini:line_exist(id, "wounded") then
			tt.wounded = phrase_ini:r_string(id, "wounded")
		else
			tt.wounded = "false"
		end
		tt.phr_id			= gen_phrase_id_str()
		tt.phr_id2			= gen_phrase_id_str()
		phrase[category][tt.phr_id] = tt
	end
end

-- You must create a startup dialog, with branching at the third level, where every sentence will have
-- the same function in precondition
function init_intro_dialog(dlg)
	local phr = dlg:AddPhrase("","0","",-10000)
	phr = dlg:AddPhrase("","1","0",-10000)
	local phrase_script
	for k,v in pairs(phrase.intro) do
		phrase_script = {}
		phr = nil
		phr = dlg:AddPhrase(v.name, v.phr_id, "1", -10000)
		if phr then
			phrase_script = phr:GetPhraseScript()
			phrase_script:AddPrecondition("dialog_manager.precondition_intro")
			--' This action stores the last sentence of that character says the same thing.
			--' To phrase the request for assistance it is not necessary to add.
			if v.wounded == "false" then
				phrase_script:AddAction("dialog_manager.phrase_action_intro")		
			end
		end
	end
end

-- You must create a dialogue actor, with branching at the second level, where every sentence will have
-- the same function in prekondishne.
function init_cool_info_dialog(dlg)
	if TB3D_Modders.Global_Debug then TB3D_Services.info_alert("DM: Init cool info") end
	local phr = dlg:AddPhrase("dm_general_cool_info","0","",-10000)
	local phr_def = dlg:AddPhrase("dm_general_cool_info_no_more","1","0",-10000)
	local phrase_script = phr_def:GetPhraseScript()
	phrase_script:AddPrecondition("dialog_manager.precondition_cool_info_no_more")
	local phrase_script
	for k,v in pairs(phrase.cool_info) do
		phrase_script = {}
		phr = nil
		phr = dlg:AddPhrase(v.name,v.phr_id,"0",-10000)
		if phr then
			phrase_script = phr:GetPhraseScript()
			phrase_script:AddPrecondition("dialog_manager.precondition_cool_info")
			phrase_script:AddAction("dialog_manager.cool_info_treasure")
			phrase_script:AddAction("dialog_manager.phrase_action_cool_info")
			if v.article_info ~= nil then
				phr = dlg:AddPhrase("",v.phr_id2,v.phr_id,-10000)		
				phrase_script = phr:GetPhraseScript()
				for kk,vv in pairs(v.article_info) do
					phrase_script:AddGiveInfo(vv)
				end
			end
		end
	end
	if TB3D_Modders.Global_Debug then TB3D_Services.info_alert("DM: Init cool info done") end
end

-- Dialogues assistance to the wounded
function init_help_wounded_medkit_dialog(dlg)
	local phr = dlg:AddPhrase("dm_general_help_medkit","0","",-10000)
	if phr then
		local phrase_script = phr:GetPhraseScript()
		if phrase_script then
			phrase_script:AddAction("dialogs.transfer_medkit")
			for k,v in pairs(phrase.help_thanks) do
				phr = nil
				phr = dlg:AddPhrase(v.name,v.phr_id,"0",-10000)		
				if phr then
					phrase_script = phr:GetPhraseScript()
					phrase_script:AddPrecondition("dialog_manager.precondition_help_thanks")
				end
			end
		end
	end
end

local call_count, max_count = 0,0
local tmp_tbl = {}
local show_tbl = {}

selected_phrase_by_id = {
	intro = {},
	cool_info = {},
	tresure = {},
	action_info = {}
}

function phrase_action_intro(npc, actor, p1, p2)
	phrase_action(npc, actor, selected_phrase_by_id.intro, p2)
end
function phrase_action_cool_info(npc, actor, p1, p2)
	phrase_action(npc, actor, selected_phrase_by_id.cool_info, p2, true)
end
function cool_info_treasure(npc, actor, p1, p2)
	for k,v in pairs(phrase.cool_info) do
		if v.phr_id == p2 then
			if v.treasure == nil then
				return
			end
			treasure_manager.get_treasure_manager():give_treasure(v.treasure)
		end
	end
end

function phrase_action(npc, actor, sel_tbl, p2, one_time)
	local cc = 0
	if one_time == true then
		if sel_tbl[npc:id()] ~= nil then
			cc = sel_tbl[npc:id()].count + 1	
		else
			cc = 1
		end
	end
	sel_tbl[npc:id()] = {phrase = p2, count = cc}
end

function precondition_intro(npc, actor, p1, p2, p3)
	return precondition(npc, actor, phrase.intro, selected_phrase_by_id.intro, p1, p2, p3)
end
function precondition_cool_info(npc, actor, p1, p2, p3)
	return precondition(npc, actor, phrase.cool_info, selected_phrase_by_id.cool_info, p1, p2, p3)
end
function precondition_cool_info_no_more(npc, actor, p1, p2, p3)
	if selected_phrase_by_id.cool_info == nil or selected_phrase_by_id.cool_info[npc:id()] == nil then
		return false
	end
	if selected_phrase_by_id.cool_info[npc:id()].count >= 1 then
		return true
	end 
	return false
end
function precondition_help_thanks(npc, actor, p1, p2, p3)
	return precondition(npc, actor, phrase.help_thanks, nil, p1, p2, p3)
end

function get_t_size(t)
	local counter = 0
	for i,v in pairs(t) do
		counter = counter+1
	end
	return counter
end

function precondition(npc, actor, tbl, sel_tbl, p1, p2, p3)
	--if TB3D_Modders.use_packet_message then TB3D_Services.packet_alert("Dialog Mgr:  precondition["..utils.to_str(npc:name()).."]") end
	--' We need to check whether the memorized phrase
	if ( (sel_tbl ~= nil) and (sel_tbl[npc:id()] ~= nil) ) then
		local lll = sel_tbl[npc:id()]
		if (lll==nil) then
			if TB3D_Modders.use_abort_message then TB3D_Services.packet_alert("DM: npc's table is nil") end
		else
			local value, number
			local ttt = tbl[lll.phrase]
			if (ttt==nil) then
				if TB3D_Modders.use_abort_message == true then
					TB3D_Services.packet_alert("DM: !!! ttt = nil") --..lll.phrase)
					if TB3D_Modders.show_tables then show_tables(tbl, nil, "dialog mgr") end
					--local a = lll.phrase + 1													--!!!!TB3D  can't be right need fix!!!
					--[[TB3D_Services.packet_alert("TBL size["..utils.to_str(get_t_size(tbl)).."]")
						TB3D_Services.packet_alert("T size["..utils.to_str(get_t_size(sel_tbl)).."]")
						TB3D_Services.packet_alert("needed phrase["..utils.to_str(lll.phrase)).."]")
						for i,v in pairs(t) do
							TB3D_Services.packet_alert("key["..utils.to_str(i).."]")
						end
						TB3D_Services.packet_alert("phrase["..utils.to_str(get_t_size(phrase)).."]")
						TB3D_Services.packet_alert("intro["..utils.to_str(get_t_size(phrase.intro)).."]")
						TB3D_Services.packet_alert("cool info["..utils.to_str(get_t_size(phrase.cool_info)).."]")
						TB3D_Services.packet_alert("help thanks["..utils.to_str(get_t_size(phrase.help_thanks)).."]")
					]]--
				end
				value = false
			else
				value, number = calculate_predicate(npc, ttt )
			end
			--' If you memorized the phrase is not available - need to forget here
			if value == false then
				--if TB3D_Modders.use_abort_message then TB3D_Services.packet_alert("DM: restore memorized phrase") end
				sel_tbl[npc:id()] = nil
			end
		end
	end	
	--' Get a phrase to the number:
	local phrase = tbl[p3]
	--' Check for repetition of phrases.
	if ( (sel_tbl ~= nil) and (sel_tbl[npc:id()] ~= nil) ) then
		--' If the check is not memorized phrase
		if (sel_tbl[npc:id()].phrase ~= phrase.phr_id) then
			--if TB3D_Modders.use_abort_message then TB3D_Services.packet_alert("DM: npc["..utils.to_str(npc:name()).."] not memorized phrase ["..utils.to_str(sel_tbl[npc:id()].phrase).."] ~= ["..utils.to_str(phrase.phr_id).."]") end
			return false
		end
		if (sel_tbl[npc:id()].count >= 1) then
			return false
		end
	end	
	--' Determine whether the this phrase:
	local value, number = calculate_predicate(npc, phrase)
	return value
end

function calculate_predicate(npc, tbl, settings)
	local is_report = false
	local sname = npc:name()
	if TB3D_Modders.use_state_message and string.find(sname, TB3D_Modders.npc_to_log) then is_report = true end
	if is_report then
		TB3D_Services.packet_alert("dialog_manager: calc predicate["..sname.."]")
	end
	local property_num = 0
	if tbl.community ~= nil then
		if tbl.community ~= db.actor:character_community() then return false,0 end
		property_num = property_num + 1		
	end
	if tbl.npc_community ~= nil then
		if tbl.npc_community ~= npc:character_community() then return false,0 end
		property_num = property_num + 1		
	end
	if tbl.relation ~= nil then
		if (tbl.relation == "friend" and npc:relation(db.actor) ~= game_object.friend) or
		   (tbl.relation == "neutral" and npc:relation(db.actor) ~= game_object.neutral) or
		   (tbl.relation == "enemy" and npc:relation(db.actor) ~= game_object.enemy)
		then 
			return false,0 
		end
		property_num = property_num + 1		
	end
	if tbl.npc_rank ~= nil then
		if tbl.npc_rank > npc:character_rank() then return false,0 end
		property_num = property_num + 1		
	end
	if tbl.level ~= nil then
		if tbl.level ~= level.name() then return false,0 end
		property_num = property_num + 1		
	end
	if tbl.condlist ~= nil then
		if xr_logic.pick_section_from_condlist(db.actor, db.actor, tbl.condlist) ~= "true" then
			if is_report then
				TB3D_Services.packet_alert("dialog_manager: calc predicate["..sname.."] condition ~= [true]")
			end
			return false,0
		end
		property_num = property_num + #tbl.condlist.infop_check
	end
	if tbl.smart_terrain ~= nil then
		if tbl.smart_terrain ~= xr_gulag.isUnderFraction(npc) then return false,0 end
		property_num = property_num + 1		
	end
	if tbl.wounded ~= nil then
		if tbl.wounded == "true" and not
		   (xr_wounded.is_wounded(npc) or
		    xr_wounded.is_heavy_wounded_by_id(npc:id()) or
		    xr_wounded.is_psy_wounded_by_id(npc:id()))
		then
			return false,0
		end
		if tbl.wounded == "false" and
		   (xr_wounded.is_wounded(npc) or
		    xr_wounded.is_heavy_wounded_by_id(npc:id()) or
		    xr_wounded.is_psy_wounded_by_id(npc:id()))
		then
			return false,0
		end
		property_num = property_num + 1		
	end
	if tbl.price ~= nil then
		if (db.actor:money() < tbl.price) and
		   (settings == nil or settings.no_price ~= true) 
		then
			return false,0 
		end
		if tbl.article_info ~= nil then
			for k,v in pairs(tbl.article_info) do
				if has_alife_info(v) then
					return false,0
				end
			end				
		end
	end
	if is_report then
		TB3D_Services.packet_alert("dialog_manager: calc predicate["..sname.."] pred["..utils.to_str(property_num).."] done")
	end
	return true, property_num
end

		
--' Prekondishn whether to allow dialogue with the chatter ("tell me about" for example)
function precondition_info_global(actor, npc)
	if xr_wounded.is_wounded(npc) or
	   xr_wounded.is_heavy_wounded_by_id(npc:id()) or
	   xr_wounded.is_psy_wounded_by_id(npc:id())
	then
		if TB3D_Modders.use_task_message then TB3D_Services.info_alert("DM: precondition info global [false]") end
		return false
	end
	if TB3D_Modders.use_task_message then TB3D_Services.info_alert("DM: precondition info global [true]") end
	return true
end

	
--' Retention of information about the selected phrases
function save(npc, p)
	if selected_phrase_by_id.intro[npc:id()] == nil then
		p:w_stringZ("-1")
	else
		p:w_stringZ(selected_phrase_by_id.intro[npc:id()].phrase)
	end
	if selected_phrase_by_id.cool_info[npc:id()] == nil then
		p:w_stringZ("-1")
	else
		p:w_stringZ(selected_phrase_by_id.cool_info[npc:id()].phrase)
	end
end

function load(npc, reader, ver)	--!!!!TB3D fixed dialog version 109928
	if TB3D_Modders.use_task_message then
		TB3D_Services.info_alert("DM:  load reader ["..utils.to_str(npc:id()).."]")
	end
	if selected_phrase_by_id == nil then
		selected_phrase_by_id = {
			intro = {},
			cool_info = {},
			action_info = {}
		}
	end
	local flag = nil
	if ver > 6 then
		flag = reader:r_stringZ()
	else
		flag = tostring(reader:r_s16())
	end
	if flag ~= "-1" then
		selected_phrase_by_id.intro[npc:id()] = {phrase = flag, count = 0}
	else
		selected_phrase_by_id.intro[npc:id()] = nil
	end
	if ver > 6 then
		flag = reader:r_stringZ()
	else
		flag = tostring(reader:r_s16())
	end
	if flag ~= "-1" then
		selected_phrase_by_id.cool_info[npc:id()] = {phrase = flag, count = 0}
	else
		selected_phrase_by_id.cool_info[npc:id()] = nil
	end
	if TB3D_Modders.use_task_message then
		TB3D_Services.info_alert("DM:  load reader done ["..utils.to_str(npc:id()).."] ver["..utils.to_str(ver).."] flag["..utils.to_str(flag).."]")
	end
end
