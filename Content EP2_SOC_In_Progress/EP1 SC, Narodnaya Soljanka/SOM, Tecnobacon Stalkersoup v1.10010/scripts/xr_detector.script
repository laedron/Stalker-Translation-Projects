--TB3D 1.0.9.9.2.6 fixed missmatched packet, hit styles
function my_ver() return "1.0.9.9.2.6" end
--' Scheme: a detector for the danger zone: the boundary level.
--' dead_zone.ppe

local start_time	= 0		--'The time at which to start increasing the intensity
local max_time		= 100	--'The time at which the intensity becomes the maximum
local threshold		= 0.2	--'Threshold at which to begin infecting
local idle_time		= 10	--'The time between hits. In the game seconds.

class "actor_detector"
function actor_detector:__init()
	self.init_time = -1
end
function actor_detector:actor_enter()
	--' Player leaves the dangerous area (included in the permissible scope of the levels)
	self.init_time = -1
	level.remove_pp_effector(1001)
	xr_sound.set_actor_sound("")
	
	--printf("LEVEL BORDER EXIT")
end
function actor_detector:actor_exit()
	--' The player enters the dangerous territory (left border of the permissible level)
	self.init_time = game.get_game_time()
	
	level.add_pp_effector("dead_zone.ppe", 1001, true)
	level.set_pp_effector_factor(1001, 0.01)
	
	xr_sound.set_actor_sound("level_border_detector")
	xr_sound.set_actor_sound_factor(10)
	
	self.last_update_time = game.get_game_time()	
	
	--printf("LEVEL BORDER ENTER")
end
function actor_detector:update()
	-- Vergas ogg-player
	player_ogg.used_item()	
	razgruzka_v.used_item()	
	-- Vergas ogg-player
	--' Update Player and install steps.
	if self.init_time == -1 then
		return
	end
	
	if game.get_game_time():diffSec(self.last_update_time) < idle_time then
		return
	end
	self.last_update_time = game.get_game_time()

	--' Depending on the time spent by a player inside the intensity.
	--' Intensity increases from 0 to 1. Upon reaching the threshold begins hitovat radiation.
	local intence = math.min(1,math.max(0.01,game.get_game_time():diffSec(self.init_time)/(max_time - start_time)))
		
	level.set_pp_effector_factor(1001, intence, 0.3)
	xr_sound.set_actor_sound_factor(10 - intence*9)
	
	--printf("INTENCE %s", intence)
	
	if intence > threshold then
		if TB3D_Modders.radiation_hit == true then TB3D_hit_styles.radiation(db.actor, db.actor, 0.05, 0, vector():set(0,0,0)) end
	end
end
function actor_detector:save(packet)
	if self.init_time == -1 then
		packet:w_u8(0)
	else
		packet:w_u8(1)
		--utils.w_CTime(packet, self.init_time)				--!!!!TB3D made to match load
		--utils.w_CTime(packet, self.last_update_time)
	end	
end
function actor_detector:load(packet)
	if TB3D_Modders.use_packet_message == true then TB3D_Services.info_alert("xr detector: load packet") end
	local flag = packet:r_u8()
	--if flag == 1 then
	--	self.init_time = utils.r_CTime(packet)
	--	self.last_update_time = utils.r_CTime(packet)
	--else
		self.init_time = -1
	--end
	if TB3D_Modders.use_packet_message == true then TB3D_Services.info_alert("xr detector: load packet done") end
end

