--TB3D 1.1.0.0.0.7 fixed rucksack, no amk news.ltx file (commented out), added news_alert, 'Jury Semetsky' to 'Unknown STALKER',
-- added labx8 to isolated list, death news, blowout news, fast saves, obj level, removed generate_arts, blow(), translate, did_news
function my_ver() return "1.1.0.0.0.7" end
-- local ti = table.insert

local rnd = math.random
local math_atan2 = math.atan2
local table_remove = table.remove
local table_sort = table.sort
local string_find = string.find
local string_gsub = string.gsub
local translate = game.translate_string

local prob = 0.4
local bInit = false

local timer_check_freq 			= 4 	-- How often to check the news and issue clustered in short game

local timer_stalker_death 		= 3  	-- Message about the death stalker
local timer_corpse 				= 60 -- 40 	-- Report found a corpse
local timer_hear 				= 30  --15	-- Message heard
local timer_spawn 				= 45  --20 	-- Reported what they saw
local timer_general 			= 30  --20	-- Miscellaneous
local distance_close 			= 100	-- At what distance between the objects to count them in one group
local timer_weather 			= 60	-- If you change the weather
local timer_heli 				= 10	-- When seen by the helicopter

local timer_last_showed 		= 0 	-- The latter featured the news
local timer_show_freq 			= 7		-- How long to wait between news is minimal (game minutes)
local time_factor 				= 1
local timer_next_blow 			= 0			-- Tamer to the next. ejection
local timer_blow_showed			= 0			-- Last featured news on the release of
local timer_blow_freq 			= 10 * 60  	-- As part of the news on the release show (playing minutes)
local timer_eternal_stalker 	= 0 		-- The latter featured the news Semetskom
local timer_eternal_stalker_freq = 24 * 60 	-- How often is the news about Semetskom show (playing minutes)
local timer_random_spawn		= 0			-- The latest news from the spawn
local timer_random_spawn_freq 	= 5 * 60 	-- How often generates news from spawn (game minutes)
local timer_def_spawn			= 0			-- The latest news from the "beautiful" spawn
local timer_def_spawn_freq 		= 10 * 60 	-- How often generates news from the "beautiful" spawn (game minutes)
local timer_heli_showed			= 0			-- The latest news about the helicopter
local timer_heli_freq			= 1 		-- How often showing news about the helicopter (game minutes)
local timer_alife_showed		= 0			-- The last event in the offline
local timer_weather_showed 		= 0 		-- The latest news about the weather
local timer_weather_freq 		= 5 * 60 	-- How often have news about the weather display (game minutes)
local timer_daytime_showed 		= 0 		-- The latest news about the time of the day
local timer_daytime_freq 		= 5 * 60	-- How often is the news about the time of day display (game minutes)

if TB3D_Modders.use_fast_news_debug == true then 
	timer_blow_freq 			= 30	-- As part of the news on the release show (playing minutes)
	timer_eternal_stalker_freq 	= 30	-- How often is the news about Semetskom show (playing minutes)
	timer_random_spawn_freq 	= 60 	-- How often generates news from spawn (game minutes)
	timer_def_spawn_freq 		= 60 	-- How often generates news from the "beautiful" spawn (game minutes)
	timer_weather_freq 			= 30	-- How often have news about the weather display (game minutes)
	timer_daytime_freq 			= 30	-- How often is the news about the time of day display (game minutes)
	timer_show_freq 			= 1		-- How long to wait between news is minimal (game minutes)
	prob = 1.5
end


local bSmarts = false
local dist_close = 100
local dist_seen = 200
local dist_far = 200
local dist_heli_seen = 400
local dist_hear_min = 50
local dist_hear_max = 400

local rel_enemy = -1000
local rel_friend = 1000

news_stack = {}
table_spawned = {}
table_killed_by_actor = {}
spammers = {}

function init()
	--local rnd = math.random
	if (bInit == false) then
		news_data.Init()
		time_factor = system_ini():r_float("alife","time_factor")	    
		math.randomseed (device ():time_global ())
		-- Actually in the game passes timer_check_freq * 1000 * 60 * time_factor seconds
		local gtime = amk.game_minutes()
		timer_last_showed = gtime
		timer_random_spawn = gtime - rnd(timer_random_spawn_freq)
		timer_def_spawn = gtime - rnd(timer_def_spawn_freq)
		timer_eternal_stalker = gtime - rnd(timer_eternal_stalker_freq)
		timer_blow_showed = gtime - rnd(timer_blow_freq)
		timer_heli_showed = gtime - rnd(timer_heli_freq)
		timer_weather_showed = gtime - rnd(timer_weather_freq)
		timer_daytime_showed = gtime - rnd(timer_daytime_freq)
		rel_enemy,rel_friend = getIniValueFloat("game_relations", "goodwill_enemy", -1000, nil), getIniValueFloat("game_relations", "goodwill_friend", 1000, nil)
	    if not amk.has_g_timer("news_check") then
			amk.g_start_timer("news_check", 0, 0, timer_check_freq)
	    end
		bInit = true
	end
end

function on_spawn_group(community, level, position, count, o_type)
	--if TB3D_Modders.show_spawn_news then
	if TB3D_Modders.use_news_message then
		TB3D_Services.info_alert("NEWS MAIN: spawn group cnt["..utils.to_str(count).."]["..utils.to_str(o_type).."]")
	end
	--local rnd = math.random
	if (community and level and position and count and o_type and o_type > 0) then
		local name, sname = TB3D_Services.get_names()
		local s_author = name.." "..sname
		local m_str = ""
		local author = get_nearest_stalker(level, position, dist_seen, 0)
		if (author) then
			s_author = get_npc_name(author)
		else
			return
		end
		-- o_type = 1 - NPCs
		-- o_type = 2 - Monsters
		if(o_type == 2) then
			local coeff = 0.0
			local mon = community
			if (mon == "") then return end
			if (mon == "tushkano" or mon == "flesh" or mon == "dog" or mon == "psy_dog" or mon == "pseudodog" or mon == "cat" or mon == "boar") then
				coeff = -0.65
			elseif (mon == "bloodsucker" or mon == "controller") then
				coeff = 0.35				
			end
			if (rnd() < (prob + coeff)) then
				if (count == 1) then
					m_str = format_template_spawn(level, position, get_monster_name_by_string(mon, 4))
				else
					m_str = format_template_spawn_group(level, position, get_monster_name_by_string(mon, 6), count)
				end
				do_news(m_str, s_author, rnd(timer_spawn, timer_spawn*5), 15, "gen_info", author.id)
			end
		elseif (o_type == 1) then
			if (rnd() < prob) then
				local zz = community
				local m_who = ""
				if (zz and news_data.community_name[zz]) then
					if (zz == "actor" or zz == "stalker" or zz == "dolg" or zz == "freedom" or zz== "trader" or zz== "nebo" or zz== "green") then -- a stalker
						return
					end
					if (count == 1) then
						m_who = news_data.community_name[zz][3]
					else
						m_who = news_data.community_name[zz][4]
					end
				else
					if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: on_spawn_group - empty community_name for ["..utils.to_str(zz).."]") end
				end
				if (m_who == "") then return end
				if (count == 1) then
					m_str = format_template_spawn(level, position, m_who)
				else
					m_str = format_template_spawn_group(level, position, m_who, count)					
				end
				do_news(m_str, s_author, rnd(timer_spawn, timer_spawn*5), 15, "gen_info", author.id)
			end
		end
	end
	--end
end

function on_spawn(obj)
-- Someone, somewhere, has appeared.
-- If the monsters - that someone could see.
-- Or warriors / bandits...
	if obj then
		if TB3D_Modders.show_spawn_news then
			if TB3D_Modders.use_news_message then
				TB3D_Services.info_alert("NEWS MAIN: spawn["..utils.to_str(obj:name()).."]")
			end
			add_spawned_object(obj)
		end
	end
end

-- Dali in the face
function on_abuse(obj)
	if obj then 
		if TB3D_Modders.show_abuse_news then
			if TB3D_Modders.use_news_message then
				TB3D_Services.info_alert("NEWS MAIN: abuse["..utils.to_str(obj:name()).."]")
			end
			--local rnd = math.random
			if (obj.alive and obj:alive() == false) then
				return
			end
			local str = news_data.abuse_templates[rnd(#news_data.abuse_templates)]	
			local act
			if isGameObject(obj) == false then
				act = get_obj(obj.id)
			else
				act = obj
			end
			local m_name = get_npc_name(act)
			if (m_name == "" or m_name == nil) then
				local name, sname = TB3D_Services.get_names()
				m_name = name.." "..sname
			end
			do_news(str, m_name, rnd(timer_spawn, timer_spawn*5), 15, "stalker", act:id())	
		end
	end
end

function on_death(victim, killer)
	if (victim ~= nil) then
		if TB3D_Modders.show_death_news then
			if TB3D_Modders.use_news_message then
				TB3D_Services.info_alert("NEWS MAIN: death id["..utils.to_str(get_npc_name(victim)).."]")
			end
			if (IAmAStalker[victim:clsid()]) then
				local m_obj
				if (isGameObject(victim)) then
					m_obj = victim
				else
					m_obj = get_obj(victim.id)			
				end
				if (m_obj) then
					if (IsNpcStalker(m_obj)) then
						on_stalker_death(victim, killer)
					else
						on_npc_death(victim, killer)
					end
				end
			end	
		end
	end
end


-- Died stalker.
-- Putting Old of the deceased
-- Putting Old on the perpetrators of death
-- Preparing a message
function on_stalker_death(victim_, killer_)
	--if TB3D_Modders.show_death_news then
	--local rnd = math.random
	if (victim_ == nil) then
		return
	end
	local m_killer = ""
	local m_killer_s = ""
	local m_victim = ""
	local victim
	if (isGameObject(victim_)) then
		victim = victim_
	else
		victim = get_obj(victim_.id)
	end
	local killer
	local m_name  = get_npc_name(victim)
	m_victim = format_death_stalker_corpse(victim)
	local m_level = get_level_name(get_object_levelname(victim))
	if (killer_) then
		if (isGameObject(killer_)) then
			killer = killer_
		else
			killer = get_obj(killer_.id)
		end
		if (IAmAMonster[killer:clsid()]) then
			m_killer = format_death_by_monster(killer)
			m_killer_str = get_monster_name(killer, 2)
		elseif (IsAnomaly(killer)) then
			m_killer = format_death_by_anomaly(killer)
			m_killer_str = get_anomaly_name(killer, 1)
		elseif (IsNpcStalker(killer)) then
			local m_o_weapon = get_npc_weapon(killer)
			local m_s_weapon = ""
			if (m_o_weapon) then
				m_s_weapon = get_weapon_type(m_o_weapon)
				if (m_s_weapon < 5) then m_killer_str = "bullet wound" end
				if (m_s_weapon == 6) then m_killer_str = "knife" end
				if (m_s_weapon == 8) then m_killer_str = "burns" end
				if (m_s_weapon == 7 or m_s_weapon == 5) then m_killer_str = "grenade" end
			end
			if (IsNpcActor(killer)) then
				add_killed_by_actor(victim) -- Note that this HS tried.
			end						
			m_killer = format_death_by_stalker(killer)
		elseif (IsNpcOther(killer)) then
			local m_o_weapon2 = get_npc_weapon(killer)
			local m_s_weapon2 = ""
			if (m_o_weapon2) then
				m_s_weapon2 = get_weapon_type(m_o_weapon2)
				if (m_s_weapon2 < 5) then m_killer_str = "bullet wound" end
				if (m_s_weapon2 == 6) then m_killer_str = "knife" end
				if (m_s_weapon == 8) then m_killer_str = "burns" end
				if (m_s_weapon2 == 7 or m_s_weapon2 == 5) then m_killer_str = "grenade" end
			end
			m_killer = format_death_by_stalker(killer)
		else
			m_killer_str = "cause of death - Unknown"
			m_killer = ""
			if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: On stalker death - unknown killer["..utils.to_str(killer:name()).."] clsid["..utils.to_str(get_clsid(killer)).."]") end
		end
	end
	if (m_killer_str==nil or m_killer_str=="") then m_killer_str = "Cause of Death: Unknown" end
	local m_string = m_name..". "..m_level..", "..m_killer_str.."."
	do_news(m_string, "S.T.A.L.K.E.R. killed:", rnd(timer_stalker_death, timer_stalker_death * 3), 10, "death", nil, 1) 

	if (rnd() < prob) then
		local name, sname = TB3D_Services.get_names()
		local s_author = name.." "..sname
		local m_str = ""
		local author = nil
		if (rnd() < 0.5) then
			if (rnd() < 0.5) then
				m_str = m_victim.." "..m_killer..""
			else
				m_str = m_victim..""
			end
			author = get_nearest_stalker(get_object_levelname(victim_), get_object_position(victim_), dist_seen, 0)
			if (author) then
				s_author = get_npc_name(author)
			else
				return
			end
		else
			author = get_nearest_stalker(get_object_levelname(victim_), get_object_position(victim_), dist_hear_max, dist_hear_min)
			if (author) then
				s_author = get_npc_name(author)
			else
				return
			end
			m_str = format_death_hear_sounds(victim, killer)
		end
		if (m_str ~= "") then
			do_news(m_str, s_author, rnd(timer_corpse*2, timer_corpse *5), 15, "gen_info", author.id)
		end
	end
--end
end

-- Killed someone, but not a stalker (military, bandit, a mercenary ...)
-- See, here come a debt / Freedom
-- Putting Old of the deceased
-- Putting Old on the perpetrators of death
-- Preparing a message
function on_npc_death(victim_, killer_)
	--if TB3D_Modders.show_death_news then
	--local rnd = math.random
	if (victim_ == nil) then
		return
	end
	local m_victim = ""
	local m_killer = ""
	local killer
	local victim
	if (isGameObject(victim_)) then
		victim = victim_
	else
		victim = get_obj(victim_.id)
	end
	m_victim = format_death_npc_corpse(victim)
	if (killer_) then
		if (isGameObject(killer_)) then
			killer = killer_
		else
			killer = get_obj(killer_.id)
		end
		if (killer) then
			if IAmAMonster[killer:clsid()] then
				m_killer = format_death_by_monster(killer)
			elseif (IsNpcStalker(killer)) then -- Hmm, and who are its true? Or his or HS
				if (IsNpcActor(killer)) then
					add_killed_by_actor(victim) -- Note that this HS tried.
				end			
				m_killer = format_death_by_stalker(killer)
			elseif (IsNpcOther(killer)) then -- Yeah. Or gangsters, or warriors, or killers ... In general, people.
				m_killer = format_death_by_stalker(killer)
			elseif (IsAnomaly(killer)) then
				m_killer = format_death_by_anomaly(killer)
			else
				m_killer = ""
				if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: On npc death - unknown killer. ["..utils.to_str(killer:name()).."] clsid["..utils.to_str(get_clsid(killer)).."]") end
			end
		else
			if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: no killer. ["..utils.to_str(victim:name()).."]") end
		end
	end
	if (rnd() < prob) then
		local name, sname = TB3D_Services.get_names()
		local s_from = "" -- name.." "..sname
		local m_str = ""
		local author = nil
		local aid = nil
		if (rnd() < 0.5) then
			if (rnd() < 0.5) then
				m_str = m_victim.." "..m_killer..""
			else
				m_str = m_victim..""
			end
			author = get_nearest_stalker(get_object_levelname(victim_), get_object_position(victim_), dist_seen, 0)
			if (author) then
				s_from = get_npc_name(author)
				aid = author.id
			end
		else
			if (rnd() < 0.5 and db.actor and db.actor:id() ~= killer:id()) and (IsNpcStalker(killer)) then
				m_str = format_template_killer_act(victim)
				s_from = get_npc_name(killer)
			else
				author = get_nearest_stalker(get_object_levelname(victim_), get_object_position(victim_), dist_hear_max, dist_hear_min)
				if (author) then
					s_from = get_npc_name(author)
					aid = author.id
				else
					return
				end
				m_str = format_death_hear_sounds(victim, killer)
			end
		end
		if (m_str ~= "" and s_from ~= "") then
			if (TB3D_Modders.show_news_spots == true and author) then amk.add_spot_on_map(author.id, "red_location", s_from..": "..m_str) end
			do_news(m_str, s_from, rnd(timer_corpse*2, timer_corpse * 5), 15, "gen_info", aid)
		end
	end
--end
end

function get_obj(id)
	local m_obj = nil
	if (id) then
		m_obj = level.object_by_id(id)
	end
	return m_obj
end

function get_level_name(level_, index)
	if index == nil then index = 1 end
	local m_s_level 
	if level_ == nil then
		m_s_level = level.name()
	else
		m_s_level = level_
	end
	local m_tmp_str = ""
	if news_data.level_name[m_s_level] ~= nil then
		if (news_data.level_name[m_s_level][index] ~= nil) then
			m_tmp_str = news_data.level_name[m_s_level][index]..""
		end
	end
	return m_tmp_str
end

function get_level_subname()
	return level.name()
end

function get_current_time()
	local m_time = "00:00"
	if (level) then
		local m_h = level:get_time_hours()
		local m_m = level:get_time_minutes()
		m_time = m_h..":"..m_m
	end
	return m_time
end

function get_npc_name(obj)
	local m_s_name = ""
	if (obj) then
		if (isGameObject(obj)) then
			if (obj.character_name) then
				m_s_name = obj:character_name()
			end
		else
			local ob = get_obj(obj.id)
			if (ob and ob.character_name) then
				m_s_name = ob:character_name()
			else
				if (amk and amk.read_stalker_params and IsNpcStalker(obj)) then
					local tbl = amk.read_stalker_params(obj)
					if(tbl and tbl.charname) then
						m_s_name = tbl.charname
					end
				end
			end
		end
	end
	if (m_s_name == nil) then
		m_s_name = ""
	end
	if (m_s_name == "") then
		--m_s_name = get_npc_community(obj)
	end
	return m_s_name
end

function get_npc_community(obj)
	local m_s_c = ""
	if (obj) then
		if IAmAMonster[obj:clsid()] then
			m_s_c = get_monster_name(obj, 1)
		else
			if (obj.character_community) then				
				m_s_c = obj:character_community()
			elseif (obj.community) then
				m_s_c = obj:community()
			end
		end
	end
	if (m_s_c == nil) then
		m_s_c = ""
	end
	if (obj and obj.name and m_s_c == "") then
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: get_npc_community returns NIL for ["..utils.to_str(obj:name()).."]") end
	end
	return m_s_c
end

function get_object_position(obj)
	local pos = nil
	if (obj) then
		if (isGameObject(obj) and obj.position) then
			pos = obj:position()
		else
			pos = obj.position
		end
	end
	return pos
end

function get_object_name(obj)
	local s_name = ""
	local value	= ""
	if (isGameObject(obj) and obj.section) then
		local sect = obj:section()
		--value	= utils.cfg_get_string(system_ini(), obj:section(), "inv_name", obj, false, "", "")
		value	= getIniValueString(sect, "inv_name", "", nil)
		-- s_name = value
		s_name = translate(value)
		if string_find(sect, "^af_") then
			s_name = "artifact "..s_name
		end
	elseif (obj.section_name) then
		local sect = obj:section_name()
		--value	= utils.cfg_get_string(system_ini(), get_section(obj), "inv_name", obj, false, "", "")
		value	= getIniValueString(sect, "inv_name", "", nil)
		-- s_name = value
		s_name = translate(value)
		if string_find(sect, "^af_") then
			s_name = "artifact "..s_name
		end
	end
	if (s_name == nil) then s_name = "" end
	return s_name
end

local weapon_types = {
	-- "type1" =  --"Gun "..m_act:section()
	["wpn_pm"] = 1, ["wpn_pb"] = 1, ["wpn_fort"] = 1, ["wpn_fort_m1"] = 1, ["wpn_walther"] = 1, ["wpn_walther_m1"] = 1, ["wpn_hpsa"] = 1, ["wpn_usp"] = 1, ["wpn_mp5"] = 1, ["wpn_mp5_m1"] = 1, ["wpn_mp5_kalibr"] = 1, ["wpn_mp5_otdaca"] = 1, ["wpn_mp5_kalibr_ves"] = 1, ["wpn_mp5_otdaca_ves"] = 1, ["wpn_mp5_ves"] = 1, ["wpn_mp5_m2"] = 1, ["wpn_mp5sd"] = 1, ["wpn_mp5k"] = 1, ["wpn_mp5k_kalibr"] = 1, ["wpn_mp5k_kalibr_ves"] = 1, ["wpn_mp5k_otdaca"] = 1, ["wpn_mp5k_otdaca_ves"] = 1, ["wpn_mp5k_ves"] = 1, ["wpn_mp7a3"] = 1, ["wpn_mp7a3_kalibr"] = 1, ["wpn_mp7a3_otdaca"] = 1, ["wpn_mp7a3_kalibr_ves"] = 1, ["wpn_mp7a3_otdaca_ves"] = 1, ["wpn_mp7a3_ves"] = 1, ["wpn_scorpion"] = 1, ["wpn_scorpion_kalibr"] = 1, ["wpn_scorpion_kalibr_ves"] = 1, ["wpn_scorpion_otdaca"] = 1, ["wpn_scorpion_otdaca_ves"] = 1, ["wpn_scorpion_ves"] = 1, ["wpn_beretta"] = 1, ["wpn_beretta_m1"] = 1, ["wpn_bizon"] = 1, ["wpn_bizon1"] = 1, ["wpn_bizon_kalibr"] = 1, ["wpn_bizon_otdaca"] = 1, ["wpn_bizon_kalibr_ves"] = 1, ["wpn_bizon_otdaca_ves"] = 1, ["wpn_bizon_ves"] = 1, ["wpn_gungauss"] = 1, ["wpn_kriss_super_v"] = 1, ["wpn_kriss_super_v_ves"] = 1, ["wpn_ppsh41_sk2"] = 1, ["wpn_ppsh41_sk2_ves"] = 1, ["wpn_p90"] = 1, ["wpn_p90_ves"] = 1, ["wpn_uzi"] = 1, ["wpn_uzi_kalibr"] = 1, ["wpn_uzi_otdaca"] = 1, ["wpn_uzi_kalibr_ves"] = 1, ["wpn_uzi_otdaca_ves"] = 1, ["wpn_uzi_ves"] = 1, ["wpn_eagle_m1"] = 1, ["wpn_desert_eagle"] = 1, ["wpn_eagle_m2"] = 1, ["wpn_eagle_m3"] = 1, ["wpn_colt1911"] = 1, ["wpn_raging_bull"] = 1, ["wpn_aps_sk1"] = 1, ["wpn_samopal"] = 1, ["wpn_colt_m1"] = 1, ["wpn_anaconda"] = 1, ["wpn_beretta_cleric"] = 1, ["wpn_m93r"] = 1, ["wpn_m8000"] = 1, ["wpn_px4"] = 1, ["wpn_desert_eagle_new"] = 1, ["wpn_fs"] = 1, ["wpn_glock18c"] = 1, ["wpn_glock17"] = 1, ["wpn_glock19"] = 1, ["wpn_g35"] = 1, ["wpn_p7"] = 1, ["wpn_klin"] = 1, ["wpn_kriss_waper_pro"] = 1, ["wpn_mac10"] = 1, ["wpn_microuzi"] = 1, ["wpn_mk22"] = 1, ["wpn_mp444"] = 1, ["wpn_obrez"] = 1, ["wpn_ots33"] = 1, ["wpn_p18"] = 1, ["wpn_pm_m2"] = 1, ["wpn_pm_m1"] = 1, ["wpn_bizon_pp19"] = 1, ["wpn_bizon_pp19_kol"] = 1, ["wpn_pp2000"] = 1, ["wpn_ppd40_sk1"] = 1, ["wpn_sig226"] = 1, ["wpn_smg_tmp"] = 1, ["wpn_tec9"] = 1, ["wpn_thompson"] = 1, ["wpn_tt33_sk1"] = 1, ["wpn_ump45"] = 1, ["wpn_walther_p99"] = 1, ["wpn_ppk"] = 1, ["wpn_deagle_mk19"] = 1, ["wpn_mauser"] = 1, ["wpn_pmx1"] = 1, ["wpn_pmx2"] = 1, ["wpn_desert_eagle_uniq"] = 1, ["wpn_beretta_stars"] = 1,
	-- "type2" =  --"Rifle "..m_act:section()
	["wpn_vintorez"] = 2, ["wpn_vintorez_m1"] = 2, ["wpn_vintorez_ves"] = 2, ["wpn_svd"] = 2, ["wpn_svd_ves"] = 2, ["wpn_svd_m1"] = 2, ["wpn_svd_foto"] = 2, ["wpn_b94"] = 2, ["wpn_b94_ves"] = 2, ["wpn_svu"] = 2, ["wpn_svu_m1"] = 2, ["wpn_svu_ves"] = 2, ["wpn_lr300"] = 2, ["wpn_lr300_m1"] = 2, ["wpn_lr300_kalibr"] = 2, ["wpn_lr300_otdaca"] = 2, ["wpn_lr300_kalibr_ves"] = 2, ["wpn_lr300_otdaca_ves"] = 2, ["wpn_lr300_ves"] = 2, ["wpn_famas_p3_sk1"] = 2, ["wpn_famas_p3_sk1_kalibr"] = 2, ["wpn_famas_p3_sk1_otdaca"] = 2, ["wpn_famas_p3_sk1_kalibr_ves"] = 2, ["wpn_famas_p3_sk1_otdaca_ves"] = 2, ["wpn_famas_p3_sk1_ves"] = 2, ["wpn_l85"] = 2, ["wpn_l85_m1"] = 2, ["wpn_l85_m2"] = 2, ["wpn_l85_kalibr"] = 2, ["wpn_l85_otdaca"] = 2, ["wpn_l85_kalibr_ves"] = 2, ["wpn_l85_otdaca_ves"] = 2, ["wpn_l85_ves"] = 2, ["wpn_sig220"] = 2, ["wpn_sig_m1"] = 2, ["wpn_sig_m2"] = 2, ["wpn_sig550"] = 2, ["wpn_sig550_kalibr"] = 2, ["wpn_sig550_otdaca"] = 2, ["wpn_sig550_kalibr_ves"] = 2, ["wpn_sig550_otdaca_ves"] = 2, ["wpn_sig550_ves"] = 2, ["wpn_sg552_sk1"] = 2, ["wpn_sg552_sk1_kalibr"] = 2, ["wpn_sg552_sk1_otdaca"] = 2, ["wpn_sg552_sk1_kalibr_ves"] = 2, ["wpn_sg552_sk1_otdaca_ves"] = 2, ["wpn_sg552_sk1_ves"] = 2, ["wpn_awm"] = 2, ["wpn_awm_ves"] = 2, ["wpn_famas_p3_sk1"] = 2, ["wpn_m16a2_sk1"] = 2, ["wpn_m16a2_sk12"] = 2, ["wpn_m16a2_sk1_kalibr"] = 2, ["wpn_m16a2_sk1_otdaca"] = 2, ["wpn_m16a2_sk1_kalibr_ves"] = 2, ["wpn_m16a2_sk1_otdaca_ves"] = 2, ["wpn_m16a2_sk1_ves"] = 2, ["wpn_hk417_sk1"] = 2, ["wpn_hk417_sk1_otdaca"] = 2, ["wpn_hk417_sk1_otdaca_ves"] = 2, ["wpn_hk417_sk1_ves"] = 2, ["wpn_sr25_mk11_mod0_sk1"] = 2, ["wpn_sr25_mk11_mod0_sk1_otdaca"] = 2, ["wpn_sr25_mk11_mod0_sk1_otdaca_ves"] = 2, ["wpn_sr25_mk11_mod0_sk1_ves"] = 2, ["wpn_fn2000_comp"] = 2, ["wpn_m1891_30_scope"] = 2, ["wpn_m1891_30_scope_ves"] = 2, ["wpn_crossbow"] = 2, ["wpn_crossbow_m1"] = 2, ["wpn_walther_wa2000"] = 2, ["wpn_gauss"] = 2, ["wpn_gauss_krayzis"] = 2, ["wpn_aug_a1_sk1"] = 2, ["wpn_aug_a3"] = 2, ["wpn_aug_a1"] = 2, ["wpn_awp"] = 2, ["wpn_m82"] = 2, ["wpn_c7a1"] = 2, ["wpn_fn2000_new"] = 2, ["wpn_fnc"] = 2, ["wpn_fw900k"] = 2, ["wpn_gaussspas12"] = 2, ["wpn_ksvk"] = 2, ["wpn_l85a2"] = 2, ["wpn_l86"] = 2, ["wpn_l86_lsw"] = 2, ["wpn_m4a1"] = 2, ["wpn_m14"] = 2, ["wpn_m14_stand"] = 2, ["wpn_m21"] = 2, ["wpn_msg90"] = 2, ["wpn_r700"] = 2, ["wpn_svd_m2"] = 2, ["wpn_svd_m3"] = 2, ["wpn_svd_c"] = 2, ["wpn_svu_aaz"] = 2, ["wpn_trg42"] = 2, ["wpn_trg42_m1"] = 2, ["wpn_mosin1891"] = 2, ["wpn_vihlop"] = 2, ["wpn_g36aimpoint"] = 2, ["wpn_oicw"] = 2, ["wpn_scar_cry"] = 2, ["wpn_m21_mw2"] = 2, ["wpn_wa2000_mw2"] = 2,
	-- "type3" =  --"Automaton "..m_act:section()
	["wpn_val"] = 3, ["wpn_val_m1"] = 3, ["wpn_val_ves"] = 3, ["wpn_ak74"] = 3, ["wpn_aks74m"] = 3, ["wpn_ak74_m1"] = 3, ["wpn_ak74_kalibr"] = 3, ["wpn_ak74_otdaca"] = 3, ["wpn_ak74_kalibr_ves"] = 3, ["wpn_ak74_otdaca_ves"] = 3, ["wpn_ak74_ves"] = 3, ["wpn_ak74u"] = 3, ["wpn_ak74u_m1"] = 3, ["wpn_dark_gauss"] = 3, ["wpn_ak74u_kalibr"] = 3, ["wpn_ak74u_otdaca"] = 3, ["wpn_ak74u_kalibr_ves"] = 3, ["wpn_ak74u_otdaca_ves"] = 3, ["wpn_ak74u_ves"] = 3, ["wpn_ak47"] = 3, ["wpn_ak47_otdaca"] = 3, ["wpn_ak47_otdaca_ves"] = 3, ["wpn_ak47_ves"] = 3, ["wpn_fn2000"] = 3, ["wpn_fn2000_old"] = 3, ["wpn_fn2000_kalibr"] = 3, ["wpn_fn2000_otdaca"] = 3, ["wpn_fn2000_kalibr_ves"] = 3, ["wpn_fn2000_otdaca_ves"] = 3, ["wpn_fn2000_ves"] = 3, ["wpn_abakan"] = 3, ["wpn_abakan_m1"] = 3, ["wpn_abakan_m2"] = 3, ["wpn_abakan_kalibr"] = 3, ["wpn_abakan_otdaca"] = 3, ["wpn_abakan_kalibr_ves"] = 3, ["wpn_abakan_otdaca_ves"] = 3, ["wpn_abakan_ves"] = 3, ["wpn_groza"] = 3, ["wpn_groza_m1"] = 3, ["wpn_groza_m2"] = 3, ["wpn_groza_m3"] = 3, ["wpn_groza_ves"] = 3, ["wpn_mg42"] = 3, ["wpn_xm8_para_sk2"] = 3, ["wpn_m_134"] = 3, ["wpn_m4"] = 3, ["wpn_m4_kalibr"] = 3, ["wpn_m4_kalibr_ves"] = 3, ["wpn_m4_otdaca"] = 3, ["wpn_m4_otdaca_ves"] = 3, ["wpn_m4_ves"] = 3, ["wpn_pkm"] = 3, ["wpn_pkm_ves"] = 3, ["wpn_tavor"] = 3, ["wpn_tavor_kalibr"] = 3, ["wpn_tavor_otdaca"] = 3, ["wpn_tavor_kalibr_ves"] = 3, ["wpn_tavor_otdaca_ves"] = 3, ["wpn_tavor_ves"] = 3, ["wpn_g36"] = 3, ["wpn_g36_kalibr"] = 3, ["wpn_g36_otdaca"] = 3, ["wpn_g36_kalibr_ves"] = 3, ["wpn_g36_otdaca_ves"] = 3, ["wpn_g36_ves"] = 3, ["wpn_g36_m1"] = 3, ["wpn_aks74m_kalibr"] = 3, ["wpn_aks74m_otdaca"] = 3, ["wpn_aks74m_kalibr_ves"] = 3, ["wpn_aks74m_otdaca_ves"] = 3, ["wpn_aks74m_ves"] = 3, ["wpn_aek971_kollim"] = 3, ["wpn_ak101"] = 3, ["wpn_ak104"] = 3, ["wpn_taktik"] = 3, ["wpn_ak108"] = 3, ["wpn_ak203"] = 3, ["wpn_akm"] = 3, ["wpn_akm_metro"] = 3, ["wpn_aks47"] = 3, ["wpn_aks74u"] = 3, ["wpn_an94_sniper"] = 3, ["wpn_c1"] = 3, ["wpn_g3c"] = 3, ["wpn_groza_sil"] = 3, ["wpn_hk53"] = 3, ["wpn_hk416"] = 3, ["wpn_hkm4c"] = 3, ["wpn_masada"] = 3, ["wpn_mg36_sk1"] = 3, ["wpn_rpd"] = 3, ["wpn_rpk74_sk1"] = 3, ["wpn_sbr"] = 3, ["wpn_scar"] = 3, ["wpn_scar_new"] = 3, ["wpn_sg552"] = 3, ["wpn_sks_s"] = 3, ["wpn_type97"] = 3, ["wpn_val_colim"] = 3, ["wpn_vintorez_1pn51"] = 3, ["wpn_vintorez_m2"] = 3, ["wpn_vsk94"] = 3, ["wpn_vz58"] = 3, ["wpn_xm8ss"] = 3, ["wpn_zastava"] = 3, ["wpn_zastava_z92_mod"] = 3, ["wpn_m76"] = 3, ["wpn_minigun_m134"] = 3, ["wpn_pkm_tactic"] = 3, ["wpn_mp40"] = 3, ["wpn_ak9"] = 3, ["wpn_kac_pdw"] = 3,
	-- "type4" =  --"Edge "..m_act:section()
	["wpn_shotgun"] = 4, ["wpn_bm16"] = 4, ["wpn_bm16_ves"] = 4, ["wpn_toz34"] = 4, ["wpn_toz34_ves"] = 4, ["wpn_toz34_short"] = 4, ["hunters_toz"] = 4, ["wpn_protecta" ] = 4, ["wpn_protecta_ves"] = 4, ["wpn_m4super90"] = 4, ["wpn_m4super90_ves"] = 4, ["wpn_spas12"] = 4, ["wpn_spas12_m1"] = 4, ["wpn_spas12_ves"] = 4, ["wpn_saiga12c"] = 4, ["wpn_saiga12c_ves"] = 4, ["wpn_wincheaster1300"] = 4, ["wpn_wincheaster1300_ves"] = 4, ["wpn_winchester_m1"] = 4, ["wpn_xm1014"] = 4, ["wpn_xm1014_1"] = 4, ["wpn_xm1014_2"] = 4, ["wpn_xm1014_3"] = 4, ["wpn_bm16_full"] = 4, ["wpn_bm16_m2"] = 4, ["wpn_m590"] = 4, ["wpn_benelli_short"] = 4, ["wpn_remington870"] = 4, ["wpn_rem870_magnum"] = 4, ["wpn_sayga12k"] = 4, ["wpn_saigataktik1"] = 4, ["wpn_saigataktik2"] = 4, ["wpn_spas12_stock"] = 4, ["wpn_toz194"] = 4, ["wpn_usas12"] = 4, ["wpn_w1200"] = 4, ["wpn_browningauto5"] = 4, ["wpn_rem870short"] = 4, ["wpn_protecta_col"] = 4,
	-- "type5" =  --"Launcher "..m_act:section()
	["wpn_rpg7"] = 5, ["wpn_rg-6"] = 5, ["wpn_rg6_m1"] = 5, ["wpn_m79"] = 5, ["wpn_m79_ves"] = 5, ["wpn_gravigun"] = 5, ["wpn_rg10_ognemet"] = 5, ["wpn_rpg7_m1"] = 5, ["wpn_soulcube"] = 5, ["wpn_ptrd"] = 5,
	-- "type6" =  --"Knife "..m_act:section()
	["wpn_knife"] = 6, ["wpn_bat_a"] = 6, ["wpn_bat_b"] = 6, ["wpn_crowbar"] = 6, ["wpn_elf"] = 6, ["wpn_fist"] = 6, ["wpn_fist_m"] = 6, ["wpn_knif2"] = 6, ["wpn_knif3"] = 6, ["wpn_knifa"] = 6, ["wpn_knife_m"] = 6, ["wpn_knife_n"] = 6, ["wpn_knife_new"] = 6, ["wpn_kolbasa"] = 6, ["wpn_boker_applegate"] = 6, ["wpn_km2000"] = 6, ["wpn_knife_ak47"] = 6, ["wpn_m9_mod"] = 6, ["wpn_machette"] = 6, ["wpn_alabama_slammer"] = 6, ["wpn_uniq_knife"] = 6, ["wpn_rambo_knife"] = 6, ["wpn_bc5_knife"] = 6, ["wpn_coujaf"] = 6, ["wpn_wakizashi"] = 6, ["wpn_wakizashi"] = 6, ["wpn_topor"] = 6, ["wpn_kuvalda"] = 6,
	-- "type7" =  --"Grenade "..m_act:section()
	["wpn_addon_grenade_launcher"] = 7, ["wpn_addon_grenade_launcher_m203"] = 7, ["grenade_f1"] = 7, ["grenade_rgd5"] = 7, ["grenade_7643b"] = 7, ["grenade_m61"] = 7, ["grenade_m67"] = 7, ["w_dynamite"] = 7, ["grenade_an_m14"] = 7, ["grenade_rgd5_1"] = 7, ["grenade_f1_1"] = 7, ["grenade_gd-05_1"] = 7, ["grenade_7643b_1"] = 7, ["grenade_an_m14_1"] = 7, ["grenade_m61_1"] = 7, ["grenade_m67_1"] = 7, ["w_dynamite_1"] = 7,
	-- "type8" =  --"Flamethrower "..m_act:section()
	["wpn_flame"] = 8
}
function get_weapon_type(weapon)
    if(weapon and IAmAWeapon[weapon:clsid()]) then
        local id = get_weapon_name(weapon)
        if id == nil then 
            return 0
        elseif weapon_types[id] then
			return weapon_types[id]
        end
        if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: Unknown weapon type ["..utils.to_str(id).."]["..utils.to_str(weapon:name()).."]") end
    end
    return 0
end

function get_weapon_name(weapon)
	if(weapon and IAmAWeapon[weapon:clsid()]) then
		local result = ""
		result = get_section(weapon)
		if result ~= "nil" then return result end
	end
	return ""
end

function get_npc_weapon(obj)
	if obj then
		local ob
		if (isGameObject(obj) == false) then
			ob = get_obj(obj.id)
		else
			ob = obj
		end
		if (ob) then
			if (ob.active_item) then
				local m_act = ob:active_item()
				if (m_act) then
					if (IAmAWeapon[m_act:clsid()]) then
						if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: get_npc_weapon - clsid["..utils.to_str(get_clsid(ob)).."]") end
						return m_act
					else
						if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: get_npc_weapon - m_act is not a weapon - ["..utils.to_str(get_clsid(m_act)).."]") end
					end
				else
					if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: get_npc_weapon - m_act = nil") end
				end
			else
				if TB3D_Modders.use_news_message == true then
					TB3D_Services.info_alert("NEWS MAIN: get_npc_weapon - no active_item")
					if(ob.name) then TB3D_Services.info_alert("NEWS MAIN: get_npc_weapon - name["..utils.to_str(ob:name()).."]") end
					TB3D_Services.info_alert("NEWS MAIN: get_npc_weapon - clsid["..utils.to_str(get_clsid(ob)).."]")
				end
			end
		else
			if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: get_npc_weapon - ob is nil") end
		end
	end
	if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: get_npc_weapon - returning nil") end
	return nil
end

function get_monster_name(obj, index)
	local m_comm = ""
	local m_n = ""
	if obj then
		local m_clsid = obj:clsid()
	if index == nil then index = 1 end
		if IAmAMonster[m_clsid] then
		if m_clsid then
			m_comm = news_data.monster_classes[m_clsid]
			if m_comm == nil then
				if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: Unknown monster class_id["..utils.to_str(m_clsid).."] for ["..utils.to_str(obj:name()).."]") end
				m_n = ""
			else
				if (news_data.monster_classes[m_clsid][index] ~= nil) then
					m_n = news_data.monster_classes[m_clsid][index]
				else
					if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: Unknown monster name for class_id["..utils.to_str(m_clsid).."] index["..utils.to_str(index).."]") end
				end
			end
		end
	end
	end
	return m_n
end

function get_monster_name_by_string(str, index)
	local m_comm = ""
	local m_n = ""
	if index == nil then index = 1 end
	if index < 1 then index = 1 end
	if(str) then
		for k, v in pairs(news_data.monster_classes) do
			if (v and #v >= index and v[1] == str) then
				m_n = v[index]
			end
		end
	end
	return m_n
end

function get_npc_rank(obj)
	local m_rank = ""
	if (obj) then
		m_rank = ranks.get_obj_rank_name(obj)
		if (m_rank == nil) then
			m_rank = ""
		end
	end
	return m_rank
end

function get_monster_rank(obj)
	local m_rank = ""
	if (obj) then
		if (obj and IAmAMonster[obj:clsid()]) then
			m_rank = ranks.get_obj_rank_name(obj)
			if (m_rank == nil) then
				m_rank = ""
			end
		end
	end
	return m_rank
end

function get_anomaly_name(obj, index)
	local m_name = ""
	local m_n = ""
	if index == nil then index = 1 end
	if (IsAnomaly(obj)) then
		local m_type = ""		
		if (isGameObject(obj) and obj.section) then
			m_type = obj:section()
		elseif (obj.section_name) then
			m_type = obj:section_name()
		end
		if m_type then
			for k,v in pairs(news_data.anomaly_classes) do
				if string_find(m_type, k) then
					if (v[index] ~= nil) then
						m_n = v[index]
					end
					break
				end
			end
		end
	end
	return m_n
end

function IsNpcOther(obj)
	if (obj and IAmAStalker[obj:clsid()]) then
		local m_comm  = get_npc_community(obj)
		if (m_comm == "actor"  or m_comm == "actor_dolg" or m_comm == "actor_freedom" or m_comm == "stalker" or m_comm == "dolg" or m_comm == "freedom" or m_comm == "stalker" or m_comm == "nebo" or m_comm == "green") then
			return false
		end
		return true
	else
		return false
	end
end

function IsNpcStalker(obj)
	if (obj and IAmAStalker[obj:clsid()]) then
		local m_comm  = get_npc_community(obj)
		if (m_comm == "actor" or m_comm == "actor_dolg" or m_comm == "actor_freedom" or m_comm == "stalker" or m_comm == "dolg" or m_comm == "freedom" or m_comm == "nebo" or m_comm == "green") then
			if (obj.name and obj:name() ~= "agr_ratcatcher") then
				return true
			end
		end
	end
	return false
end

function IsNpcActor(obj)
	if (obj and IAmAStalker[obj:clsid()]) then
		local m_comm  = get_npc_community(obj)
		if (m_comm == "actor" or m_comm == "actor_dolg" or m_comm == "actor_freedom") then
			return true
		end
	end
	return false
end

function IsAnomaly(obj)
	return (obj and amk_anoms.is_anomaly(obj:clsid()))
	--[[if (obj) then
		local otype = get_clsid(obj)
		if (otype>172 and otype<180) then
			return true
		else		
		end
	end
	return false]]
end


function do_news(text, from, timeout, showtime, section, author_id, priority)
	if amk.load_variable("option_news", 1) > 0 and not has_alife_info("tb3d_harsh_environment") then
		--if TB3D_Modders.use_news_message == true then
			TB3D_Services.info_alert("NEWS MAIN: do news")
		--end								--!!!!TB3D
		if (text == nil) then text = "nil" end
		if (from == nil) then from = "nil" end
		if (timeout == nil) then timeout = 0 end
		if (priority == nil) then priority = 0 end
		add_news(text, from, 1, timeout, showtime, section, author_id, priority)
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: do news done")	end								--!!!!TB3D
	end
end

function add_news(news_text, news_from, news_type, news_timeout, news_showtime, news_section, author_id, priority)
	newsitem = {
		eventType = news_type,
		created = amk.game_minutes(),
		text = news_text,
		from = news_from,
		timeout = amk.game_minutes() + (news_timeout / 60),
		showtime = news_showtime,
		section = news_section,
		lifetime = amk.game_minutes() + (news_timeout / 60) + 20,
		activated = nil,
		author_id = tonumber(author_id),
		priority = priority
	}
	table.insert(news_stack, newsitem)
end

function show_news(text, from, timeout, showtime, section)
	if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: show news["..utils.to_str(text).."] from["..utils.to_str(from).."]") end							--!!!!TB3D
	if text == nil or from == nil then return end
	if (isIsolatedLevel(level.name()) == true) or
	has_alife_info("tb3d_harsh_environment") or
	(text == "") or (from == "") or
	sleep_manager.is_sleep_active() == true then return end
	if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: show news check blow["..utils.to_str(text).."]")		end							--!!!!TB3D
	if TB3D_Services.blow() then return end					--109980
	local now = amk.game_minutes()
	local diff = 0
	if (timer_next_blow ~= 0) then	
		diff = (timer_next_blow - now) * 60 -- The difference in the game seconds.
		local eventtime = timeout * time_factor -- How many minutes will be playing
		if eventtime >= diff then return end
	end
	if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: show news insert spam["..utils.to_str(text).."]")		end							--!!!!TB3D
	if (text == nil) then text = "nil" end
	if (from == nil) then from = "nil" end
	if (timeout > 1000) then timeout = rnd(timer_general, timer_general * 4) end
	table.insert(spammers, from)
	if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: show news sending tip["..utils.to_str(text).."]")		end							--!!!!TB3D
	news_manager.amk_send_tip(text, from, timeout, showtime, section)
	timer_last_showed = amk.game_minutes()
	if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: show news done")	end							--!!!!TB3D
end

function format_death_by_monster(obj)
	--local rnd = math.random
	local m_s = ""
	local m_prefix = ""
	local m_suffix = ""
	local m_class = ""
	local m_postfix = ""
	if (obj) then
	-- monster_prefix + monster_classes + monster_suffix
	-- monster_suffix + monster_classes + monster_prefix
		m_prefix = news_data.monster_prefix[rnd(#news_data.monster_prefix)].." "
		local m_suffid = rnd(#news_data.monster_suffix)
		local m_suff = news_data.monster_suffix[m_suffid]
		if (m_suff) then
			m_suffix = m_suff[rnd(#m_suff)]
			m_class = get_monster_name(obj, m_suffid+1)
			m_postfix = news_data.rate_postfix[rnd(#news_data.rate_postfix)]
		end
		if (rnd() < 0.5) then
			m_s = m_prefix..""..m_suffix..""..m_class.."."..m_postfix
		else
			m_s = m_suffix..""..m_class..". "..m_prefix..""..m_postfix
		end
	end
	return m_s
end

function format_death_by_anomaly(obj)
	--local rnd = math.random
	local m_s = ""
	local m_prefix = ""
	local m_suffix = ""
	local m_class = ""
	--local m_postfix = ""
	if (obj) then
	-- anomaly_prefix + anomaly_classes + anomaly_classes[3,4]
		m_prefix = news_data.anomaly_prefix[rnd(#news_data.anomaly_prefix)]
		m_class = get_anomaly_name(obj, 2)
		m_suffix = get_anomaly_name(obj, rnd(3, 4))
		--m_postfix = anomaly_postfix[rnd(#anomaly_postfix)]
		if (rnd() < 0.5) then
			m_s = m_prefix..""..m_class..". "..m_suffix.."." --..m_postfix.."."
		else
			m_s = m_prefix..""..m_class.."." --..m_postfix.."."
		end
	end
	return m_s
end

function format_death_by_stalker(obj)
	local m_s = ""
	if (obj) then
		local m_wpn = get_npc_weapon(obj)
		if (m_wpn) then
			local m_weapon = get_weapon_type(m_wpn)
			if m_weapon ~= 0 then
			m_s = format_template_weapon(m_weapon)
			end
		else
			if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: format_death_by_stalker - no weapon") end
		end
	end
	return m_s
end

function format_death_by_weapon(obj)
	local m_s = ""
	if (obj) then
		local m_weapon = get_weapon_type(obj)
		if m_weapon ~= 0 then
			m_s = format_template_weapon(m_weapon)
		end
	else
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: format_death_by_weapon - no weapon") end
	end
	return m_s
end

function format_death_stalker_corpse(obj)
	local m_s = ""
	if (obj) then
		m_s = format_template_corpse_stalker(obj)
	end
	return m_s
end

function format_death_npc_corpse(obj)
	local m_s = ""
	if (obj) then
		m_s = format_template_corpse_npc(obj)
	end
	return m_s
end

function format_death_monster_corpse(obj)
	local m_s = ""
	if (obj) then
		m_s = format_template_corpse_monster(obj)
	end
	return m_s
end

function format_death_hear_sounds(victim_, killer_, weapon_)
	--local rnd = math.random
	local m_s = ""
	local m_hear_a = ""
	local m_hear_z = ""
	if (victim_) then
		if (killer_ and (IsNpcStalker(killer_) or IsNpcOther(killer_))) then -- If killer == NES - the fire or explosions
			if (weapon_ == nil) then
				local m_wpn = get_npc_weapon(killer_)
				if (m_wpn) then
					local m_weapon = get_weapon_type(m_wpn)
					if (m_weapon == 0) then return "" end
					if (m_weapon and news_data.weapon_classes[m_weapon]) then
						if (rnd() > news_data.weapon_classes[m_weapon]["hear_p"]) then
							return ""; -- Nothing was heard, too quiet weapons...
						end
						m_hear_a = news_data.weapon_classes[m_weapon]["hear_a"][rnd(#news_data.weapon_classes[m_weapon]["hear_a"])]
						m_hear_z = news_data.weapon_classes[m_weapon]["hear_z"][rnd(#news_data.weapon_classes[m_weapon]["hear_z"])]
						m_s = format_template_hear(victim_, m_hear_a, m_hear_z)
					end
				end
			else
				local m_weapon = get_weapon_type(weapon_)
				if (m_weapon ==0) then return "" end
				if (m_weapon and news_data.weapon_classes[m_weapon]) then
					if (rnd() > news_data.weapon_classes[m_weapon]["hear_p"]) then
						return ""; -- Nothing was heard, too quiet weapons...
					end
					m_hear_a = news_data.weapon_classes[m_weapon]["hear_a"][rnd(#news_data.weapon_classes[m_weapon]["hear_a"])]
					m_hear_z = news_data.weapon_classes[m_weapon]["hear_z"][rnd(#news_data.weapon_classes[m_weapon]["hear_z"])]
					m_s = format_template_hear(victim_, m_hear_a, m_hear_z)
				end			
			end
		elseif (killer_ and victim_ and IAmAMonster[victim_:clsid()] ~= true and (IsAnomaly(killer_) or IAmAMonster[killer_:clsid()])) then -- If killer == anomaly and victim ~= monsters - that screams
			m_hear_a = "heard awful screams"
			m_hear_z = "heard awful screams"
			m_s = format_template_hear(victim_, m_hear_a, m_hear_z)
		elseif ((killer_ and IAmAMonster[killer_:clsid()]) or (victim_ and IAmAMonster[victim_:clsid()])) then -- If killer == monsters orvictim == Monsters - sounds
			m_hear_a = "heard a terrible roar"
			m_hear_z = "heard a terrible roar"
			m_s = format_template_hear(victim_, m_hear_a, m_hear_z)
		else
			if TB3D_Modders.use_news_message == true then
				if (victim_ and victim_.name) then
					TB3D_Services.info_alert("format_death_hear_sounds - victim : ["..utils.to_str(victim_:name()).."]")
				end
				if (killer_) then
					TB3D_Services.info_alert("format_death_hear_sounds - killer :  exists")
				end
				if (killer_ and killer_.name) then
					TB3D_Services.info_alert("format_death_hear_sounds - killer : ["..utils.to_str(killer_:name()).."]")
				end
			end
		end
	end
	return m_s
end

function format_template_killer_act(obj)
	--local rnd = math.random
	local m_s = ""
	if(obj ~= nil) then
		local m_class = ""
		local m_level = get_point_description(get_object_levelname(obj), get_object_position(obj))
		if (m_level == "") then return "" end
		if IAmAMonster[obj:clsid()] then
			m_class = get_monster_name(obj, 4)
		else
			local m_comm  = get_npc_community(obj)
			if (m_comm and news_data.community_name[m_comm]) then
				m_class = news_data.community_name[m_comm][3]
			end
		end
		local t = {
			["class"] = m_class,
			["level"] = m_level,
			["killed_a"] = news_data.common["killed_a"][rnd(#news_data.common["killed_a"])],
			["killed_z"] = news_data.common["killed_z"][rnd(#news_data.common["killed_z"])],
			["hard_a"] = news_data.common["hard_a"][rnd(#news_data.common["hard_a"])],
			["hard_z"] = news_data.common["hard_z"][rnd(#news_data.common["hard_z"])],
			["meet_a"] = news_data.common["meet_a"][rnd(#news_data.common["meet_a"])],
			["meet_z"] = news_data.common["meet_z"][rnd(#news_data.common["meet_z"])],
			["when_a"] = news_data.common["when_a"][rnd(#news_data.common["when_a"])],
			["when_z"] = news_data.common["when_z"][rnd(#news_data.common["when_z"])]			
		}
		local m_string = news_data.killer_act_templates[rnd(#news_data.killer_act_templates)]			
		for key0, value in pairs(t) do
			m_s = string_gsub(m_string, "%$"..key0, value)
			m_string = m_s
		end
		m_s = m_string
	end
	return m_s
end

function format_template_heli(obj, template_type)
	--local rnd = math.random
	local m_s = ""
	local m_level = ""
	local m_pos
	if (obj ~= nil and template_type and news_data.heli_templates[template_type]) then
		m_pos = get_object_position(obj)
		if (m_pos) then
			m_level = get_point_description(get_object_levelname(obj), m_pos)
			if (m_level == "") then return "" end
		end
		local t = {
			["level"] = m_level, 
			["carefull_a"] = news_data.common["carefull_a"][rnd(#news_data.common["carefull_a"])],
			["carefull_z"] = news_data.common["carefull_z"][rnd(#news_data.common["carefull_z"])],
			["when_a"] = news_data.common["when_a"][rnd(#news_data.common["when_a"])],
			["when_z"] = news_data.common["when_z"][rnd(#news_data.common["when_z"])]
		}
		local m_string = news_data.heli_templates[template_type][rnd(#news_data.heli_templates[template_type])]		
		for key0, value in pairs(t) do
			m_s = string_gsub(m_string, "%$"..key0, value)
			m_string = m_s
		end
		m_s = m_string
	end
	return m_s
end

function format_template_weapon(weapon_type)
	--local rnd = math.random
	local m_s = ""
	if(weapon_type and news_data.weapon_classes[weapon_type] ~= nil and news_data.weapon_classes[weapon_type]["name"]) then
		local t = {
			["weapon_name_2"] = news_data.weapon_classes[weapon_type]["name"][2],
			["weapon_name_3"] = news_data.weapon_classes[weapon_type]["name"][3],
			["weapon_hit_a"] = news_data.weapon_classes[weapon_type]["hit_a"][rnd(#news_data.weapon_classes[weapon_type]["hit_a"])],
			["weapon_hit_z"] = news_data.weapon_classes[weapon_type]["hit_z"][rnd(#news_data.weapon_classes[weapon_type]["hit_z"])],
			["kill_a"] = news_data.common["kill_a"][rnd(#news_data.common["kill_a"])],
			["kill_z"] = news_data.common["kill_z"][rnd(#news_data.common["kill_z"])],
			["sad_a"] = news_data.common["sad_a"][rnd(#news_data.common["sad_a"])],
			["sad_z"] = news_data.common["sad_z"][rnd(#news_data.common["sad_z"])],
			["fun_a"] = news_data.common["fun_a"][rnd(#news_data.common["fun_a"])],
			["fun_z"] = news_data.common["fun_z"][rnd(#news_data.common["fun_z"])],
			["prob_a"] = news_data.common["prob_a"][rnd(#news_data.common["prob_a"])],
			["prob_z"] = news_data.common["prob_z"][rnd(#news_data.common["prob_z"])]
		}
		local m_string = news_data.weapon_templates[rnd(#news_data.weapon_templates)]			
		for key0, value in pairs(t) do
			m_s = string_gsub(m_string, "%$"..key0, value)
			m_string = m_s
		end
		m_s = m_string
	end
	return m_s
end

function format_template_corpse_stalker(obj)
	--local rnd = math.random
	local m_s = ""
	if(obj ~= nil) then
		local m_name  = get_npc_name(obj)
		local m_level = get_point_description(get_object_levelname(obj), get_object_position(obj)) 
		if (m_level == "") then return "" end
		local m_rank  = get_npc_rank(obj)
		local m_rank_s = ""
		if (m_rank and news_data.rate_name[m_rank]) then
			m_rank_s = news_data.rate_name[m_rank][rnd(2, #news_data.rate_name[m_rank])]
		end
		local t = {
			["name"] = m_name,
			["level"] = m_level,
			["rate"] = m_rank_s,
			["kill_a"] = news_data.common["kill_a"][rnd(#news_data.common["kill_a"])],
			["kill_z"] = news_data.common["kill_z"][rnd(#news_data.common["kill_z"])],
			["sad_a"] = news_data.common["sad_a"][rnd(#news_data.common["sad_a"])],
			["sad_z"] = news_data.common["sad_z"][rnd(#news_data.common["sad_z"])],
			["fun_a"] = news_data.common["fun_a"][rnd(#news_data.common["fun_a"])],
			["fun_z"] = news_data.common["fun_z"][rnd(#news_data.common["fun_z"])],
			["prob_a"] = news_data.common["prob_a"][rnd(#news_data.common["prob_a"])],
			["prob_z"] = news_data.common["prob_z"][rnd(#news_data.common["prob_z"])],
			["corpse_a"] = news_data.common["corpse_a"][rnd(#news_data.common["corpse_a"])],
			["corpse_z"] = news_data.common["corpse_z"][rnd(#news_data.common["corpse_z"])],
			["seen_a"] = news_data.common["seen_a"][rnd(#news_data.common["seen_a"])],
			["seen_z"] = news_data.common["seen_z"][rnd(#news_data.common["seen_z"])],
			["when_a"] = news_data.common["when_a"][rnd(#news_data.common["when_a"])],
			["when_z"] = news_data.common["when_z"][rnd(#news_data.common["when_z"])]			
		}
		local m_string = news_data.stalker_corpse_templates[rnd(#news_data.stalker_corpse_templates)]
		for key0, value in pairs(t) do
			m_s = string_gsub(m_string, "%$"..key0, value)
			m_string = m_s
		end
		m_s = m_string
	end
	return m_s
end

function format_template_corpse_npc(obj)
	--local rnd = math.random
	local m_s = ""
	if(obj ~= nil) then
		local m_name  = get_npc_name(obj)
		if (m_name == "") then
			m_name = "Recently, in the ZONE"
			local m_rank  = get_npc_rank(obj)
			local m_rank_s = ""
			if (m_rank and news_data.rate_name[m_rank]) then
				m_rank_s = news_data.rate_name[m_rank][rnd(2, #news_data.rate_name[m_rank])]
				m_name = m_rank_s
			end					
		end
		local m_level = get_point_description(get_object_levelname(obj), get_object_position(obj))
		if (m_level == "") then return "" end
		local m_comm  = get_npc_community(obj)
		local m_class = ""
		if (m_comm and news_data.community_name[m_comm]) then
			m_class = news_data.community_name[m_comm][3]
		end
		local t = {
			["name"] = m_name,
			["level"] = m_level,
			["class"] = m_class,
			["kill_a"] = news_data.common["kill_a"][rnd(#news_data.common["kill_a"])],
			["kill_z"] = news_data.common["kill_z"][rnd(#news_data.common["kill_z"])],
			["sad_a"] = news_data.common["sad_a"][rnd(#news_data.common["sad_a"])],
			["sad_z"] = news_data.common["sad_z"][rnd(#news_data.common["sad_z"])],
			["fun_a"] = news_data.common["fun_a"][rnd(#news_data.common["fun_a"])],
			["fun_z"] = news_data.common["fun_z"][rnd(#news_data.common["fun_z"])],
			["prob_a"] = news_data.common["prob_a"][rnd(#news_data.common["prob_a"])],
			["prob_z"] = news_data.common["prob_z"][rnd(#news_data.common["prob_z"])],
			["corpse_a"] = news_data.common["corpse_a"][rnd(#news_data.common["corpse_a"])],
			["corpse_z"] = news_data.common["corpse_z"][rnd(#news_data.common["corpse_z"])],
			["corpse_name_a"] = news_data.common["corpse_name_a"][rnd(#news_data.common["corpse_name_a"])],
			["corpse_name_z"] = news_data.common["corpse_name_z"][rnd(#news_data.common["corpse_name_z"])],
			["seen_a"] = news_data.common["seen_a"][rnd(#news_data.common["seen_a"])],
			["seen_z"] = news_data.common["seen_z"][rnd(#news_data.common["seen_z"])],
			["when_a"] = news_data.common["when_a"][rnd(#news_data.common["when_a"])],
			["when_z"] = news_data.common["when_z"][rnd(#news_data.common["when_z"])]			
		}
		local m_string = news_data.npc_corpse_templates[rnd(#news_data.npc_corpse_templates)]			
		for key0, value in pairs(t) do
			m_s = string_gsub(m_string, "%$"..key0, value)
			m_string = m_s
		end
		m_s = m_string
	end
	return m_s
end

function format_template_corpse_monster(obj)
	--local rnd = math.random
	local m_s = ""
	if(obj ~= nil) then
		local m_level = get_point_description(get_object_levelname(obj), get_object_position(obj))
		if (m_level == "") then return "" end		
		local m_name  = get_monster_name(obj, 3)
		local m_name2 = get_monster_name(obj, 4)
		local t = {
			["name"] = m_name,
			["class"] = m_name2,
			["c_corpse"] = m_name,
			["level"] = m_level,
			["kill_a"] = news_data.common["kill_a"][rnd(#news_data.common["kill_a"])],
			["kill_z"] = news_data.common["kill_z"][rnd(#news_data.common["kill_z"])],
			["sad_a"] = news_data.common["sad_a"][rnd(#news_data.common["sad_a"])],
			["sad_z"] = news_data.common["sad_z"][rnd(#news_data.common["sad_z"])],
			["fun_a"] = news_data.common["fun_a"][rnd(#news_data.common["fun_a"])],
			["fun_z"] = news_data.common["fun_z"][rnd(#news_data.common["fun_z"])],
			["prob_a"] = news_data.common["prob_a"][rnd(#news_data.common["prob_a"])],
			["prob_z"] = news_data.common["prob_z"][rnd(#news_data.common["prob_z"])],
			["corpse_a"] = news_data.common["corpse_a"][rnd(#news_data.common["corpse_a"])],
			["corpse_z"] = news_data.common["corpse_z"][rnd(#news_data.common["corpse_z"])],
			["seen_a"] = news_data.common["seen_a"][rnd(#news_data.common["seen_a"])],
			["seen_z"] = news_data.common["seen_z"][rnd(#news_data.common["seen_z"])],
			["when_a"] = news_data.common["when_a"][rnd(#news_data.common["when_a"])],
			["when_z"] = news_data.common["when_z"][rnd(#news_data.common["when_z"])]			
		}
		local m_string = news_data.monster_corpse_templates[rnd(#news_data.monster_corpse_templates)]			
		for key0, value in pairs(t) do
			m_s = string_gsub(m_string, "%$"..key0, value)
			m_string = m_s
		end
		m_s = m_string
	end
	return m_s
end

function format_template_hear(obj, hear_a, hear_z)
	--local rnd = math.random
	local m_s = ""
	local m_level = ""
	local m_pos
	if (obj) then
		if (isGameObject(obj)) then
			m_pos = obj:position()
		else
			m_pos = obj.position
		end
		if (m_pos) then
			m_level = get_point_description(get_object_levelname(obj), m_pos)
			if (m_level == "") then return "" end			
		end
		local t = {
			["level"] = m_level, 
			["hear_a"] = hear_a,
			["hear_z"] = hear_z,
			["carefull_a"] = news_data.common["carefull_a"][rnd(#news_data.common["carefull_a"])],
			["carefull_z"] = news_data.common["carefull_z"][rnd(#news_data.common["carefull_z"])],
			["when_a"] = news_data.common["when_a"][rnd(#news_data.common["when_a"])],
			["when_z"] = news_data.common["when_z"][rnd(#news_data.common["when_z"])]			
		}
		local m_string = news_data.hear_sounds_tempates[rnd(#news_data.hear_sounds_tempates)]		
		for key0, value in pairs(t) do
			m_s = string_gsub(m_string, "%$"..key0, value)
			m_string = m_s
		end
		m_s = m_string
	end
	return m_s
end

function format_template_spawn(level_, position, class)
	--local rnd = math.random
	local m_s = ""
	local m_level = ""
	local m_pos
	if (level_ and position and class) then
		m_pos = position
		m_level = get_point_description(level_, m_pos)
		if (m_level == "") then return "" end			
		local t = {
			["level"] = m_level, 
			["class"] = class,
			["carefull_a"] = news_data.common["carefull_a"][rnd(#news_data.common["carefull_a"])],
			["carefull_z"] = news_data.common["carefull_z"][rnd(#news_data.common["carefull_z"])],
			["seen_a"] = news_data.common["spawn_seen_a"][rnd(#news_data.common["spawn_seen_a"])],
			["seen_z"] = news_data.common["spawn_seen_z"][rnd(#news_data.common["spawn_seen_z"])],
			["when_a"] = news_data.common["when_a"][rnd(#news_data.common["when_a"])],
			["when_z"] = news_data.common["when_z"][rnd(#news_data.common["when_z"])]
		}
		local m_string = news_data.spawn_templates[rnd(#news_data.spawn_templates)]		
		for key0, value in pairs(t) do
			m_s = string_gsub(m_string, "%$"..key0, value)
			m_string = m_s
		end
		m_s = m_string
	end
	return m_s
end

function format_template_spawn_group(level_, position, class, count)
	--local rnd = math.random
	local m_s = ""
	local m_level = ""
	local m_pos
	if (level_ and position and class and count) then
		m_pos = position
		m_level = get_point_description(level_, m_pos)
		if (m_level == "") then return "" end			
		local s_count = ""
		if (count == 1) then
			s_count = "one"
		elseif(count == 2) then
			s_count = "a couple"
		elseif(count == 3) then
			s_count = "a few"
		elseif(count >= 4 and count < 6) then
			s_count = "small group"
		elseif(count >= 6 and count < 8) then
			s_count = "large group"
		else
			--s_count = "large group ("..count..")"
			s_count = "group"
		end
		
		local t = {
			["level"] = m_level, 
			["class"] = class,
			["count"] = s_count,
			["carefull_a"] = news_data.common["carefull_a"][rnd(#news_data.common["carefull_a"])],
			["carefull_z"] = news_data.common["carefull_z"][rnd(#news_data.common["carefull_z"])],
			["seen_a"] = news_data.common["spawn_seen_a"][rnd(#news_data.common["spawn_seen_a"])],
			["seen_z"] = news_data.common["spawn_seen_z"][rnd(#news_data.common["spawn_seen_z"])],
			["when_a"] = news_data.common["when_a"][rnd(#news_data.common["when_a"])],
			["when_z"] = news_data.common["when_z"][rnd(#news_data.common["when_z"])]
		}
		local m_string = news_data.spawn_templates_group[rnd(#news_data.spawn_templates_group)]		
		for key0, value in pairs(t) do
			m_s = string_gsub(m_string, "%$"..key0, value)
			m_string = m_s
		end
		m_s = m_string
	end
	return m_s
end

function format_template_actor_seen(level_, position, class)
	--local rnd = math.random
	local m_s = ""
	local m_level = ""
	local m_pos
	if (level_ and position and class) then
		m_pos = position
		m_level = get_point_description(level_, m_pos)
		if (m_level == "") then return "" end			
		local t = {
			["level"] = m_level, 
			["class"] = class,
			["kill_seen_a"] = news_data.common["kill_seen_a"][rnd(#news_data.common["kill_seen_a"])],
			["kill_seen_z"] = news_data.common["kill_seen_z"][rnd(#news_data.common["kill_seen_z"])],
			["when_a"] = news_data.common["when_a"][rnd(#news_data.common["when_a"])],
			["when_z"] = news_data.common["when_z"][rnd(#news_data.common["when_z"])],
			["fun_a"] = news_data.common["fun_a"][rnd(#news_data.common["fun_a"])],
			["fun_z"] = news_data.common["fun_z"][rnd(#news_data.common["fun_z"])],
			["killed_a"] = news_data.common["killed_a"][rnd(#news_data.common["killed_a"])],
			["killed_z"] = news_data.common["killed_z"][rnd(#news_data.common["killed_z"])],
			["cool_a"] = news_data.common["cool_a"][rnd(#news_data.common["cool_a"])],
			["cool_z"] = news_data.common["cool_z"][rnd(#news_data.common["cool_z"])]						
		}
		local m_string = ""
		m_string = news_data.actor_seen_public_templates[rnd(#news_data.actor_seen_public_templates)]		
		for key0, value in pairs(t) do
			m_s = string_gsub(m_string, "%$"..key0, value)
			m_string = m_s
		end
		m_s = m_string
	end
	return m_s
end

function format_template_actor_seen_group(level_, position, class, count)
	--local rnd = math.random
	local m_s = ""
	local m_level = ""
	local m_pos
	if (level_ and position and class and count) then
		m_pos = position
		m_level = get_point_description(level_, m_pos)
		if (m_level == "") then return "" end			
		local s_count = ""
		if (count == 1) then
			s_count = "one"
		elseif(count == 2) then
			s_count = "a couple"
		elseif(count == 3) then
			s_count = "a few"
		elseif(count >= 4 and count < 6) then
			s_count = "small group"
		else
			s_count = "large group"
		end
		local t = {
			["level"] = m_level, 
			["class"] = class,
			["count"] = s_count,
			["fun_a"] = news_data.common["fun_a"][rnd(#news_data.common["fun_a"])],
			["fun_z"] = news_data.common["fun_z"][rnd(#news_data.common["fun_z"])],
			["kill_seen_a"] = news_data.common["kill_seen_a"][rnd(#news_data.common["kill_seen_a"])],
			["kill_seen_z"] = news_data.common["kill_seen_z"][rnd(#news_data.common["kill_seen_z"])],
			["when_a"] = news_data.common["when_a"][rnd(#news_data.common["when_a"])],
			["when_z"] = news_data.common["when_z"][rnd(#news_data.common["when_z"])],
			["killed_a"] = news_data.common["killed_a"][rnd(#news_data.common["killed_a"])],
			["killed_z"] = news_data.common["killed_z"][rnd(#news_data.common["killed_z"])],
			["cool_a"] = news_data.common["cool_a"][rnd(#news_data.common["cool_a"])],
			["cool_z"] = news_data.common["cool_z"][rnd(#news_data.common["cool_z"])]						
		}
		local m_string = ""
		m_string = news_data.actor_seen_public_templates_group[rnd(#news_data.actor_seen_public_templates_group)]		
		for key0, value in pairs(t) do
			m_s = string_gsub(m_string, "%$"..key0, value)
			m_string = m_s
		end
		m_s = m_string
	end
	return m_s
end


function get_point_description(level, point)
	local m_s = ""
	local dist = 10000
	local angle = 0	
	local m_tmp_str = ""
	if (level == "l10u_bunker" or level == "l11_pripyat" or level == "l12_stancia" or level == "l12_stancia_2" or level == "l12u_control_monolith" or level == "l12u_sarcofag") then
		if (isRadarDeactivated() == false) then	return "" end
	end
	if (level and news_data.level_name[level] ~= nil) then
		if (news_data.level_name[level][2] ~= nil) then
			m_tmp_str = news_data.level_name[level][2]..""
		end
	end	
	if (level and news_data.base_points[level] and point) then
		local m_str = ""
		local m_str0 = ""
		local m_point = nil
		local m_dist = 0
		local m_points = news_data.base_points[level]
		local dx = 0
		local dy = 0
		local radians = 0
		for key0, value in pairs(m_points) do
			m_point = vector():set(value["p"][1],value["p"][2],value["p"][3])
			if (m_point) then
				m_dist = m_point:distance_to(point)
				if m_dist < dist then
					dist = m_dist
					m_str = value["text"]
					m_str0 = value["text0"]
					dx = point.x - m_point.x
					dy = point.z - m_point.z
					radians = math_atan2(dy, dx)
					if(radians) then
						angle = radians * 57
						if (angle < 0) then
							angle = angle + 360
						end
						if (angle > 360) then
							angle = angle - 360
						end
					end
				end
			end
		end
		if dist<= 20 then
			m_s = m_tmp_str.." "..m_str0
		elseif dist < 50 then
			m_s = m_tmp_str.." near "..m_str
		elseif dist < 100 then
			m_s = m_tmp_str.." nearby "..m_str
		else --Say, where (north, south ...)
			if (angle >= 330 or angle <= 30) then -- in the east
				m_s = m_tmp_str.." to the East of "..m_str
			elseif (angle >30 and angle <=60) then --northeast
				m_s = m_tmp_str.." to the North-East of "..m_str
			elseif (angle >60 and angle <=120) then --north
				m_s = m_tmp_str.." to the North of "..m_str
			elseif (angle >120 and angle <=150) then --northwest
				m_s = m_tmp_str.." to the North-West of "..m_str
			elseif (angle >150 and angle <=210) then --west
				m_s = m_tmp_str.." to the West of "..m_str
			elseif (angle >210 and angle <=240) then --southwest
				m_s = m_tmp_str.." to the South-west of "..m_str
			elseif (angle >240 and angle <= 300) then --south
				m_s = m_tmp_str.." to the South of "..m_str
			elseif (angle >300 and angle <=330) then --southeast
				m_s = m_tmp_str.." to the South-East of "..m_str
			else
				m_s = m_tmp_str.." next to "..m_str
			end
		end
	else
		m_s = m_tmp_str
	end
	return m_s
end

function isGameObject(obj)
	local bResult = false
	if (obj and obj.fov) then
		bResult = true
	end
	return bResult
end

function get_object_levelname(obj)
	local sim = alife()
	local mlevel = "null"	
	if obj then
		local m_game_vertex
		local nm = "nil"
		if obj.name then nm = obj:name() end
		if isGameObject(obj) then
			m_game_vertex = obj:game_vertex_id()
		else
			m_game_vertex = obj.m_game_vertex_id
		end
		if (m_game_vertex and game_graph():valid_vertex_id(m_game_vertex)) then
			local lvert = game_graph():vertex(m_game_vertex)
			if (lvert ~= nil and lvert.level_id) then
				local lid = lvert:level_id()
				if (lid ~= nil) then
					mlevel = sim:level_name(lid)
				else
					if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: get_object_levelname - level id is null ["..utils.to_str(nm).."]") end
				end
			else
				if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: get_object_levelname - vertex is null ["..utils.to_str(nm).."]") end
			end
			if mlevel == nil then mlevel = "nil" end
		else
			if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: get_object_levelname - vertex_id is null ["..utils.to_str(nm).."]") end
		end
	else
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: get_object_levelname - no obj") end
	end
	return mlevel
end

function check_news()
	if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: check news") end
	-- give the news that had come together and sgrupirovatsya.
	local v = {}
	if table_spawned then
		if TB3D_Modders.show_spawn_news then
			-- for k, v in pairs(table_spawned) do
			for i=1, #table_spawned do
				v={}
				v = table_spawned[i]
				on_spawn_group(v.community, v.level, v.position, v.count, v.o_type)
			end
		end
		-- _g.clear_table(table_spawned)
		table_spawned = {}
	end
	if table_killed_by_actor then
		if TB3D_Modders.show_hero_news then
			--for k, v in pairs(table_killed_by_actor) do
			for i=1, #table_killed_by_actor do
				v={}
				v = table_killed_by_actor[i]
				if v then on_hero_seen(v.community, v.level, v.position, v.count, v.o_type) end
			end
			-- _g.clear_table(table_killed_by_actor)
		end
		table_killed_by_actor = {}
	end
	if (timer_last_showed + timer_show_freq < amk.game_minutes()) then
		-- It's time to show if there is.
		on_news()
	end
	if spammers then spammers = {} end
	if not amk.has_g_timer("news_check") then
		amk.g_start_timer("news_check", 0, 0, timer_check_freq)
	end  
	if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: check news done") end
end

function add_spawned_object(obj)
	local sim = alife()
	if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: add spawned item") end
	if (obj and (IAmAStalker[obj:clsid()] or IAmAMonster[obj:clsid()])) then
		if obj.can_switch_online and obj:can_switch_online() == false then return end
		local s_comm = get_npc_community(obj)
		local communities = {
			[ "actor"] = true,
			[ "stalker"] = true,
			[ "dolg"] = true,
			[ "freedom"] = true,
			[ "stranger"] = true,
			[ "trader"] = true,
			[ "arena_enemy"] = true,
			[ "actor_dolg"] = true,
			[ "actor_freedom"] = true,
			[ "ecolog"] = true,
			[ "nebo"] = true,
			[ "green"] = true
			}
		if (s_comm and communities[s_comm]) then 
			return -- a stalker
		end
		local s_id = ""
		local pos = get_object_position(obj)
		local lev = get_object_levelname(obj)
		local obj_type = 0
		if IAmAStalker[obj:clsid()] then 
			obj_type = 1
		elseif IAmAMonster[obj:clsid()] then 
			--return
			obj_type = 2 
		end
		if (isGameObject(obj)) then
			s_id = obj:id()
		else
			s_id = obj.id
		end	
	if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: add spawned item check smarts") end
		-- Verify that if it is filtered by smart_terrain
		if (news_data.smart_filters and #news_data.smart_filters>0) then
			local m_obj = nil
			if (obj.smart_terrain_id) then
				m_obj = obj
			else
				m_obj = sim:object(s_id)
			end
			if (m_obj and m_obj.smart_terrain_id and m_obj:smart_terrain_id() and m_obj:smart_terrain_id() < last_object and news_data.smart_filters[s_comm]) then --!!!!TB3D
				local sm = sim:object(m_obj:smart_terrain_id())
				if (sm and sm.name and sm:name()) then
					local sn = sm:name()
					for ks, vs in pairs (news_data.smart_filters[s_comm]) do
						if string_find(sn, "^"..vs) then
							if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: add_spawned_object - ["..utils.to_str(s_comm).."] on ["..utils.to_str(sn).."] filtered") end
							return
						end
					end
				end
			end
		end
	if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: add spawned item check monolith") end
		-- Verify that the Monolith is a...
		if s_comm == "monolith" then
			if lev == "l10_radar" or lev == "l10u_bunker" or lev == "l11_pripyat" or lev == "l12_stancia" or lev == "l12_stancia_2" or lev == "l12u_control_monolith" or lev == "l12u_sarcofag" then
				return
			end
		end
		if s_comm == "zombie" or s_comm == "zombied" then
			if lev == "l08_yantar" then
				return
			end
		end
		local b_added = false
		if table_spawned then
			local dist
			local mpos = vector{x,y,z}
			local v = {}
			-- for k, v in pairs(table_spawned) do
			for i=1, #table_spawned do
				v={}
				v = table_spawned[i]
				if (v.community == s_comm and v.level == lev) then
					mpos = v.position
					if (mpos) then
						dist = pos:distance_to(mpos)
						if (dist < distance_close) then
							v.count = v.count + 1
							b_added = true
							break
						end
					end
				end
			end
		end
		if (b_added == false) then
			if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: add spawned item inserted") end
			t = {id = s_id, community = s_comm, count = 1, level = lev, position = pos, o_type = obj_type}
			table.insert(table_spawned, t)
		else
			if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: add spawned item not inserted") end
		end
	end
end

function add_killed_by_actor(obj)
	if (obj and (IAmAStalker[obj:clsid()] or IAmAMonster[obj:clsid()])) then
		local s_comm = get_npc_community(obj)
		if (s_comm and s_comm == "actor" or s_comm == "stalker" or s_comm == "dolg" or s_comm == "freedom" or s_comm == "trader" or s_comm == "ecolog" or s_comm == "nebo" or s_comm == "green") then 
			return -- a stalker
		end
		local s_id = ""
		local lev = get_object_levelname(obj)
		local pos = get_object_position(obj)
		if (isGameObject(obj)) then
			s_id = obj:id()
		else
			s_id = obj.id
		end	
		local b_added = false
		local obj_type = 0
		if IAmAStalker[obj:clsid()] then
			obj_type = 1
		elseif IAmAMonster[obj:clsid()] then
			obj_type = 2
		end
		if table_killed_by_actor then
			local v
			local mpos
			local dist
			-- for k, v in pairs(table_killed_by_actor) do
			for i=1, #table_killed_by_actor do
				v = {}
				v = table_killed_by_actor[i]
				if (v.community == s_comm and v.level == lev) then
					mpos = v.position
					if (mpos) then
						dist = pos:distance_to(mpos)
						if (dist < distance_close) then
							v.count = v.count + 1
							b_added = true
							break
						end
					end
				end
			end
		end
		if (b_added == false) then
			t = {id = s_id, community = s_comm, count = 1, level = lev, position = pos, o_type = obj_type}
			table.insert(table_killed_by_actor, t)
		else
			--
		end
	end	
end

function on_weather_change(old_weather, new_weather)
-- clear, pasmurno, rain, groza
	--local rnd = math.random
	if (old_weather and new_weather) then
		if (amk.game_minutes() - timer_weather_showed > timer_weather_freq) then	
			if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: on_weather_change") end		--!!!!TB3D
			local s_weather = old_weather.."_"..new_weather
			local m_h = level:get_time_hours()
			local s_list = nil
			if m_h >= 6 and m_h < 21 then
				s_list = news_data.weather_templates_day
			else
				s_list = news_data.weather_templates_night
			end
			if (s_list and s_list[s_weather]) then
				local s_text = s_list[s_weather][rnd(#s_list[s_weather])]
				if (rnd() < prob) then
					local name, sname = TB3D_Services.get_names()
					if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: on_weather_change ["..utils.to_str(s_weather).."] ["..utils.to_str(s_text).."]") end
					show_news(s_text, name.." "..sname, rnd(timer_weather, timer_weather * 5), 15, "gen_info")
					timer_weather_showed = amk.game_minutes()
				end
			end
			if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: on_weather_change  done") end		--!!!!TB3D
		end
	end
end

function on_daytime()
-- night, sunrise, sunset...
	--local rnd = math.random
	if (amk.game_minutes() - timer_daytime_showed > timer_daytime_freq) then
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: on_daytime") end		--!!!!TB3D
		local m_h = level:get_time_hours()
		local m_m = level:get_time_minutes()
		local m_t = m_h * 60 + m_m
		local s_text = ""
		local name, sname
		if (m_t >= 4*60+30 and m_t <= 6*60) then 
			-- 04:30 - 06:00 Dawn
			if (rnd() < prob) then
				s_text = news_data.morning_templates[rnd(#news_data.morning_templates)]
				name, sname = TB3D_Services.get_names()
				show_news(s_text, name.." "..sname, rnd(timer_weather, timer_weather * 5), 15, "gen_info")
				timer_daytime_showed = amk.game_minutes()
			end
		elseif(m_t >= 20*60+30 and m_t <= 22*60) then 
			-- 20:30 - 22:00 Sunset
			if (rnd() < prob) then
				s_text = news_data.evening_templates[rnd(#news_data.evening_templates)]
				name, sname = TB3D_Services.get_names()
				show_news(s_text, name.." "..sname, rnd(timer_weather, timer_weather * 5), 15, "gen_info")
				timer_daytime_showed = amk.game_minutes()
			end
		elseif(m_t >= 23*60 and m_t <= 24*60) or (m_t >= 0*60 and m_t <= 4*60) then 
			--23:00 - 04:00 Night			
			if (rnd() < prob) then
				local tbl = news_data.night_templates[rnd(#news_data.night_templates)]
				local texts = tbl.texts
				local comments = tbl.comments
				local probl = tonumber(tbl.prob)
				local base_wait = rnd(timer_weather, timer_weather * 5)
				if (texts) then
					name = "[the source is unknown]"
					local i = 0
					for k, v in pairs(texts) do
					if (comments == nil) then
						name, sname = TB3D_Services.get_names()
						name = name.." "..sname
					end
						s_text = v
						show_news(s_text, name, base_wait + k * 2, 10, "uniq")
						i = i + 1
					end
					if (probl and comments and news_data.comments_templates[comments] and rnd() < probl) then
						s_text = news_data.comments_templates[comments][rnd(#news_data.comments_templates[comments])]
						name, sname = TB3D_Services.get_names()
						show_news(s_text, name.." "..sname, base_wait + (i+1) * 3, 15, "gen_info")
					end
					timer_daytime_showed = amk.game_minutes()
				end				 
			end
			
		end
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: on_daytime  done") end		--!!!!TB3D
	end
end

-- Seen as HS did something
function on_hero_seen(community, level, position, count, o_type)
	--if TB3D_Modders.show_hero_news then
		--local rnd = math.random
		if TB3D_Modders.use_news_message == true then
			TB3D_Services.info_alert("NEWS MAIN: hero seen") end		--!!!!TB3D
		if (community and level and position and count and o_type and o_type > 0) then		
			local name, sname = TB3D_Services.get_names()
			local s_author = name.." "..sname
			local m_str = ""
			local aid = nil
			local author = get_nearest_stalker(level, position, dist_seen, 30)
			if (author) then
				s_author = get_npc_name(author)
				aid = author.id
			else
				if TB3D_Modders.use_news_message == true then
					TB3D_Services.info_alert("NEWS MAIN: on_hero_seen - skip") end
				return
			end

			-- o_type = 1 - NPCs
			-- o_type = 2 - Monsters
			if(o_type == 2) then
				local coeff = 0.0
				local mon = community
				if (mon == "") then return end
				if (mon == "tushkano" or mon == "flesh" or mon == "dog" or mon == "psy_dog" or mon == "pseudodog" or mon == "cat" or mon == "boar") then
					coeff = -0.65
				elseif (mon == "bloodsucker" or mon == "controller") then
					coeff = 0.3					
				end
				if (rnd() < (prob + coeff)) then
					if (count == 1) then
						m_str = format_template_actor_seen(level, potition, get_monster_name_by_string(mon, 4))
					else
						m_str = format_template_actor_seen_group(level, position, get_monster_name_by_string(mon, 6), count)
					end
					do_news(m_str, s_author, rnd(timer_corpse*5, timer_corpse*10), 15, "gen_info", aid)
				end
			elseif(o_type == 1) then
				if (rnd() < prob) then
					local zz = community
					local m_who = ""
					if (zz and news_data.community_name[zz]) then
						if (zz == "actor" or zz == "stalker" or zz == "dolg" or zz == "freedom" or zz== "trader" or zz=="ecolog" or zz=="nebo" or zz=="green") then -- a stalker
							return
						end
						if (count == 1) then
						m_who = news_data.community_name[zz][3]
						else
							m_who = news_data.community_name[zz][4]					
						end
					end
					if (m_who == "") then return end
					if (count == 1) then
						m_str = format_template_actor_seen(level, position, m_who)
					else
						m_str = format_template_actor_seen_group(level, position, m_who, count)
					end
					do_news(m_str, s_author, rnd(timer_corpse*5, timer_corpse*10), 15, "gen_info", aid)
				end
			end
		end	
		if TB3D_Modders.use_news_message == true then
			TB3D_Services.info_alert("NEWS MAIN: on_hero_seen - done") end
	--end
end


-- somewhere verolet gives a light (heli_combat:round, heli_combat.heli_combat:search, heli_combat.heli_combat:flyby)
function on_heli_combat(obj)
	--local rnd = math.random
	if (obj and amk.game_minutes() - timer_heli_showed > timer_heli_freq) then	
		if (rnd() < 0.5) then -- Do not be too often on the helicopter report
			if (rnd() < prob) then
				local name, sname = TB3D_Services.get_names()
				local s_author = name.." "..sname
				local m_str = ""
				m_str = format_template_heli(obj, "combat")
				local author = get_nearest_stalker(get_object_levelname(obj), get_object_position(obj), dist_heli_seen, 0)
				if (author) then
					s_author = get_npc_name(author)
				else
					return
				end
				--show_news(m_str, s_author, rnd(timer_heli, timer_heli * 5), 15, "gen_info")
				do_news(m_str, s_author, rnd(timer_heli, timer_heli * 5), 15, "gen_info", author.id, 1)
				timer_heli_showed = amk.game_minutes()
			end
		end
	end
end

-- saw the helicopter
function on_heli_seen(obj)
	--local rnd = math.random
	if (obj and amk.game_minutes() - timer_heli_showed > timer_heli_freq) then
		if (rnd() < prob) then
			local name, sname = TB3D_Services.get_names()
			local s_author = name.." "..sname
			local m_str = ""
			m_str = format_template_heli(obj, "seen")
			local author = get_nearest_stalker(get_object_levelname(obj), get_object_position(obj), dist_heli_seen, 0)
			if (author) then
				s_author = get_npc_name(author)
			else
				return
			end
			--show_news(m_str, s_author, rnd(timer_heli, timer_heli * 5), 15, "gen_info")
			do_news(m_str, s_author, rnd(timer_heli, timer_heli * 5), 15, "gen_info", author.id, 1)
			timer_heli_showed = amk.game_minutes()
		end
	end
end

-- shot down the helicopter
function on_heli_flame(obj)
	--local rnd = math.random
	if (obj and amk.game_minutes() - timer_heli_showed > timer_heli_freq) then	
		if (rnd() < prob) then
			local name, sname = TB3D_Services.get_names()
			local s_author = name.." "..sname
			local m_str = ""
			m_str = format_template_heli(obj, "flame")
			local author = get_nearest_stalker(get_object_levelname(obj), get_object_position(obj), dist_heli_seen, 0)
			if (author) then
				s_author = get_npc_name(author)
			else
				return
			end
			--show_news(m_str, s_author, rnd(timer_heli, timer_heli * 5), 15, "gen_info")
			do_news(m_str, s_author, rnd(timer_heli, timer_heli * 5), 15, "gen_info", author.id, 1)
			timer_heli_showed = amk.game_minutes()
		end
	end
end

-- crashed helicopter
function on_heli_die(obj)
	--local rnd = math.random
	if (obj and amk.game_minutes() - timer_heli_showed > timer_heli_freq) then	
		if (rnd() < prob) then
			local name, sname = TB3D_Services.get_names()
			local s_author = name.." "..sname
			local m_str = ""
			m_str = format_template_heli(obj, "die")
			local author = get_nearest_stalker(get_object_levelname(obj), get_object_position(obj), dist_heli_seen, 0)
			if (author) then
				s_author = get_npc_name(author)
			else
				return
			end			
			--show_news(m_str, s_author, rnd(timer_heli, timer_heli * 5), 15, "gen_info")
			do_news(m_str, s_author, rnd(timer_heli, timer_heli * 5), 15, "gen_info", author.id, 1)
			timer_heli_showed = amk.game_minutes()
		end
	end
end

-- flew the helicopter
function on_heli_retreat(obj)
	--local rnd = math.random
	if (obj and amk.game_minutes() - timer_heli_showed > timer_heli_freq) then	
		if (rnd() < prob) then
			local name, sname = TB3D_Services.get_names()
			local s_author = name.." "..sname
			local m_str = ""
			m_str = format_template_heli(obj, "retreat")
			local author = get_nearest_stalker(get_object_levelname(obj), get_object_position(obj), dist_heli_seen, 0)
			if (author) then
				s_author = get_npc_name(author)
			else
				return
			end			
			--show_news(m_str, s_author, rnd(timer_heli, timer_heli * 5), 15, "gen_info")
			do_news(m_str, s_author, rnd(timer_heli, timer_heli * 5), 15, "gen_info", author.id, 1)
			timer_heli_showed = amk.game_minutes()
		end
	end
end

-- Seen monsters. Will spawn.
function do_seen_monster()
	if TB3D_Modders.show_death_news then
		local sim = alife()
		--local rnd = math.random
		local avail = {}
		local name, sname = TB3D_Services.get_names()
		local s_author = name.." "..sname
		local o_author = ""
		local icon = "gen_info"
		local author_id = nil
		local where = ""
		local class = nil
		local bDayOk = true
		local alive = nil
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: monster seen["..utils.to_str(name).."]["..utils.to_str(sname).."]")	end								--!!!!TB3D
		for k,v in pairs(news_data.do_seen_monster_templates) do
			if (v.enabled == true) then
				-- Verify, as there is with the regime of day / night
				bDayOk = true
				for idx, cls in pairs(v.spawn) do
					class = cls.class
					if (news_data.class_templates[class] and #news_data.class_templates[class] >0 ) then
						class = news_data.class_templates[class][rnd(#news_data.class_templates[class])]
					end
					if (is_creature_day(class) == false) then
						bDayOk = false
						break
					end
				end
				if v.alive then
					alive = tonumber(v.alive)
					if (alive and isAlive(alive) == false) then
						bDayOk = false
					end
				end
				if bDayOk == true then
					if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: day ok["..utils.to_str(v.text).."] at ["..utils.to_str(level.get_time_hours()).."]hr") end
					table.insert(avail, k)
				else
					if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: Not day for ["..utils.to_str(v.text).."] at ["..utils.to_str(level.get_time_hours()).."]hr") end
				end
			end
		end

		if #avail > 0 then
			local t = avail[rnd(#avail)]
			local z = news_data.do_seen_monster_templates[t]
			local obj
			if (z) then
				-- Draw out what you need.
				local spawn = z.spawn
				local text = z.text
				if (z.author) then 
					o_author = z.author
					s_author = z.author
				end
				if (z.icon) then icon = z.icon end
				local bInfo = true
				local info = z.has_info
				if (info) then				
					local tbl = amk.str_explode(",", amk.trim(info), true)
					if (tbl and #tbl) then
						bInfo = false
						for ki, vi in pairs(tbl) do
							if has_alife_info(vi) then
								bInfo = true
								break		--!!!!TB3D
							end
						end
					end
				end
				if (bInfo == false) then
					if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: do_seen_monster skip - ["..utils.to_str(text).."]") end
					return
				end
				if (text and spawn and (#spawn > 0)) then
					local b_ok = false
					local class --= m.class
					local count --= m.count
					local point --= m.point
					local lv --= m.lv
					local gv --= m.gv
					local index
					local new_pos, x_offset, z_offset
					local author = nil
					local tbl = nil --amk.read_monster_params(obj)
					local cd = nil --amk.parse_custom_data(tbl.custom)
					local rank
					local section = nil
					local m_where = nil
					for l,m in pairs(spawn) do
						class = m.class
						count = m.count
						point = m.point
						lv = m.lv
						gv = m.gv
						if (class and count and point and lv and gv) then
							for index=1, count do
								x_offset = rnd(5)
								z_offset = rnd(5)
								new_pos = vector():set( point[1], point[2], point[3])
								new_pos.x = new_pos.x + x_offset
								new_pos.z = new_pos.z + z_offset
								if (point_is_far(new_pos, lv, gv, dist_far) == false) then
									-- Too close.
									return
								end
								obj = sim:create(class, new_pos, lv, gv)
								if (obj) then
									if (o_author == "") then
										author = get_nearest_stalker(get_object_levelname(obj), get_object_position(obj), dist_seen, 0)
										if (author and get_npc_name(author) ~= "") then
											s_author = get_npc_name(author)
											o_author = s_author
											author_id = author.id
										end
									end
									if (where == "" and string_find(text,"$where")) then
										m_where = get_point_description(get_object_levelname(obj), get_object_position(obj))
										if m_where then
											text = string_gsub(text, "$where", m_where)
											where = m_where
										end
									end
									if IAmAMonster[obj:clsid()] then
										tbl = amk.read_monster_params(obj)
										cd = amk.parse_custom_data(tbl.custom)
										if not cd.smart_terrains then cd.smart_terrains={} end
										cd.smart_terrains.none = "true"
										-- Mikrokvest
										if (z.reward and z.reward.c_min and z.reward.c_max and index == 1 and l == 1) then
											if not cd.microquest then cd.microquest={} end
											cd.microquest.reward_money = rnd(z.reward.c_min, z.reward.c_max) * 100
											cd.microquest.reward_items = ""
											rank = get_npc_rank(db.actor)
											if (rank and news_data.miniquest_rewards and news_data.miniquest_rewards[rank]) then
												for i=1, 3 do
													section = news_data.miniquest_rewards[rank][rnd(#news_data.miniquest_rewards[rank])]
													if (section) then
														if (cd.microquest.reward_items == "") then
															cd.microquest.reward_items = section
														else
															cd.microquest.reward_items = cd.microquest.reward_items..","..section
														end
													end
												end
											end
											s_from = string_gsub(s_author, " ", "_")
											cd.microquest.reward_from = s_from
											if TB3D_Modders.show_news_spots == true then amk.add_spot_on_map(obj.id, "red_location", text) end
										end
										tbl.custom = amk.gen_custom_data(cd)
										amk.write_monster_params(tbl, obj)
									end
									b_ok = true
								end
							end					
						end
					end
					if (b_ok == true) then
						if (s_author ~= "") then
							if author_id then
								do_news(text, s_author, rnd(timer_spawn, timer_spawn * 3), 15, icon, author_id, 1)
							else
								show_news(text, s_author, rnd(timer_spawn, timer_spawn * 3), 15, icon)
							end
						end					
						news_data.do_seen_monster_templates[t].enabled = false				
						timer_def_spawn = amk.game_minutes()					
					end
				end
			end
		else
			if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: do_seen_monster - no free news left.") end
			for k,v in pairs(news_data.do_seen_monster_templates) do
				v.enabled = true
			end
		end
	end
end

function on_wound(obj)
	if TB3D_Modders.show_death_news then
		--local rnd = math.random
		if (obj and obj.name) then
			if (IsNpcStalker(obj)) then
				if (rnd() < prob) then
					local stype = "single"
					local author_id = obj.id
					if (rnd() < 0.5) then stype = "group" end
					local stext = news_data.wound_templates[stype][rnd(#news_data.wound_templates[stype])]				
					local m_pos = get_object_position(obj)
					local m_level = ""
					if (m_pos) then
						m_level = get_point_description(get_object_levelname(obj), m_pos)
						if (m_level == "") then return end
					end
					local sname = get_npc_name(obj)
					local t = { ["level"] = m_level, ["name"] = sname }
					local m_s = ""
					for key0, value in pairs(t) do
						m_s = string_gsub(stext, "%$"..key0, value)
						stext = m_s
					end
					m_s = stext
					local sfrom = sname
					if (stype == "group") then
						local name, sname = TB3D_Services.get_names()
						sfrom = name.." "..sname
						local author = get_nearest_stalker(get_object_levelname(obj), get_object_position(obj), dist_seen, 0)
						if (author and get_npc_name(author) ~= "") then
							s_from = get_npc_name(author)
							author_id = author.id
						end
					end
					--show_news(m_s, sfrom, rnd(timer_stalker_death, timer_stalker_death * 2), 10, "gen_info")
					do_news(m_s, sfrom, rnd(timer_stalker_death, timer_stalker_death * 2), 10, "gen_info", author_id, 1)
					if (isGameObject(obj)) then
						if TB3D_Modders.show_news_spots == true then amk.add_spot_on_map(obj:id(), "red_location", m_s) end
					else
						if TB3D_Modders.show_news_spots == true then amk.add_spot_on_map(obj.id, "red_location", m_s) end
					end
				end
			end
		end
	end
end

-- Message about the death of Semetskogo
function do_eternal_stalker()
	if TB3D_Modders.show_death_news then
		--local rnd = math.random
		local m_level = news_data.levels[rnd(#news_data.levels-5)]
		local b_indoor = news_data.levels_types[m_level]
		if (m_level and news_data.level_name[m_level]) then
			m_level = news_data.level_name[m_level][1]
		end
		local m_name = "Unknown STALKER" --"Jury Semetsky"
		local m_killer_str = ""
		-- Anomaly, a monster or NPC(?).
		if (rnd() < 0.4) then
			-- Anomaly
			if (b_indoor == 0) then
				m_killer_str = news_data.anomalies[rnd(#news_data.anomalies)]
			else
				-- Not all anomalies are underground...
				m_killer_str = news_data.anomalies[rnd(#news_data.anomalies-3)]			
			end
		else
			-- Monsters
			if (b_indoor == 0) then
				m_killer_str = news_data.monsters[rnd(#news_data.monsters)]
			else
				-- Not all monsters are under the ground...
				m_killer_str = news_data.monsters[rnd(#news_data.monsters-6)]
			end
		end
		local m_string = m_name..", "..m_level..", "..m_killer_str.."."
		show_news(m_string, "S.T.A.L.K.E.R. killed:", rnd(timer_stalker_death, timer_stalker_death * 5), 10, "death")
		timer_eternal_stalker = amk.game_minutes()
	end
end

function next_blow(timer)
	timer_next_blow = amk.game_minutes() + timer
end

--[[------------------------ News about time to release ----------------------]]
function do_blow_news()
	if TB3D_Modders.run_blowout_pp == true and TB3D_Modders.show_blowout_news then
		--local rnd = math.random
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: release")	end							--!!!!TB3D
		if (timer_next_blow == 0) then return end
		--if (amk.load_variable("blowout",-1) > -1 and amk.load_variable("blowout",-1) < 5) then return end
		local m_time = amk.game_minutes()
		local diff = (timer_next_blow - m_time) / 60 -- The difference in game clock
		if diff < 1 then return end
		local item = news_data.blowout_templates[rnd(#news_data.blowout_templates)]
		local stext = item["text"]
		local alive = tonumber(item["alive"])
		if (alive and isAlive(alive) == false) then
			return
		end
		if (stext) then
			local when = ""
			if (diff < 2) then
				when = "in about an hour"
			elseif (diff >= 2 and diff <=4) then	
				when = "in a couple of hours"
			elseif (diff > 4 and diff <=8) then	
				when = "in about 6 or 7 hours"
			elseif (diff > 8) then
				local m_h = level:get_time_hours()
				local n_h = m_h + diff
				if (n_h >= 9 and n_h < 11) then when = "In the morning" end
				if (n_h >= 11 and n_h < 14) then when = "In the afternoon" end
				if (n_h >= 14 and n_h < 18) then when = "After dinner" end
				if (n_h >= 18 and n_h < 22) then when = "In the evening" end
				if (n_h >= 22 and n_h < 30) then when = "At night" end
				if (n_h >= 30 and n_h < 34) then when = "Tomorrow, in the morning" end
				if (n_h >= 34 and n_h < 38) then when = "Tomorrow, in the afternoon" end
				if (n_h >= 38 and n_h < 42) then when = "Tomorrow, after dinner" end
				if (n_h >= 42 and n_h < 50) then when = "Tomorrow night" end
			end
			if (when == "") then return end
			local t = { ["when"] = when}
			local m_s = ""
			for key0, value in pairs(t) do
				m_s = string_gsub(stext, "%$"..key0, value)
				stext = m_s
			end
			m_s = stext
			local sfrom = ""
			local name, sname = TB3D_Services.get_names()
			sfrom = name.." "..sname					
			show_news(stext, sfrom, rnd(10, timer_general), 10, "gen_info")
			timer_blow_showed = amk.game_minutes()
	   end
   end
end
--[[--------------------------------- lsclon -----------------------------------]]

function news_sort(a,b)
	if (a.priority==1 and b.priority ~=1) then
		return false
	end
	return a.created < b.created
	--return a.timeout < b.timeout
end


function on_news()
	local sim = alife()
	local did_news = false								--110007
	--local rnd = math.random
	local avail = {}
	if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: on news")	end										--!!!!TB3D
	if news_stack then 
		for k,v in pairs(news_stack) do
			if v.activated == nil then
				if (v.lifetime > amk.game_minutes()) then
--[[
					if (v.timeout < game_minutes) then -- News relevant.
						--ti(avail, k)
					else
						mylog("Not ready yet - ".. v.from) -- Not yet.
					end
]]--
				else -- The news out of date.
					if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: Too old - ["..utils.to_str(v.from).."]["..utils.to_str(v.text).."]") end
					table_remove(news_stack, k)
				end
			else -- The news has already been.
				table_remove(news_stack, k)
			end
		end
		-- Sort.
		table_sort(news_stack, news_sort)
		--amk.dump_table(news_stack)
		for k,v in pairs(news_stack) do
			if v.activated == nil then
				if (v.lifetime > amk.game_minutes()) then
					if (v.timeout < amk.game_minutes()) then -- News relevant.
						table.insert(avail, k)
					else
						if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: Not ready yet - ["..utils.to_str(v.from).."]["..utils.to_str(v.text).."]") end	-- Not yet. 
					end
				else -- The news is out of date.
					if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: Too old - ["..utils.to_str(v.from).."]["..utils.to_str(v.text).."]") end
					table_remove(news_stack, k)
				end
			else -- The news has already been.
				if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: already sent - ["..utils.to_str(v.from).."]["..utils.to_str(v.text).."]") end
				table_remove(news_stack, k)
			end
		end
	end
	if avail and #avail > 0 then
		--local t = avail[rnd(#avail)]
		local t = avail[1]
		local z = news_stack[t]
		if (z) then
			local bAlive = false
			local m_author_id = tonumber(z.author_id)
			if (m_author_id ~= nil) then
				bAlive = false
				local obj = sim:object(m_author_id)
				if (obj) then
					if (IAmAStalker[obj:clsid()]) then
						if IsNpcStalker(obj) then
							if (obj.alive and obj:alive()==true and obj.health and obj:health() > 0) then
								if TB3D_Modders.show_news_spots == true then amk.add_spot_on_map(obj.id, "red_location", z.from..": "..z.text) end
								bAlive = true
							end
						end
					end
				end
			else
				bAlive = true
			end
			if (bAlive == true) then
				--show_news(z.from, z.text, z.timeout, z.showtime, z.section)
				show_news(z.text, z.from, 0, z.showtime, z.section)
				did_news = true
				z.activated = amk.game_minutes()
			else
				if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: not alive ["..utils.to_str(v.from).."]["..utils.to_str(v.text).."]") end
			end
		end
	else
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: on_news - no news") end
	end	
	if (timer_next_blow == 0) then
		local delay
		local name
		for a=1,100,1 do
			name = amk.load_variable("gt"..a,nil)	--!!!!TB3D blowout
			if name ~= nil then
				--name 	= amk.load_variable("gt"..a, nil)		
				delay 	= amk.load_variable("gd"..a, nil)
				if (name and delay and name == "blow_shift") then
					timer_next_blow = delay
					break		--!!!!TB3D
					--next_blow(delay)
				end
			end
		end	
	end
    local gtime = amk.game_minutes()
	if (gtime - timer_blow_showed > timer_blow_freq) then
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: gtime blow news") end
		do_blow_news()
		did_news = true
	elseif (gtime - timer_eternal_stalker > timer_eternal_stalker_freq) then
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: gtime eternal stalker") end
		do_eternal_stalker()	
		did_news = true
	elseif (gtime - timer_def_spawn > timer_def_spawn_freq) then
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: gtime on monster seen") end
		do_seen_monster()	
		did_news = true
	elseif (gtime - timer_daytime_showed > timer_daytime_freq) then
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: gtime on day") end
		on_daytime()
		did_news = true
	end
	--[[ elseif (gtime - timer_random_spawn > timer_random_spawn_freq) then
		do_seen()
		did_news = true
	end ]]
	if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: on news DONE")	end									--!!!!TB3D
	return did_news			--110007
end

--[[function game_minutes()
	local gtime = level.get_time_days()*60*24+level.get_time_hours()*60+level.get_time_minutes()  --time in game minutes
	return gtime
end]]

function on_offline_item_found(who, object)
	if (who and object) then
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: item npc["..utils.to_str(get_npc_name(who)).."] found["..utils.to_str(get_object_name(object)).."]") end
	end
end

function on_offline_artifact_found(who, object)
	if (who and object) then
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: artifact npc["..utils.to_str(get_npc_name(who)).."] found["..utils.to_str(get_object_name(object)).."]") end
	end	
end

function on_offline_weapon_found(who, object)
	if (who and object) then
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: weapon npc["..utils.to_str(get_npc_name(who)).."] found["..utils.to_str(get_object_name(object)).."]") end
	end
end

function on_offline_monster_found(who, object)
	if (who and object) then
		local s_enemy = ""
		if (IAmAMonster[object:clsid()]) then
			s_enemy = get_monster_name(object, 2)
		end
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: monster npc["..utils.to_str(get_npc_name(who)).."] fighting["..utils.to_str(s_enemy).."]") end
	end	
end

function on_offline_enemy_found(who, object)
	if (who and object) then
		local s_enemy = ""
		if (IAmAStalker[object:clsid()]) then
			s_enemy = get_npc_community(object)
		end
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: enemy npc["..utils.to_str(get_npc_name(who)).."] fighting["..utils.to_str(s_enemy).."]") end
	end
end

-- Someone thundered in an offline.
function on_offline_death(victim, killer, weapon)
	if TB3D_Modders.show_death_news then
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: on offline death") end
		if (victim and killer) then
			if (IAmAStalker[victim:clsid()]) then
				if (IsNpcStalker(victim)) then
					on_offline_stalker_death(victim, killer, weapon)
				else
					on_offline_npc_death(victim, killer, weapon)
				end
			end	
		end
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: on offline death done") end
	end
end

function on_offline_stalker_death(victim_, killer_, weapon_)
	if TB3D_Modders.show_death_news then
		if (victim_ == nil) then
			return
		end
		--local rnd = math.random
		local m_killer = ""
		local m_killer_s = ""
		local m_victim = ""
		local aid = nil
		local m_name  = get_npc_name(victim_)
		m_victim = format_death_stalker_corpse(victim_)
		local m_level = get_level_name(get_object_levelname(victim_))
		if (killer_) then
			if IAmAMonster[killer_:clsid()] then
				m_killer = format_death_by_monster(killer_)
				m_killer_str = get_monster_name(killer_, 2)
			elseif (IsAnomaly(killer_)) then
				m_killer = format_death_by_anomaly(killer_)
				m_killer_str = get_anomaly_name(killer_, 1)
			elseif (IsNpcStalker(killer_)) then
				local m_o_weapon = weapon_
				local m_s_weapon = ""
				if (m_o_weapon) then
					m_s_weapon = get_weapon_type(m_o_weapon)
					if (m_s_weapon < 5) then m_killer_str = "bullet wound" end
					if (m_s_weapon == 6) then m_killer_str = "knife" end
					if (m_s_weapon == 8) then m_killer_str = "burns" end
					if (m_s_weapon == 7 or m_s_weapon == 5) then m_killer_str = "grenade" end
				end
				m_killer = format_death_by_weapon(weapon_)
			elseif (IsNpcOther(killer_)) then
				local m_o_weapon2 = weapon_
				local m_s_weapon2 = ""
				if (m_o_weapon2) then
					m_s_weapon2 = get_weapon_type(m_o_weapon2)
					if (m_s_weapon2 < 5) then m_killer_str = "bullet wound" end
					if (m_s_weapon2 == 6) then m_killer_str = "knife" end
					if (m_s_weapon == 8) then m_killer_str = "burns" end
					if (m_s_weapon2 == 7 or m_s_weapon2 == 5) then m_killer_str = "grenade" end
				end
				m_killer = format_death_by_weapon(weapon_)
			else
				m_killer_str = "Cause of Death: Unknown"
				m_killer = ""
				if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: On offline stalker death - unknown killer. ["..utils.to_str(killer:name()).."] clsid["..utils.to_str(get_clsid(killer)).."]")		end		
			end
		end
		if (m_killer_str==nil or m_killer_str=="") then m_killer_str = "Cause of Death: Unknown" end
		local m_string = m_name..", "..m_level..", "..m_killer_str.."."
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: Offline: stalker killed["..utils.to_str(m_string).."]") end
		do_news(m_string, "S.T.A.L.K.E.R. killed:", rnd(timer_stalker_death, timer_stalker_death * 5), 10, "death") 
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: Offline: stalker death done") end
		if (rnd() < prob) then
			local name, sname = TB3D_Services.get_names()
			local s_author = "" --name.." "..sname
			local m_str = ""
			if (rnd() < 0.5) then
				if (rnd() < 0.5) then
					m_str = m_victim.." "..m_killer..""
				else
					m_str = m_victim..""
				end
				local author = get_nearest_stalker(get_object_levelname(victim_), get_object_position(victim_), dist_seen, 0)
				if (author) then
					s_author = get_npc_name(author)
					aid = author.id
				end			
			else
				local author = get_nearest_stalker(get_object_levelname(victim_), get_object_position(victim_), dist_hear_max, dist_hear_min)
				if (author) then
					s_author = get_npc_name(author)
					aid = author.id
				else
					return
				end		
				m_str = format_death_hear_sounds(victim_, killer_, weapon_)
			end
			if (m_str ~= "" and s_author ~= "") then
				if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: Offline death["..utils.to_str(s_author).."]["..utils.to_str(m_str).."]") end
				do_news(m_str, s_author, rnd(timer_corpse, timer_corpse *5), 15, "gen_info", aid)
			end
		end
	end
end

function on_offline_npc_death(victim_, killer_, weapon_)
	if TB3D_Modders.show_death_news then
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: On offline npc death") end
		if (victim_ ~= nil) then
			--local rnd = math.random
			local m_victim = ""
			local m_killer = ""
			local aid = nil
			m_victim = format_death_npc_corpse(victim_)
			if (killer_) then
				if IAmAMonster[killer_:clsid()] then
					m_killer = format_death_by_monster(killer_)
				elseif (IsNpcStalker(killer_)) then -- Hmm, and who are its true? Or his or HS
					m_killer = format_death_by_weapon(weapon_)
				elseif (IsNpcOther(killer_)) then -- Yeah. Or gangsters, or warriors, or killers ... In general, people.
					m_killer = format_death_by_weapon(weapon_)
				elseif (IsAnomaly(killer_)) then
					m_killer = format_death_by_anomaly(killer_)
				else
					m_killer = ""
					if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: On offline npc death unknown killer["..utils.to_str(killer:name()).."] clsid["..utils.to_str(get_clsid(killer)).."]") end
				end
			else
				if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: On offline npc death no killer["..utils.to_str(victim_:name()).."]") end
			end
			if (rnd() < prob) then
				local name, sname = TB3D_Services.get_names()
				local s_from = "" --name.." "..sname
				local s_author = s_from
				local m_str = ""
				if (rnd() < 0.5) then
					if (rnd() < 0.5) then
						m_str = m_victim.." "..m_killer..""
					else
						m_str = m_victim..""
					end
					local author = get_nearest_stalker(get_object_levelname(victim_), get_object_position(victim_), dist_seen, 0)
					if (author) then
						s_author = get_npc_name(author)
						s_from = s_author
						aid = author.id
					end			
				else
					local author = get_nearest_stalker(get_object_levelname(victim_), get_object_position(victim_), dist_hear_max, dist_hear_min)
					if (author) then
						s_author = get_npc_name(author)
						s_from = s_author
						aid = author.id
					else
						return
					end		
					m_str = format_death_hear_sounds(victim_, killer_, weapon_)
				end
				if (m_str ~= "" and s_from ~= "") then
					do_news(m_str, s_from, rnd(timer_corpse, timer_corpse *5), 15, "gen_info", aid)
					if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: On offline npc death notice["..utils.to_str(s_from).."] ["..utils.to_str(m_str).."]") end
				end
			end
		end
		if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: On offline npc death done") end
	end
end

-- Someone injured in an offline.
function on_offline_wound(victim)
	if TB3D_Modders.show_death_news then
		if (victim) then
			if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: Offline wound["..utils.to_str(victim:name()).."] is wounded") end
			on_wound(victim)
		end
	end
end

function on_offline_fight(team_A, team_B)
 -- There was an exchange of fire with. All killed
-- Was met (ran into) to. All killed
-- There was an exchange of fire with. 2, we set.
-- Was met (ran into) to. 4 Place.
-- There was an exchange of fire with. Put our 2.
-- Was met (ran into) to. 4 of our put.
end

function on_offline_corpse_found(who, object)
	if TB3D_Modders.show_death_news then
		--local rnd = math.random
		if (who and object) then
			if (IAmAStalker[who:clsid()] and IsNpcStalker(who)) then
				local s_corpse = ""
				if IAmAMonster[object:clsid()] then
					s_corpse = format_template_corpse_monster(object)
				elseif (IAmAStalker[object:clsid()]) then
					if (IsNpcStalker(object)) then
						s_corpse = format_template_corpse_stalker(object)			
					else
						s_corpse = format_template_corpse_npc(object)
					end
				end
				if (s_corpse == nil) then s_corpse = "" end
				local s_from = get_npc_name(who)
				if (s_from and s_corpse and s_corpse ~= "" and s_from ~= "") then
					do_news(s_corpse, s_from, rnd(timer_corpse, timer_corpse *5), 15, "gen_info")
				end
				if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: Offline corpse["..utils.to_str(get_npc_community(who)).."] found a corpse. ["..utils.to_str(s_corpse).."]") end
			end
		end
	end
end

function on_offline_trade(npc, item)
	--local rnd = math.random
	if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: offline trade")	end							--!!!!TB3D
	if (npc and item and rnd() < 0.25) then
		local m_from = get_npc_name(npc)
		local m_str = news_data.trade_templates[rnd(#news_data.trade_templates)]
		local m_level = get_point_description(get_object_levelname(npc), get_object_position(npc))
		if (m_level == "") then return end		
		local m_title = get_object_name(item)
		local t = {["level"] = m_level, ["item"] = m_title}
		for key0, value in pairs(t) do
			m_str = string_gsub(m_str, "%$"..key0, value)
		end
		if (m_str ~= "") then
			if TB3D_Modders.use_news_message == true then
				TB3D_Services.info_alert("Offline: Trade ["..m_from.."] ["..m_str.."]")
				--TB3D_Services.info_alert(m_str, m_from, rnd(timer_general, timer_general *5), 15, "trade")
			end
			if TB3D_Modders.show_news_spots == true then amk.add_spot_on_map(npc.id,"red_location", m_str) end
			do_news(m_str, m_from, rnd(timer_general, timer_general * 10), 15, "trade", npc.id, 1)
		end
	end
end

function create_treasurebox()
	local sim = alife()
	local actor = db.actor
	local obj
	local pos = actor:position()
	if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: create treasure box")	end							--!!!!TB3D
	obj = sim:create("m_inventory_box", pos, actor:level_vertex_id(), actor:game_vertex_id())
	if (obj) then
		local t = amk.get_invbox_data(obj)
		t.custom = "[logic]\ncfg = scripts\\treasure_inventory_box.ltx"
		amk.set_invbox_data(t, obj)
		--amk.add_spot_on_map(obj.id, "treasure_spot", "My treasure")
	end
end

function on_miniquest_reward(trader)
	local sim = alife()
	if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: mini-quest reward")	end					--!!!!TB3D
	if (trader and db.actor) then
		local money = 0
		local items = ""
		local story_id = -1
		if (trader.m_story_id) then
			story_id = trader.m_story_id
		elseif(trader.story_id) then
			story_id = trader:story_id()
		end
		if (story_id == 3) then
			local obj = sim:story_object(3)
			if (obj) then
				local t = amk.get_trader_data(obj)
				local cd = amk.parse_custom_data(t.custom)
				if (cd.microquest and cd.microquest.reward_money and cd.microquest.reward_items) then
					money = tonumber(cd.microquest.reward_money)
					items = cd.microquest.reward_items
				end
				if (money and items and money > 0 and items ~= "") then
					dialogs.relocate_money(trader, money, "in")
					local tbl = amk.str_explode(",", items, true)
					--local section
					for k, v in pairs(tbl) do
						--section = v
						if (v) then
							dialogs.relocate_item_section(trader, v, "in")
						end
					end
					cd.microquest = {}
					cd.microquest.reward_money = 0
					cd.microquest.reward_items = ""
					t.custom = amk.gen_custom_data(cd)
					amk.set_trader_data(t, obj)
				end
			end
		elseif (story_id == 500) then
			local obj = sim:story_object(500)
			if (obj) then
				local t = amk.read_stalker_params(obj)
				local cd = amk.parse_custom_data(t.custom)
				if (cd.microquest and cd.microquest.reward_money and cd.microquest.reward_items) then
					money = tonumber(cd.microquest.reward_money)
					items = cd.microquest.reward_items
				end
				if (money and items and money > 0 and items ~= "") then
					dialogs.relocate_money(trader, money, "in")
					local tbl = amk.str_explode(",", items, true)
					for k, v in pairs(tbl) do
						--local section = v
						if (v) then
							dialogs.relocate_item_section(trader, v, "in")
						end
					end
					cd.microquest = {}
					cd.microquest.reward_money = 0
					cd.microquest.reward_items = ""
					t.custom = amk.gen_custom_data(cd)
					amk.write_stalker_params(t, obj, true)
				end
			end		
		else
			if story_id == nil then story_id = -1 end
			if TB3D_Modders.use_news_message == true then TB3D_Services.info_alert("NEWS MAIN: on_miniquest_reward - strange story_id["..utils.to_str(story_id).."]") end
		end		
	end	
end


function point_is_far(point, lv, gv, distance)
	local sim = alife()
	local actor = db.actor
	local result = true
	if actor and point and lv and gv and distance then
		if game_graph():valid_vertex_id(gv) then										-- insure valid gv and same level
			local map = game_graph():vertex(gvid):level_id()
			if map and level.name() == map then
				if (point:distance_to(actor:position()) < distance) then				-- Enough away?
					result = false
				end
			end
		end
   end
   return result
end

function get_nearest_stalker(level, point, dist_max, dist_min)
	local sim = alife()
	local obj = nil
	local map = level
	local min_dist = 1000000
	if (dist_max == nil or dist_max == 0) then dist_max = dist_seen end
	if (dist_min == nil) then dist_min = 0 end
	if (map and point and amk_offline_alife.off_npcs[map] and amk_offline_alife.off_npcs[map].stalkers and #amk_offline_alife.off_npcs[map].stalkers > 0) then
		local stalker
		--local s_map
		local zz = ""
		local s_dist
		local b_ok = false
		local sn = ""
		for k, v in pairs(amk_offline_alife.off_npcs[map].stalkers) do
			if v then
				stalker = sim:object(v.id)
				-- On one level, whether?
				if stalker and stalker.id ~= db.actor:id() and stalker.health and stalker.can_switch_online and stalker:can_switch_online() then
					if map == TB3D_Services.get_obj_level(stalker.m_game_vertex_id) then
						if (stalker:health() > 0 and stalker.alive and stalker:alive()==true) then
							zz = get_npc_community(stalker)
							if (zz == "stalker" or zz == "dolg" or zz == "freedom" or zz == "nebo" or zz == "green") then -- a stalker
								if (stalker.name and stalker:name() ~= "agr_ratcatcher") then
								-- Enough away?
									s_dist = stalker.position:distance_to(point)
									if (s_dist <= dist_max and s_dist >= dist_min and s_dist < min_dist) then
										-- And if it is not spam lately?
										b_ok = true
										if (spammers and #spammers > 0) then
											sn = get_npc_name(stalker)
											if (sn ~= "" and sn ~= nil) then
												for sk, sv in pairs(spammers) do
													if (sv == sn) then
														b_ok = false
														break
													end
												end
											end
										end
										if (b_ok == true) then
											min_dist = s_dist	--continue loop looking for closest one
											obj = stalker
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
	return obj
end

function isAlive(story_id)
	if (story_id) then
		local obj = alife():story_object(story_id)
		if (obj and obj.alive and obj:alive()==true) then
			return true
		end
	end
	return false
end

function on_info(info_id)
--	if (info_id) then
--		TB3D_Services.info_alert("on_info : "..tostring(info_id))
--	end
end

function isRadarDeactivated()
	if (has_alife_info("bar_deactivate_radar_done")) then
		return true
	end
	return false
end

function isIsolatedLevel(level_name)
	return level_weathers.is_indoor()
end

function connection_message()		--called from ui_main_menu
	--TB3D_Services.packet_alert("news main: connection message")
	local lname = level.name()
	local sname = TB3D_Services.level_on_save()
	if lname ~= sname then
		local text = ""
		local b_text = text
		--local rnd = math.random
		if (isIsolatedLevel(lname)== true and isIsolatedLevel(sname) == false) then
			text = news_data.disconnect_templates[rnd(#news_data.disconnect_templates)]
		elseif (isIsolatedLevel(lname) == false and isIsolatedLevel(sname) == true) then
			text = news_data.connect_templates[rnd(#news_data.connect_templates)]
			if TB3D_Services.remove_info("tb3d_blowout_under") == true then
				b_text = news_data.wasblowout_templates[rnd(#news_data.wasblowout_templates)]
			end
		end
		if text and text ~= "" then
			--TB3D_Services.packet_alert("news main: sending["..utils.to_str(text).."]")
			news_manager.amk_send_tip(text, "Connection Status:", 0, 15, "pda_icon")
		end
		if b_text and b_text ~= "" then
			news_manager.amk_send_tip(b_text, "important_msg", 0, 20, "blowout_sms")
		end
	end
	--TB3D_Services.packet_alert("news main: connection message done")
end

function is_creature_day(obj_section)
	--checking for Day / Night
	--local day_begin = utils.cfg_get_number(system_ini(), obj_section, "DayTime_Begin", nil, false, -1)
	local day_begin = getIniValueFloat(obj_section, "DayTime_Begin", -1, nil)
	--local day_end = utils.cfg_get_number(system_ini(), obj_section, "DayTime_End", nil, false, -1)
	local day_end = getIniValueFloat(obj_section, "DayTime_End", -1, nil)
	if day_begin~=-1 and day_end~=-1 then
		local hrs = level.get_time_hours()
		local de = day_end
		if day_begin>day_end then
			hrs = hrs+24
			de=de+24
		end
		if not (hrs >= day_begin and hrs < de) then
			return false
		end
	end
	return true
end
