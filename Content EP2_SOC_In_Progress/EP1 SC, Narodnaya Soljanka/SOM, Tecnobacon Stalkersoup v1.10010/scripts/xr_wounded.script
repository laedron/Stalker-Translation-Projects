--TB3D 1.0.9.9.8.7 added CTD protection for NIL npc data, dmx135, hit styles, do_not_help
function my_ver() return "1.0.9.9.8.7" end
--------------------------------------------------------------------------------------------------------------------
--  Scheme of the wounded
--  Author: Ruslan Didenko (Stohe)
--  TODO:
----------------------------------------------------------------------------------------------------------------------
local table_sort = table.sort
local math_mod = math.mod
local math_floor = math.floor
local math_random = math.random
local string_find = string.find
local string_sub = string.sub
---------------------------------------------------------------------------------------------------------------------
--Evaluators
----------------------------------------------------------------------------------------------------------------------
class "evaluator_wound" (property_evaluator) 
function evaluator_wound:__init(name, storage) super(nil, name)
    self.a = storage
end

function evaluator_wound:evaluate ()
  local npc=self.object
  if self.a.wounded_set ~= true then return false end
  if not self.a.regen then
    self.a.regen=npc:character_community()=="zombied" or npc:character_community()=="monolith"
  end
  
  -- if self.a.regen and npc.health~=1 then
  local sobj=alife():object(npc:id())
    -- amk.mylog(npc:name().." "..math_floor(npc.health*100).." wounded "..tostring(sobj.wounded))
  -- end
if sobj ~= nil then
  if npc.health>0.95 and self.a.regen and tostring(xr_logic.pstor_retrieve(self.object, "wounded_state")) ~= "nil" then
    sobj.wounded=false
    self.a.wound_manager:hit_callback()
  elseif tostring(xr_logic.pstor_retrieve(self.object, "wounded_state")) == "nil" and sobj.wounded then
  -- amk.mylog("hitcall for "..self.object:name())
    self.a.wound_manager:hit_callback()
  end
 end
  if self.mgr == nil then
    self.mgr = self.object:motivation_action_manager()
  end
  if self.object:critically_wounded() == true then
    return false
  end
  if self.mgr:evaluator(stalker_ids.property_enemy):evaluate() and
     xr_logic.pstor_retrieve(self.object, "wounded_fight") == "true"
  then
    return false
  end
  return tostring(xr_logic.pstor_retrieve(self.object, "wounded_state")) ~= "nil"
end    

class "evaluator_can_fight" (property_evaluator) 
function evaluator_can_fight:__init(name, storage) super(nil, name)
    self.a = storage
end
function evaluator_can_fight:evaluate ()
  if self.object:critically_wounded() == true then
    return true
  end

    return xr_logic.pstor_retrieve(self.object, "wounded_fight") ~= "false"
end    

----------------------------------------------------------------------------------------------------------------------
--Actions
----------------------------------------------------------------------------------------------------------------------
class "action_wounded" (action_base)
function action_wounded:__init(name, storage) super(nil, name)
    self.a = storage
end
function action_wounded:initialize ()
    action_base.initialize (self)
  self.object:set_desired_position()
  self.object:set_desired_direction()
  self.sound = "nil"


  if self.a.help_start_dialog then
    self.object:set_start_dialog(self.a.help_start_dialog)
  end
  if not self.a.regen then
    self.object:wounded(true)
  end

	if (news_main and news_main.on_wound and self.object and self.object.critically_wounded) then
		if (self.object:critically_wounded() == true) then
			news_main.on_wound(self.object)
		else
			news_main.on_wound(self.object)
		end
	end
  
end
function action_wounded:execute ()
    action_base.execute (self)
  wound_manager = self.a.wound_manager
  
  wound_manager_victim = xr_logic.pstor_retrieve(self.object, "wounded_victim")

  local victim = nil  
  if wound_manager_victim == "actor" then
    victim = db.actor
  elseif tostring(wound_manager_victim) == "nil" then
    victim = nil
  else
      victim = alife():story_object(victim)
  end

  if self.object:character_community()~="monolith" and 
	self.object:character_community()~="zombied" then
	self.object:enable_talk()
  else
	self.object:disable_talk()
  end
  wound_manager_state = xr_logic.pstor_retrieve(self.object, "wounded_state")
  wound_manager_sound = xr_logic.pstor_retrieve(self.object, "wounded_sound")

  local synsound = nil
  if wound_manager_state == "true" then
	if TB3D_Modders.wound_hit == true then TB3D_hit_styles.wound(db.actor, self.object, "bip01_spine", 0, 0, self.object:direction()) end
  else
    -- whether the current sound is synchronized to the current state
    for k,v in pairs(self.a.syndata) do
      if v.state == wound_manager_state and
         v.sound == wound_manager_sound
      then
        synsound = wound_manager_sound
		break
      end
    end 
    --' zhranie kits and other shit.
    --' Use only if we can now have a first aid kit.
    if self.a.use_medkit == true then
      wound_manager:eat_medkit()
    end
    
    local emerg = nil
    if wound_manager_state == "psy_shoot" then
      emerg = {animation_nout = true}
    end
    state_mgr.set_state(self.object, wound_manager_state, nil, nil, {look_object = victim}, emerg, synsound)
  end

  if synsound == nil then
    -- need to play background
    if self.sound ~= wound_manager_sound then
      self.sound = wound_manager_sound
      if self.sound == "nil" then
        xr_sound.set_sound(self.object, nil)
      else
        xr_sound.set_sound(self.object, wound_manager_sound)
      end
    end
  else
    -- need to hack to death the background
    if self.sound ~= nil then
      self.sound = "nil"
      xr_sound.set_sound(self.object, nil)
    end
  end
  
  local tt = db.storage[self.object:id()]
  if tt.active_scheme and not self.object:is_talking() then
    if db.actor then
      if xr_logic.try_switch_to_another_section(self.object, tt[tt.active_scheme], db.actor) then
        return
      end
    end
  end
end    
function action_wounded:finalize()
    action_base.finalize (self)
    self.object:disable_talk()
    xr_sound.set_sound(self.object, nil)
    if self.object ~= nil then
    self.object:wounded(false)
  end    
end

----------------------------------------------------------------------------------------------------------------------
-- Class wound_manager
----------------------------------------------------------------------------------------------------------------------
class "Cwound_manager"
function Cwound_manager:__init(npc, storage)
  self.npc = npc
  self.a = storage
  self.can_use_medkit = false
  self.medkit_eaten=nil
end
function Cwound_manager:update()
	--TB3D_Services.info_alert("xr wounded: update")
	local sobj=alife():object(self.npc:id())
	if sobj then
		if sobj.wounded and (not self.a.regen) and (not self.medkit_eaten) then
			hp=1 -- simulating the prevalence rates
		end
	else
		return
	end
	local hp  = 100*self.npc.health
	local psy = 100*self.npc.psy_health
	if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("xr wounded: wound update["..utils.to_str(self.npc:name()).."] PSY["..utils.to_str(psy).."] HP["..utils.to_str(hp).."]") end
	self.state, self.sound = self:process_psy_wound(psy)
	if self.state == "nil" and self.sound == "nil" then						-- check for the usual prevalence rates
		--if string.find(self.npc:name(), "val_escort_captive") or string.find(self.npc:name(), "val_escort_guard") then
			--self.fight = "false"
			--self.cover = "false"
			--self.victim = "nil"
		--else
			self.fight  = self:process_fight(hp)
			self.victim = self:process_victim(hp)
			self.state, self.sound = self:process_hp_wound(hp)
		--end
	else																	-- establish psychiatric prevalence rates
		self.fight = "false"
		self.cover = "false"
		self.victim = "nil"
	end 
	xr_logic.pstor_store(self.npc, "wounded_state", self.state)
	xr_logic.pstor_store(self.npc, "wounded_sound", self.sound)
	xr_logic.pstor_store(self.npc, "wounded_fight", self.fight) 
	xr_logic.pstor_store(self.npc, "wounded_victim", self.victim)
	if self.state==nil then
		self.medkit_eaten=nil
		sobj.wounded=false
	elseif self.state=="nil" then
		self.medkit_eaten=nil
		sobj.wounded=false
		if TB3D_Modders.use_combat_message then
			TB3D_Services.packet_alert("xr wounded: used medkit["..self.npc:name().."] state["..self.state.."] snd["..self.sound.."] fight?["..utils.to_str(self.fight).."] who["..self.victim.."] PSY["..utils.to_str(psy).."] HP["..utils.to_str(hp).."]")
		end	
	else
		sobj.wounded=true
		if TB3D_Modders.use_combat_message then
			TB3D_Services.packet_alert("xr wounded:  is wounded["..self.npc:name().."] state["..self.state.."] snd["..self.sound.."] fight?["..utils.to_str(self.fight).."] who["..self.victim.."] PSY["..utils.to_str(psy).."] HP["..utils.to_str(hp).."]")
		end	
	end
end
function Cwound_manager:unlock_medkit()
  self.can_use_medkit = true
end
function Cwound_manager:eat_medkit()
  if self.can_use_medkit == true then
    local medkit_eaten=false
	local npc_health = self.npc.health
	local medkit_type 
    if self.npc:object("esc_medkit") ~= nil then
      self.npc:eat(self.npc:object("esc_medkit"))
      self.npc.health = 0.3
      medkit_eaten=true
		medkit_type = "medkit"
    elseif self.npc:object("medkit") ~= nil then
      self.npc:eat(self.npc:object("medkit"))
      self.npc.health = 0.3
      medkit_eaten=true
		medkit_type = "medkit"
    elseif self.npc:object("medkit_army") ~= nil then
      self.npc:eat(self.npc:object("medkit_army"))
      self.npc.health = 0.6
      medkit_eaten=true
		medkit_type = "medkit_army"
    elseif self.npc:object("medkit_scientic") ~= nil then
      self.npc:eat(self.npc:object("medkit_scientic"))
      self.npc.health = 1.0
      medkit_eaten=true
		medkit_type = "medkit_scientic"
    elseif self.npc:object("medkit_elite") ~= nil then
      self.npc:eat(self.npc:object("medkit_elite"))
      self.npc.health = 1.0
      medkit_eaten=true
		medkit_type = "medkit_elite"
    end
    if medkit_eaten then
		if TB3D_Modders.use_combat_message then
			TB3D_Services.packet_alert("xr wounded: ["..self.npc:name().."] ate medkit["..utils.to_str(medkit_type).."] health was["..utils.to_str(npc_health).."] health now["..utils.to_str(self.npc.health).."]")
		end	
      local sobj=alife():object(self.npc:id())
      sobj.wounded=false -- let go of the condition of the wounded
      self.medkit_eaten=true
      self.can_use_medkit = false
    end
  end
  self:hit_callback()
end
function Cwound_manager:process_fight(hp)
  local key
  key = self:get_key_from_distance(self.a.hp_fight, hp)
  if key ~= nil then
    if self.a.hp_fight[key].state then
      return tostring(xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_fight[key].state))
    end
  end   
  return "true"
end
function Cwound_manager:process_victim(hp)
  local key
  key = self:get_key_from_distance(self.a.hp_victim, hp)
  if key ~= nil then
    if self.a.hp_victim[key].state then
      return tostring(xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_victim[key].state))
    end
  end   
  return "nil"
end
function Cwound_manager:process_hp_wound(hp)
  local key
  key = self:get_key_from_distance(self.a.hp_state, hp)
  if key ~= nil then
    local r1,r2
    if self.npc:see(db.actor) then
      if self.a.hp_state_see[key].state then
        r1 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_state_see[key].state)
      end
      if self.a.hp_state_see[key].sound then
        r2 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_state_see[key].sound)
      end
    else
      if self.a.hp_state[key].state then
        r1 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_state[key].state)
      end
      if self.a.hp_state[key].sound then
        r2 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_state[key].sound)
      end
    end
    return tostring(r1),tostring(r2)
  end   
  return "nil","nil"
end
function Cwound_manager:process_psy_wound(hp)
  local key
  key = self:get_key_from_distance(self.a.psy_state, hp)
  if key ~= nil then
    local r1,r2
    if self.a.psy_state[key].state then
      r1 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.psy_state[key].state)
    end
    if self.a.psy_state[key].sound then
      r2 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.psy_state[key].sound)
    end
    return tostring(r1),tostring(r2)
  end   
  return "nil","nil"
end
function Cwound_manager:get_key_from_distance(t, hp)
  local key
  for k,v in pairs(t) do
    if v.dist >= hp then 
      key = k 
    else
      return key
    end   
  end
  return key
end
function Cwound_manager:hit_callback()
  if self.npc:alive() == false or self.npc:critically_wounded() == true then
    return
  end
  self:update()
end    

----------------------------------------------------------------------------------------------------------------------
-- binder
----------------------------------------------------------------------------------------------------------------------
function add_to_binder (object, ini, scheme, section, st)
    local operators     = {}
    local properties    = {}
    
    properties["wounded"]   =   xr_evaluators_id.sidor_wounded_base
    properties["can_fight"]     =   xr_evaluators_id.sidor_wounded_base + 1

    operators["wounded"]        =   xr_actions_id.sidor_act_wounded_base + 0
    
    
    local manager = object:motivation_action_manager ()
    manager:add_evaluator (properties["wounded"],   this.evaluator_wound("wounded", st))
    manager:add_evaluator (properties["can_fight"],     this.evaluator_can_fight("can_fight", st))

    local action = this.action_wounded("wounded_action", st)
    action:add_precondition (world_property(stalker_ids.property_alive,   true))
    action:add_precondition (world_property(properties["wounded"],      true))
    action:add_effect (world_property(properties["wounded"],        false))
    action:add_effect (world_property(stalker_ids.property_enemy, false))
    action:add_effect (world_property(properties["can_fight"],    true))
    manager:add_action      (operators["wounded"], action)
   
    action = manager:action (xr_actions_id.alife)
    action:add_precondition (world_property(properties["wounded"],      false))

    action = manager:action (stalker_ids.action_gather_items)
    action:add_precondition (world_property(properties["wounded"],      false))
    
    action = manager:action (stalker_ids.action_combat_planner)
    action:add_precondition (world_property(properties["can_fight"],       true))

    action = manager:action (stalker_ids.action_danger_planner)
    action:add_precondition (world_property(properties["can_fight"],       true))
    
    action = manager:action (stalker_ids.action_anomaly_planner)
    action:add_precondition (world_property(properties["can_fight"],       true))

end


------------
-- Invoked only at the beginning of the reading of logic, Action Games creates, produces and evaluatory
-- initial configuration.
function set_wounded(npc, ini, scheme, section)
  local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
  st.wound_manager = Cwound_manager(npc, st)
end
-- Called to switch to the new section. Performs subtraction settings from the current section.
function reset_wounded(npc, scheme, st, section)
  local wounded_section
  if scheme == nil or scheme == "nil" then
    wounded_section = utils.cfg_get_string(st.ini, st.section_logic, "wounded", npc, false, "")
  else
    wounded_section = utils.cfg_get_string(st.ini, section, "wounded", npc, false, "")
  end
  if st.wounded then
	init_wounded(npc, st.ini, wounded_section, st.wounded, scheme)
		st.wounded.wound_manager:hit_callback()
	end
end
-- Function to read the settings. It passed the section where they need to be read.
local wounded_by_state = {
  [0] = "wounded_heavy",
  [1] = "wounded_heavy_2",
  [2] = "wounded_heavy_3"
}

function init_wounded(npc, ini, section, st, scheme)
  --TB3D_Services.info_alert("xr WOUNDED: npc["..utils.to_str(npc:name()).."]")
	local stdb = {}
	local st_scheme = scheme
	if not st_scheme then st_scheme = "wounded" end
	if st then
		stdb = st
		if tostring(section) == stdb.wounded_section and tostring(section) ~= "nil" then return end
		--stdb.wounded_section = utils.tostring(section)
	else
  --TB3D_Services.info_alert("xr WOUNDED: npc["..utils.to_str(npc:name()).."] st = nil")
	return
		--stdb = db.storage[npc:id()][st_scheme]
		--if not stdb then return end 
		--section = "nil"
	end
  
  stdb.wounded_section = utils.to_str(section)
  
  local def = {}  
  local npc_community = npc:character_community()
  if npc_community == "monolith" then
    local state = wounded_by_state[math_mod(npc:id(), 3)]
    def.hp_state      = "50|"..state.."@nil"
    def.hp_state_see    = "50|"..state.."@nil"
    def.psy_state     = ""
    def.hp_victim     = "50|nil"
    def.hp_cover      = "50|false"
    def.hp_fight      = "50|false"
    def.syndata       = ""
    def.help_dialog     = nil
    def.help_start_dialog = nil
    def.use_medkit      = false
  --TB3D_Services.info_alert("xr WOUNDED: npc["..utils.to_str(npc:name()).."] monolith")
    
  elseif npc_community == "zombied" then
    def.hp_state      = "50|wounded_zombie@nil"
    def.hp_state_see    = "50|wounded_zombie@nil"
    def.psy_state     = ""
    def.hp_victim     = "50|nil"
    def.hp_cover      = "50|false"
    def.hp_fight      = "50|false"
    def.syndata       = ""
    def.help_dialog     = nil
    def.help_start_dialog = nil
    def.use_medkit      = false
  --TB3D_Services.info_alert("xr WOUNDED: npc["..utils.to_str(npc:name()).."] zombied")
    
  else
    local state = wounded_by_state[math_mod(npc:id(), 3)]
    def.hp_state      = "10|"..state.."@help_heavy"
    def.hp_state_see    = "10|"..state.."@help_heavy"
    def.psy_state     = "50|{=best_pistol}psy_armed,psy_pain@wounded_psy|20|{=best_pistol}psy_shoot,psy_pain@{=best_pistol}wounded_psy_shoot,wounded_psy"
    def.hp_victim     = "10|nil"
    def.hp_cover      = "10|false"
    def.hp_fight      = "10|false"
    def.syndata       = ""
    def.help_dialog     = "dm_help_wounded_medkit_dialog"
    def.help_start_dialog = nil
    def.use_medkit      = true
  --TB3D_Services.info_alert("xr WOUNDED: npc["..utils.to_str(npc:name()).."] default")
  end   


  if tostring(section) == "nil" then
    -- Load the defaults!
    stdb.hp_state   = xr_meet.parse_data(npc, def.hp_state)
    stdb.hp_state_see = xr_meet.parse_data(npc, def.hp_state_see)
    stdb.psy_state  = xr_meet.parse_data(npc, def.psy_state)
    stdb.hp_victim  = xr_meet.parse_data(npc, def.hp_victim)
    stdb.hp_cover   = xr_meet.parse_data(npc, def.hp_cover)
    stdb.hp_fight   = xr_meet.parse_data(npc, def.hp_fight)
    stdb.syndata    = xr_meet.parse_syn_data(npc, def.syndata)
    stdb.help_dialog  = def.help_dialog
    stdb.help_start_dialog = nil
    stdb.use_medkit   = def.use_medkit
  --TB3D_Services.info_alert("xr WOUNDED: npc["..utils.to_str(npc:name()).."] section = nil")
  else
    stdb.hp_state   = xr_meet.parse_data(npc, utils.cfg_get_string(ini, section, "hp_state", npc, false, "", def.hp_state))
    stdb.hp_state_see = xr_meet.parse_data(npc, utils.cfg_get_string(ini, section, "hp_state_see", npc, false, "", def.hp_state_see))
    stdb.psy_state  = xr_meet.parse_data(npc, utils.cfg_get_string(ini, section, "psy_state", npc, false, "", def.psy_state))
    stdb.hp_victim  = xr_meet.parse_data(npc, utils.cfg_get_string(ini, section, "hp_victim", npc, false, "", def.hp_victim))
    stdb.hp_cover   = xr_meet.parse_data(npc, utils.cfg_get_string(ini, section, "hp_cover", npc, false, "", def.hp_cover))
    stdb.hp_fight   = xr_meet.parse_data(npc, utils.cfg_get_string(ini, section, "hp_fight", npc, false, "", def.hp_fight))
    stdb.syndata    = xr_meet.parse_syn_data(npc, utils.cfg_get_string(ini, section, "syndata", npc, false, "", def.syndata)) 
    stdb.help_dialog  = utils.cfg_get_string(ini, section, "help_dialog", npc, false, "", def.help_dialog)
    stdb.help_start_dialog = utils.cfg_get_string(ini, section, "help_start_dialog", npc, false, "", nil)
    stdb.use_medkit   = utils.cfg_get_bool(ini, section, "use_medkit", npc, false, def.use_medkit)
  --TB3D_Services.info_alert("xr WOUNDED: npc["..utils.to_str(npc:name()).."] section["..utils.to_str(section).."]")
  end
  
  -- check that the function to be called at least once
  --if npc:name() ~= "prip_dok_arh" then
  stdb.wounded_set = true
  --end
  st = stdb
  stdb = nil
end

function unlock_medkit(npc)
  if npc ~= nil and db.storage[npc:id()] ~= nil then
	  if db.storage[npc:id()].wounded ~= nil then
		db.storage[npc:id()].wounded.wound_manager:unlock_medkit()
	  end
	end
end



function is_wounded(npc)
--TB3D_Services.packet_alert("xr wounded: is wounded["..utils.to_str(npc:name()).."]")
	if npc ~= nil and db.storage[npc:id()] ~= nil and db.storage[npc:id()].wounded ~= nil then
		if npc:name() == "prip_dok_arh" then
			db.storage[npc:id()].wounded.wound_manager.state = "nil"
		else
			return tostring(db.storage[npc:id()].wounded.wound_manager.state) ~= "nil"
		end
	end
	return false
end

function hit_callback(npc_id)
  if npc_id ~= nil and db.storage[npc_id] ~= nil then
     if db.storage[npc_id].wounded ~= nil then
        db.storage[npc_id].wounded.wound_manager:hit_callback()
		return true
     end
  end
  return false
end


function is_heavy_wounded_by_id(npc_id)
  if npc_id ~= nil and db.storage[npc_id] ~= nil then
	  if db.storage[npc_id].wounded ~= nil then
		return tostring(db.storage[npc_id].wounded.wound_manager.state) ~= "nil"
	  end
  end
  return false
end
function is_psy_wounded_by_id(npc_id)
  if npc_id ~= nil and db.storage[npc_id] ~= nil then
	  if db.storage[npc_id].wounded ~= nil then
		return db.storage[npc_id].wounded.wound_manager.state == "psy_pain" or
			 db.storage[npc_id].wounded.wound_manager.state == "psy_armed" or
			 db.storage[npc_id].wounded.wound_manager.state == "psy_shoot" or
			 db.storage[npc_id].wounded.wound_manager.state == "psycho_pain" or
			 db.storage[npc_id].wounded.wound_manager.state == "psycho_shoot"   
	  end
	end
  return false
end

local do_not_help = {
	["esc_vagon_wounded"] = true,
	["val_escort_bandit_halfdead"] = true,
	["prip_dok_arh"] = true,
	["gar_wounded_bandit"] = true
}
-- Help the wounded
function help_wounded(npc)
local snd
	if do_not_help[npc:name()] then return end		--109987
	--if npc:name()=="esc_vagon_wounded" or npc:name()=="val_escort_bandit_halfdead" or npc:name() == "prip_dok_arh" then return end
	snd = xr_sound.get_safe_sound_object("characters_voice\\human_01\\newbie\\help\\wounded_thanx\\thanx_"..math_random(1,3))
	snd:play_no_feedback(npc, sound_object.s3d, 0, npc:position(), 1.0)

	--amk.start_timer("healing_enemies",math_random(20,30),amk.pack_array_to_string( {npc:id(), npc:character_community()} ))
	amk.start_timer("healing_enemies",math_random(20,30), {npc:id(), npc:character_community()} )
	TB3D_Services.set_community(npc, "stalker", 0, 0)
	--npc:set_character_community("stalker", 0, 0)
	npc:set_relation(game_object.friend, db.actor)
end
	local smarts = {
		l01_escape = {
			esc2_most = {0,1},
			esc2_bandit_les = {0,1},
			esc2_smart_stalker_exit = {0,1},
			esc_farm_lager = {0,1},
			esc2_st_fox_place = {0,1}
		},
		l02_garbage = {
			gar_smart_graveyard = {0,1},
			gar_smart_garage = {0,1},
			gar_smart_bandit3 = {0,1},
			gar_smart_stalkers_1 = {0,1}
		},
		l03_agroprom = {
			agr2_st_factory = {0,1}
		},
		l03u_agr_underground = {
			agr2_st_factory = {0,1}
		},
		l04_darkvalley = {
			val_smart_bandit_1 = {0,3}
		},
		l04u_labx18 = {
			val_smart_bandit_1 = {0,1}
		},
		l06_rostok = {
			ros_smart_stalker1 = {1,2},
			ros_smart_stalker3 = {1,2},
			ros_smart_stalker_bandits1 = {1,2}
		},
		l07_military = {
			mil_smart_dolg_kamp = {2,3},
			mil_lager = {2,3}
		},
		l08_yantar = {
			yan_st_stalker2 = {1,2}
		},
		l10_radar = {
			rad2_loner_0000 = {2,3},
			rad2_loner_0001 = {2,3},
			rad2_loner_0002 = {2,3}
		},
		l11_pripyat = {
			pri_smart_neutral_stalker1 = {3,3},
			pri_stadium_help = {3,3}
		},
		marsh = {
			stalker_green1 = {0,1,2,3},
			stalker_green2 = {0,1,2,3},
			kalmyak_marsh = {0,1,2,3}
		}
	}
	
local smarts_avail = {}
--local smarts_other = {}
local wound_id
function custom_change(npc)
	local obj = alife():object(npc:id())
	local packet_wounded = amk.read_stalker_params(obj)
	local level = level.name()
	local obj_rank = get_npc_rank(npc)
	local smarts_rank_min 
	local smarts_rank_max
	local smart
	if level and smarts[level] then
		for k,v in pairs(smarts) do
			for kk,vv in pairs(smarts[k]) do
				smarts_rank_min = vv[1] 
				smarts_rank_max = vv[2]	
				if obj_rank and obj_rank >= smarts_rank_min and obj_rank <= smarts_rank_max then
					smart = alife():object(kk)
					if smart and smart:is_gulag_available() and smart.gulag_working then
						if string_find(level,string_sub(kk,1,3)) then
							table.insert(smarts_avail,smart)
						--else
							--table.insert(smarts_other,smart)
						end
					end
				end		
			end
		end
	end	
	wound_id = npc:id()
	if smarts_avail and npc:alive() then 
		if #smarts_avail > 1 then
			table_sort(smarts_avail,max_comp)
		end
		if #smarts_avail > 0 then
			packet_wounded.custom = "[smart_terrains]\n"..smarts_avail[1]:name().." = true"
			packet_wounded.health = 1
			packet_wounded.updhealth = 1
			amk.write_stalker_params(packet_wounded,obj)
		end
	--elseif smarts_other then 
	--	if table.getn(smarts_other) > 1 then
	--		table_sort(smarts_other,max_comp)
	--	end
	--	if table.getn(smarts_other) > 0 then
	--		packet_wounded.custom = "[smart_terrains]\n"..smarts_other[1]:name().." = true"
	--		amk.write_stalker_params(packet_wounded,obj)
	--	end
	end
	local unreg_id = obj:smart_terrain_id()    
	if unreg_id ~= expendable_object and npc:alive() then      
		local unreg = alife():object(unreg_id)
		if unreg then        
			if TB3D_Modders.use_scheme_message then
				TB3D_Services.packet_alert("xr_wounded: custom change id name["..utils.to_str(unreg:name()).."] unregistered["..utils.to_str(obj:name()).."]")
			end
			unreg:unregister_npc(obj) 
		end  
	end
end

function get_npc_rank(obj)
	local sobj = alife():object(obj:id())
	if sobj and sobj.rank and sobj:rank()  then
		return math_floor(sobj:rank()/290)
	end
	return nil
end

function max_comp(i1,i2) -- returns true if i1 is less than i2
	if wound_id then
		local sobj = alife():object(wound_id)
		if sobj then
			local sobj_pos = sobj.position
			return i1.position:distance_to(sobj_pos) < i2.position:distance_to(sobj_pos)
		end
	end
	return nil
end
