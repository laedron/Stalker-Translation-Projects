--TB3D 1.0.9.9.8.0 ctd protection, get sound object - megafone chatter, debug, protection, debug
function my_ver() return "1.0.9.9.8.0" end
-------------------------------------------------------------------------------------------------------------------
--	Scheme of Voice
--	Author: Ruslan Didenko  (Stohe)
--	update: Chugai Alexander (Chugai)
----------------------------------------------------------------------------------------------------------------------
local string_find = string.find

key_by_id = {}
group_idle = {}

function get_sound(path, tt, npc)
	if path == nil then return nil end
	if path.exec == nil then
		-- Read the theme options
		tt.into_id = path.into_id
		tt.into_max = path.max_ids[npc:id()].into_max
		tt.into_last = nil
		tt.rnd_id = path.rnd_id
		tt.rnd_max = path.max_ids[npc:id()].rnd_max
		tt.rnd_last = nil
		tt.min_snd = path.min_snd
		tt.max_snd = path.max_snd
		tt.rnd_snd = path.rnd_snd
	else
		get_sound(path.types[path.exec(path.types, npc)], tt, npc)
	end
end

-- Forming a key character
function get_key(npc)
	local key
	-- formation of key
	local overrides = xr_logic.generic_scheme_overrides(npc)
	if overrides and
	   overrides.soundgroup 
	then
		key = overrides.soundgroup
	else
		key = utils.to_str(npc:id())
	end
	-- update the tables:) can not be changed!
	if key_by_id[npc:id()] ~= key then
		if group_idle[key_by_id[npc:id()]] ~= nil	then
		   group_idle[key_by_id[npc:id()]].num_in_group = group_idle[key_by_id[npc:id()]].num_in_group - 1
		end
		key_by_id[npc:id()] = key
		if group_idle[key] == nil then
			group_idle[key] = {num_in_group = 1}
		else
			group_idle[key].num_in_group = group_idle[key].num_in_group + 1
		end
	end
	return key
end
	
-----------------------------------------------------------------------------------------------------------------------------------
--	Installing and rasparsivanie those files to.
-----------------------------------------------------------------------------------------------------------------------------------
function set_sound(npc, sound, now, into_timeout)
	if _g.is_disconnecting == false then
		local is_report = false
		if TB3D_Modders.use_sound_message or (TB3D_Modders.use_state_message and npc:name() == TB3D_Modders.npc_to_log) then is_report = true end
		--if is_report then TB3D_Services.packet_alert("xr_sound: set sound["..utils.to_str(npc:name()).."] set sound["..utils.to_str(sound).."]") end
		local npc_id = npc:id()
		if npc_id then
			if sound == nil then sound = "" end					--used to stop sound that is playing
			if now == true or db.sound[npc_id] == nil or db.sound[npc_id].theme ~= sound then
				if db.sound[npc_id] == nil then
					if is_report then
						TB3D_Services.packet_alert("xr sound: set_sound["..utils.to_str(sound).."] for["..npc:name().."] adding to database")
					end
					db.create_sound(npc)
				end
				db.sound[npc_id].theme = sound
				db.sound[npc_id].snd = parse_names(sound)
				--if is_report then TB3D_Services.packet_alert("xr sound: set_sound["..utils.to_str(db.sound[npc_id].snd).."] for["..npc:name().."] = theme["..utils.to_str(db.sound[npc_id].theme).."]") end
				if db.sound[npc_id].last_snd == nil then
					db.sound[npc_id].last_snd = {}
				else	
					local snd_table = {}
					local t = 0		
					for k,v in pairs(db.sound[npc_id].snd) do
						snd_table[t] = {}
						get_sound(sound_theme.theme[v], snd_table[t], npc)
						t = t + 1
					end	
					for k,v in pairs(snd_table) do
						if v.into_id then db.sound[npc_id].last_snd[v.into_id] = nil end
						if v.rnd_id then db.sound[npc_id].last_snd[v.rnd_id] = nil end
					end	
				end
				local key = get_key(npc)		-- Set the input a pause
				group_idle[key].begin = time_global()
				if into_timeout then
					group_idle[key].idle = into_timeout
				else
					group_idle[key].idle = 0
				end
				if now == true then
					stop_play_sound(npc)
				end
			elseif is_report then
				if now == true then
					TB3D_Services.packet_alert("xr_sound: ["..utils.to_str(npc:name()).."] set sound["..utils.to_str(sound).."] [not now]")
				else
					TB3D_Services.packet_alert("xr_sound: ["..utils.to_str(npc:name()).."] set sound["..utils.to_str(sound).."] [already playing]")
				end
			end
		end
	end
end

function set_sound_play(npc, sound, timeout)
	if _g.is_disconnecting == false then
		local is_report = false
		if TB3D_Modders.use_sound_message or (TB3D_Modders.use_state_message and npc:name() == TB3D_Modders.npc_to_log) then is_report = true end
		if TB3D_Services.is_collector(300) == true then
			if string_find(sound,"pri_followers_")		--running the quantlet
			  or string_find(sound,"pri_wave")
			  or string_find(sound,"aes_battle")
			  or string_find(sound,"sar_monolith")
			  or string_find(sound,"kruglov_help")
			  or string_find(sound,"volkodav_")
			  --or string_find(sound,"radio_voice_")
			  or string_find(sound,"volkodav_radio_see_enemy")
			  or string_find(sound,"sniper_radio_see_enemy") then
				if is_report then TB3D_Services.packet_alert("xr sound: set_sound_play["..utils.to_str(sound).."] for["..npc:name().."] skipped") end
				return
			end
		end
		if is_report then
			TB3D_Services.packet_alert("xr sound: set_sound_play["..utils.to_str(sound).."] for["..npc:name().."] timeout["..utils.to_str(timeout).."]")
		end
		local npc_id = npc:id()
		if db.sound[npc_id] == nil then db.create_sound(npc) end --db.sound[npc_id] = {} end
		if db.sound[npc_id].last_snd == nil then
			db.sound[npc_id].last_snd = {}
		end
		stop_play_sound(npc)
		this.play_sound(npc, parse_names(sound), timeout)
	end
end

function update(npc)
	if npc:active_sound_count() ~= 0 then return end
	local key = get_key(npc)
	local npc_id = npc:id()
	--' If you set a theme, then you need to play it.
	--' If not specified, then you need to play idle, provided that we have no enemies and denzherov.
	if db.sound[npc_id] ~= nil and db.sound[npc_id].snd == nil then
		return 
	end	
	local group_table = group_idle[key]		
	if group_table == nil then
		return
	end
	if group_table.busy == true then
		if group_table.last_npc ~= npc_id then
			return
		end
		if npc:active_sound_count() == 0 then
			group_table.busy = false
		end
	end
	if group_table.num_in_group > 1 and
	   group_table.last_npc == npc_id then
		return
	end
	if table.getn(db.sound[npc_id].snd) == 0 then
		return
	end
--	printf("EE: group = %s begin = %s idle = %s", tostring(key), tostring(group_table.begin), tostring(group_table.idle))
	if group_table.begin == nil or
	   time_global() - group_table.begin >= group_table.idle
	then
		this.play_sound(npc, db.sound[npc_id].snd)
		if group_table.idle == nil then
			group_table.idle = 0
		end
		group_table.busy = true
		group_table.begin = time_global()
		group_table.last_npc = npc_id
	end
end


function play_sound(npc, themes, timeout)
	local is_report = false
	if TB3D_Modders.use_sound_message or (TB3D_Modders.use_state_message and npc:name() == TB3D_Modders.npc_to_log) then is_report = true end
	--if is_report then TB3D_Services.packet_alert("xr_sound: play sound for["..utils.to_str(npc:name()).."]") end
	-- need to compile a list of those
	local snd_table = {}
	local t = 0		
	for k,v in pairs(themes) do
		snd_table[t] = {}
		if sound_theme.theme[v] ~= nil then
			snd_table[t].theme = v
			get_sound(sound_theme.theme[v], snd_table[t], npc)
		else
			if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("ERROR: ILLEGAL PLAY SOUND!!! ["..v.."] for["..npc:name().."]") end
		end
		t = t + 1
	end	
	--printf("*")
	--print_table(snd_table)
	if t == 0 then return end
	-- from the list to choose one.
	local snd = snd_table[math.random(0, t-1)]
	if snd ~= nil then
		--printf("!")
		--print_table(snd)
		if snd.min_snd == nil then return end
		local npc_id = npc:id()
		local group_table = group_idle[get_key(npc)]
		group_table.idle = math.random(snd.min_snd, snd.max_snd)*1000
		if group_table.last_snd	== nil then
			group_table.last_snd = {}
		end
		-- whether you want us to play into sounds or rnd
		if snd.into_max ~= nil and
			snd.into_max > 0
		then
			if db.sound[npc_id].last_snd[snd.into_id] == snd.into_max - 1 then
				if snd.into_cycled == true then
					db.sound[npc_id].last_snd[snd.into_id] = nil 
				else
					return
				end
			end
			-- play the input
			if db.sound[npc_id].last_snd[snd.into_id] == nil then db.sound[npc_id].last_snd[snd.into_id] = -1 end
			if is_report then TB3D_Services.packet_alert("xr_sound: play seq["..utils.to_str(db.sound[npc_id].last_snd[snd.into_id]+1).."] for["..npc:name().."]") end
			process_tutor_on_sound(snd.theme)
			npc:play_sound(snd.into_id, 1, 0, 1, 0, db.sound[npc_id].last_snd[snd.into_id]+1)
			db.sound[npc_id].last_snd[snd.into_id] = db.sound[npc_id].last_snd[snd.into_id] + 1
			if is_report then TB3D_Services.packet_alert("xr_sound: play seq["..utils.to_str(db.sound[npc_id].last_snd[snd.into_id]).."] for["..npc:name().."]") end
			return
		end		
		if snd.rnd_max ~= nil and snd.rnd_max > 0 then
			-- playing randomly
			local s = 0
			if snd.rnd_max == 1 then
				s = 0
			else
				-- If last time was played the same set of themes
				-- then consider the last sound for the group.
--				if db.sound[npc_id].last_snd[snd.rnd_id] ~= nil then
				if group_table.last_snd[snd.rnd_id] ~= nil then
					s = math.random(0, snd.rnd_max-2)
					if s >= group_table.last_snd[snd.rnd_id] then s = s + 1 end
				else
					s = math.random(0, snd.rnd_max-1)					
				end	
			end			
			if timeout == nil then
				timeout = 0
			end							
			if is_report then TB3D_Services.packet_alert("xr_sound: play rnd["..utils.to_str(s).."] for["..npc:name().."]") end
			process_tutor_on_sound(snd.theme)
			npc:play_sound(snd.rnd_id, timeout+1, timeout, 1, 0, s)
			--db.sound[npc_id].last_snd[snd.rnd_id] = s
			group_table.last_snd[snd.rnd_id] = s
		end		
	end			
end

function get_last_IDS(npc, theme)
	local last_table = db.sound[npc:id()].last_snd
	local snd_table = {}
	if sound_theme.theme[theme] ~= nil then
		get_sound(sound_theme.theme[theme], snd_table, npc)
	end	
	--printf("LAST INTO ID for [%s] = [%s], max [%s]", theme, last_table[snd_table.into_id], snd_table.into_max)
	return last_table[snd_table.into_id], snd_table.into_max
end


function load_sound(npc)
	sound_theme.load_sound(npc)
end

function process_tutor_on_sound(theme)
end


--' Actor sound player
local actor_sound = {}
function set_actor_sound(sound)
	--printf("*ACTOR SND* try to change SND to [%s]", tostring(sound))
	if actor_sound.theme ~= sound then
		--' Tutochki must parse the names of those in their id
		if sound == nil then sound = "" end		
		actor_sound.theme = sound
		actor_sound.begin = nil
		this.set_actor_sound_factor(1)
	end
end

function set_actor_sound_factor(factor)
	local theme = sound_theme.actor_theme[actor_sound.theme]
	if theme ~= nil then
		actor_sound.min_snd = theme.min_snd * factor
		actor_sound.max_snd = theme.max_snd * factor
	end
end

function update_actor()								--only level_border_detector from xr_detector
	local theme = sound_theme.actor_theme[actor_sound.theme]
	if theme and table.getn(theme.sounds) ~= 0 then
		if actor_sound.begin == nil or time_global() - actor_sound.begin >= actor_sound.idle then
			actor_sound.begin = time_global()
			--' You've got to play sound
			local sound = theme.sounds[math.random(table.getn(theme.sounds))]
			if sound ~= nil then
				sound:play(db.actor, 0, sound_object.s2d)
			end
			actor_sound.idle = math.random(actor_sound.min_snd, actor_sound.max_snd)
		end
	end
end

--' Table created for storing sound objects.
sound_object_by_theme = {}
--' type = [random|seq|looped]
function get_sound_object(theme, t_type)
	if sound_theme.ph_snd_themes[theme] == nil then
		if TB3D_Modders.use_sound_message then TB3D_Services.info_alert("xr sound: get sound object["..Utils.to_str(theme).."] not in themes") end
		return
	end
	if sound_object_by_theme[theme] == nil then
		sound_object_by_theme[theme] = {}
	end
	if t_type == nil then
		t_type = "random"
	end
	--' Select the next aydishnika
	local play_id = -1
	local table_size = table.getn(sound_theme.ph_snd_themes[theme])
	if sound_object_by_theme[theme].last_id == nil then
		if t_type == "random" then
			if table_size >= 2 then
				play_id = math.random(1, table_size)
			else
				play_id = 1
			end
		else
			play_id = 1
		end
	else
		if t_type == "random" then
			if table_size >= 2 then
				play_id = math.random(1, table_size - 1)
				if play_id >= sound_object_by_theme[theme].last_id then play_id = play_id + 1 end
			else
				play_id = 1
			end
		else
			if sound_object_by_theme[theme].last_id < table_size then
				play_id = sound_object_by_theme[theme].last_id + 1
			else
				if t_type == "looped" then
					play_id = 1
				end
			end
		end		
	end
	--printf("SOUND_OBJECT: selected id [%s] for theme [%s], type [%s], size [%s]", tostring(play_id), tostring(theme), tostring(type), table_size)
	if play_id == -1 then
		return
	end
	--' Check whether we have created an appropriate sound obzhekt or need to create
	if sound_object_by_theme[theme][play_id] == nil then
		if type(sound_theme.ph_snd_themes[theme][play_id]) == "table" then
			sound_object_by_theme[theme][play_id.."_r"] = get_safe_sound_object(sound_theme.ph_snd_themes[theme][play_id][1].."_r")
			sound_object_by_theme[theme][play_id.."_l"] = get_safe_sound_object(sound_theme.ph_snd_themes[theme][play_id][1].."_l")
		else
			sound_object_by_theme[theme][play_id] = get_safe_sound_object(sound_theme.ph_snd_themes[theme][play_id])
		end
	end
	sound_object_by_theme[theme].last_id = play_id
	--' Return the sound obzhekt
	if amk.load_variable("option_megafone", 1) < 1 then
		if theme == "dolg_matugalnik" then
			--TB3D_Services.info_alert("xr sound: get sound object["..Utils.to_str(theme).."]["..Utils.to_str(play_id).."] bar chatter skipped")
			sound_object_by_theme[theme][play_id] = get_safe_sound_object(sound_theme.ph_snd_themes["x16_hum_2"][1])
			return sound_object_by_theme[theme][play_id]                               
		elseif theme == "dolg_speech" then
			--TB3D_Services.info_alert("xr sound: get sound object["..Utils.to_str(theme).."]["..Utils.to_str(play_id).."] dolg chatter skipped")
			sound_object_by_theme[theme][play_id] = get_safe_sound_object(sound_theme.ph_snd_themes["cop_pripyat_base_snd"][play_id])
			return sound_object_by_theme[theme][play_id]                               
		end
	end
	if type(sound_theme.ph_snd_themes[theme][play_id]) == "table" then
		return sound_object_by_theme[theme][play_id.."_r"], sound_object_by_theme[theme][play_id.."_l"]
	else
		return sound_object_by_theme[theme][play_id]
	end
end

local sound_object_by_path = {}
--' Wrapper function that returns the sound object.
function get_safe_sound_object(path)
	if sound_object_by_path[path] == nil then
		sound_object_by_path[path] = sound_object(path)
	end
	return sound_object_by_path[path]
end

function stop_all_sound_object()
	for k,v in pairs(sound_object_by_path) do
		if v:playing() then
			v:stop()
		end
	end
end
function clear_all_sound_object()		--called from -g.script
	sound_object_by_theme = {}
end
