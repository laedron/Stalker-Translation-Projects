--TB3D 1.0.9.9.7.4, always 0 on no actor 
function my_ver() return "1.0.9.9.7.4" end
local t = {}

function load_job(sj, gname, type, squad, groups)	
	-- MILITARY Gulag on the mound
	if type == "amk_embankment" then
		t = { section = "logic@amk_embankment_soldier1",
			idle = 0,
			prior = 10, state = {0},
			in_rest = "", out_rest = "amk_embankment_restrictor"
		}
		table.insert(sj, t)
		t = { section = "logic@amk_embankment_soldier2",
			idle = 0,
			prior = 10, state = {0},
			in_rest = "", out_rest = "amk_embankment_restrictor"
		}
		table.insert(sj, t)
		t = { section = "logic@amk_embankment_soldier3",
			idle = 0,
			prior = 5, state = {0},
			in_rest = "", out_rest = "amk_embankment_restrictor"
		}
		table.insert(sj, t)
		t = { section = "logic@amk_embankment_soldier4",
			idle = 0,
			prior = 5, state = {0},
			in_rest = "", out_rest = "amk_embankment_restrictor"
		}
		table.insert(sj, t)
		t = { section = "logic@amk_embankment_soldier5",
			idle = 0,
			prior = 15, state = {0, 1},
			in_rest = "", out_rest = "amk_embankment_restrictor"
		}
		table.insert(sj, t)
		t = { section = "logic@amk_embankment_sleeper1",
			idle = 0,
			prior = 10, state = {1},
			in_rest = "", out_rest = "escape_bridge_zone"
		}
		table.insert(sj, t)
		t = { section = "logic@amk_embankment_sleeper2",
			idle = 0,
			prior = 10, state = {1},
			in_rest = "", out_rest = "escape_bridge_zone"
		}
		table.insert(sj, t)
		t = { section = "logic@amk_embankment_sleeper3",
			idle = 0,
			prior = 10, state = {1},
			in_rest = "", out_rest = "escape_bridge_zone"
		}
		table.insert(sj, t)
		t = { section = "logic@amk_embankment_sleeper4",
			idle = 0,
			prior = 10, state = {1},
			in_rest = "", out_rest = "escape_bridge_zone"
		}
		table.insert(sj, t)
	end
	-- Gulag minibar Dump
	if type == "amk_mini_bar" then
		t = { section = "logic@amk_mini_bar_kulinar",
			idle = 0,
			prior = 25, state = {0, 1},
			in_rest = "", out_rest = "amk_mini_bar_restrictor",
			predicate = function(obj_info)
        					return obj_info and obj_info.profile_name == "amk_artem_kulinar"
						end
		}
		table.insert(sj, t)
		t = { section = "logic@amk_mini_bar_voron",
			idle = 0,
			prior = 25, state = {0, 1},
			in_rest = "", out_rest = "amk_mini_bar_restrictor",
			predicate = function(obj_info)
        					return obj_info and obj_info.profile_name == "amk_vitek_voron"
						end
		}
		table.insert(sj, t)
		t = { section = "logic@amk_mini_bar_stalker1",
			idle = 0,
			prior = 5, state = {0, 1},
			in_rest = "", out_rest = "amk_mini_bar_restrictor"
		}
		table.insert(sj, t)
		t = { section = "logic@amk_mini_bar_stalker2",
			idle = 0,
			prior = 15, state = {0, 1},
			in_rest = "", out_rest = "amk_mini_bar_restrictor"
		}
		table.insert(sj, t)
		t = { section = "logic@amk_mini_bar_stalker3",
			idle = 0,
			prior = 15, state = {0, 1},
			in_rest = "", out_rest = "amk_mini_bar_restrictor"
		}
		table.insert(sj, t)
		t = { section = "logic@amk_mini_bar_stalker4",
			idle = 0,
			prior = 5, state = {0, 1},
			in_rest = "", out_rest = "amk_mini_bar_restrictor"
		}
		table.insert(sj, t)
		t = { section = "logic@amk_mini_bar_stalker5",
			idle = 0,
			prior = 15, state = {0, 1},
			in_rest = "", out_rest = "amk_mini_bar_restrictor"
		}
		table.insert(sj, t)
		t = { section = "logic@amk_mini_bar_stalker6",
			idle = 0,
			prior = 5, state = {0, 1},
			in_rest = "", out_rest = "amk_mini_bar_restrictor"
		}
		table.insert(sj, t)
		t = { section = "logic@amk_mini_bar_stalker7",
			idle = 0,
			prior = 5, state = {0, 1},
			in_rest = "", out_rest = "amk_mini_bar_restrictor"
		}
		table.insert(sj, t)
		t = { section = "logic@amk_mini_bar_stalker8",
			idle = 0,
			prior = 10, state = {0, 1},
			in_rest = "", out_rest = "amk_mini_bar_restrictor"
		}
		table.insert(sj, t)
		t = { section = "logic@amk_mini_bar_stalker9",
			idle = 0,
			prior = 20, state = {0, 1},
			in_rest = "", out_rest = "amk_mini_bar_restrictor"
		}
		table.insert(sj, t)
		t = { section = "logic@amk_mini_bar_stalker10",
			idle = 0,
			prior = 20, state = {0, 1},
			in_rest = "", out_rest = "amk_mini_bar_restrictor"
		}
		table.insert(sj, t)
		t = { section = "logic@amk_mini_bar_stalker11",
			idle = 0,
			prior = 20, state = {0, 1},
			in_rest = "", out_rest = "amk_mini_bar_restrictor"
		}
		table.insert(sj, t)
		t = { section = "logic@amk_mini_bar_stalker1_kamp",
			idle = 0,
			prior = 10, state = {0, 1},
			in_rest = "", out_rest = "amk_mini_bar_restrictor"
		}
		table.insert(sj, t)		
		t = { section = "logic@amk_mini_bar_stalker1_kamp",
			idle = 0,
			prior = 10, state = {0, 1},
			in_rest = "", out_rest = "amk_mini_bar_restrictor"
		}
		table.insert(sj, t)	
		t = { section = "logic@amk_mini_bar_stalker1_kamp",
			idle = 0,
			prior = 10, state = {0, 1},
			in_rest = "", out_rest = "amk_mini_bar_restrictor"
		}
		table.insert(sj, t)	
	end
end

function load_states(gname, type)
	if type == "amk_embankment" then
		return function(gulag)
			--if db.actor then
				if TB3D_Services.is_night(false) == true then return 1 else return 0 end
			--else return 0 end
		end
	elseif type == "amk_mini_bar" then
		return function(gulag)
			--if db.actor then
				if TB3D_Services.is_night(false) == true then return 1 else return 0 end
			--else return 0 end
		end
	end
		--TB3D_Services.packet_alert("gulag amk: load job for type["..utils.to_str(type).."] not found")
	return nil
end

function load_ltx(gname, type)
	return nil
end

function checkStalker(npc_community, gulag_type, npc_rank, se_obj)
	if gulag_type == "amk_embankment" then
		return npc_community == "military"
	end	
	if gulag_type == "amk_mini_bar" then
		return npc_community == "stalker"
	end
	return false
end

function checkMonster(npc_community, gulag_type)
	return false
end