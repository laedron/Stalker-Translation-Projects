--TB3D 1.1.0.0.1.0  new reporting 12/07/11, tweed, delta to updates, death
function my_ver() return "1.1.0.0.1.0" end
---- Rulix aka Bak --- 25.3.2009
--------------------------------------utils------------------------------------------

function count_table(t)
	if type(t) ~= "table" then
		return
	end
	local cnt = 0
	for k,v in pairs(t) do
		cnt = cnt+1
	end
	return cnt
end

function IsTrader(npc)
	if npc then
		if string.find(npc:profile_name(),"tweed") then			--109981, for xr_kamp and xrs_armor
			if TB3D_Modders.use_rxai_message then TB3D_Services.info_alert("rx_ai: is not trader["..npc:profile_name().."]") end
			return false
		end
		if npc:character_community() == "trader" or npc:clsid() == clsid.script_trader or npc:clsid() == clsid.trader then
			if TB3D_Modders.use_rxai_message then TB3D_Services.info_alert("rx_ai: istrader["..npc:name().."]") end
			return true
		end
	--===== to crow and gray does not crush the AI:=====
		if string.find(npc:profile_name(),"amk_vitek_voron") then
			if TB3D_Modders.use_rxai_message then TB3D_Services.info_alert("rx_ai: is trader [amk_vitek_voron]") end
			return true
		end
		if string.find(npc:profile_name(),"agro_mobil_torgash") then
			if TB3D_Modders.use_rxai_message then TB3D_Services.info_alert("rx_ai: is trader [agro_mobil_torgash]") end
			return true
		end
		if string.find(npc:profile_name(),"yan_general_ecolog") then
			if TB3D_Modders.use_rxai_message then TB3D_Services.info_alert("rx_ai: is trader [yan_general_ecolog]") end
			return true
		end
	----==========
		if string.find(npc:section(),"trader") then
			if TB3D_Modders.use_rxai_message then TB3D_Services.info_alert("rx_ai: is trader [trader]") end
			return true
		end
		local cini = xr_logic.get_customdata_or_ini_file(npc,"<customdata>")
		if cini and cini:section_exist("logic") and cini:line_exist("logic","trade") then
			if TB3D_Modders.use_rxai_message then TB3D_Services.info_alert("rx_ai: is trader [customdata]") end
			return true
		end
		if TB3D_Modders.use_rxai_message then TB3D_Services.info_alert("rx_ai: is not trader["..npc:name().."]") end
	end
	return false
end

------------------------------------callbacks--------------------------------------

function actor_net_spawn()
	rx_gl.net_spawn()
end

function actor_save(p)
	rx_wmgr.return_all()
end

function npc_update(npc,st,delta)			--110008, added delta
	if _g.is_disconnecting then return end		--110010
	if npc and npc:alive() then
		if st.wm then
			st.wm:update()
		end
		rx_gl.npc_update(npc,st,delta)
		rx_addons.npc_update(npc,st,delta)
		--eat_medkit(npc)
	end
end

function npc_switch_offline(npc)
	if _g.is_disconnecting then return end		--110010
	if npc then
		if TB3D_Modders.use_rxai_message then
			TB3D_Services.info_alert("RX AI: npc_switch_offline["..npc:name().."]", true)
		end
		rx_wmgr.kill_wm(npc)
		unsubscribe_from_events(npc)
	end
end

function npc_death(npc,who)
	if _g.is_disconnecting then return end		--110010
	if npc then
		if TB3D_Modders.use_rxai_message then
			TB3D_Services.info_alert("RX AI: npc_death["..npc:name().."]")
		end
		if npc.id and db.storage[npc:id()] and db.storage[npc:id()].stype then			--110010, sometimes removed before update
			xr_logic.disable_generic_schemes(npc, db.storage[npc:id()].stype)			--110010, moved up
		else
			TB3D_Services.abort_alert("RX AI: npc_death["..npc:name().."] no stype!!!!")			--110010
		end
		rx_wmgr.kill_wm(npc)
		rx_gl.death(npc)
		--issue_event(npc,"death_callback",who)
		unsubscribe_from_events(npc)
	end
end

function npc_hit(npc,amount,dir,who,bone_id)
	if _g.is_disconnecting then return end		--110010
	if npc and amount ~= 0 then
		if TB3D_Modders.use_combat_message then TB3D_Services.packet_alert("rx ai: HIT_CALLBACK issue event["..npc:name().."] by["..who:name().."] amount["..utils.to_str(amount).."] bone["..utils.to_str(bone_id).."]") end
		issue_event(npc,"hit_callback",amount,dir,who,bone_id)
		if TB3D_Modders.use_combat_message then TB3D_Services.packet_alert("rx ai: HIT_CALLBACK issue event["..npc:name().."] done") end
	end
end

function issue_event(npc,name,...)
	local st = db.storage[npc:id()]
	if not st or not st.rx_callbacks then
		return
	end
--	--printf("issue[%s]:%s",npc:name(),name)
	for k,v in pairs(st.rx_callbacks) do
		if v and k[name] then
			k[name](k,...)
		end
	end
end

function subscribe_for_events(npc,obj)
	local st = db.storage[npc:id()]
--	--printf("subscribe[%s]",npc:name())
	if not st.rx_callbacks then
		st.rx_callbacks = {}
	end
	st.rx_callbacks[obj] = true
end

function unsubscribe_from_events(npc,obj)
--	--printf("unsubscribe[%s]",npc:name())
	local st = npc and db.storage[npc:id()]
	if st and st.rx_callbacks then
		if obj then
			st.rx_callbacks[obj] = nil
		else
			st.rx_callbacks = nil
		end
	end
end

function load_schemes()
	if TB3D_Modders.use_rxai_message then
		TB3D_Services.packet_alert("RX AI: loading 3 schemes")
	end
	--if rx_reload then
		load_scheme("rx_reload","reload",stype_stalker)
		if TB3D_Modders.use_rxai_message then TB3D_Services.packet_alert("RX AI: rx_reload done") end
	--end
	--if rx_gl then
		load_scheme("rx_gl","launch_grenade",stype_stalker)
		if TB3D_Modders.use_rxai_message then TB3D_Services.packet_alert("RX AI: rx_gl done") end
	--end
	--if rx_facer then
		load_scheme("rx_facer","facer",stype_stalker)
		if TB3D_Modders.use_rxai_message then TB3D_Services.packet_alert("RX AI: rx_facer done") end
	--end
	--if rx_knife then
		--load_scheme("rx_knife","knife",stype_stalker)
		--if TB3D_Modders.use_rxai_message then TB3D_Services.packet_alert("RX AI: rx_knife done") end
	--end
	if TB3D_Modders.use_rxai_message then
		TB3D_Services.info_alert("RX AI: loading schemes done")
	end
end

function disable_schemes(npc)	--!!!!TB3D
	if npc then
		--if rx_reload then
			rx_reload.disable_scheme(npc,"reload")
		--end
		--if rx_gl then
			rx_gl.disable_scheme(npc,"launch_grenade")
		--end
		--if rx_facer then
			rx_facer.disable_scheme(npc,"facer")
		--end
		--if rx_knife then
			--rx_knife.disable_scheme(npc,"knife")
		--end
	end
end

function enable_schemes(ini,npc)
	if npc then
		if TB3D_Modders.use_rxai_message then
			TB3D_Services.packet_alert("RX AI: enable 3 schemes for["..npc:name().."]")
		end
		--if rx_reload then
			rx_reload.set_scheme(npc,ini,"reload","reload")
			if TB3D_Modders.use_rxai_message then TB3D_Services.packet_alert("RX AI: reload done") end
		--end
		--if rx_gl then
			rx_gl.set_scheme(npc,ini,"launch_grenade","launch_grenade")
			if TB3D_Modders.use_rxai_message then TB3D_Services.packet_alert("RX AI: launch_grenade done") end
		--end
		--if rx_facer then
			rx_facer.set_scheme(npc,ini,"facer","facer")
			if TB3D_Modders.use_rxai_message then TB3D_Services.packet_alert("RX AI: facer done") end
		--end
		--if rx_knife then
			--rx_knife.set_scheme(npc,ini,"knife","knife")
			--if TB3D_Modders.use_rxai_message then TB3D_Services.packet_alert("RX AI: knife done") end
		--end
		if TB3D_Modders.use_rxai_message then TB3D_Services.info_alert("RX AI: schemes enabled") end
	end
end

function addCommonPrecondition(action)
	--if rx_reload then
		action:add_precondition(world_property(rx_reload.evid_reload,false))
	--end
	--if rx_gl then
--		action:add_precondition(world_property(rx_gl.evid_gl_fire,false))
		action:add_precondition(world_property(rx_gl.evid_gl_reload,false))
	--end
end

function on_menu_close()
end

------------------------------------eating----------------------------------------

local rx_ini = ini_file("misc\\rx_ai.ltx")
local eating = {enabled = rx_ini:section_exist("npc_eating") and rx_ini:r_bool("npc_eating","enabled")}

function eat_init()
	eating.oic = rx_ini:r_bool("npc_eating","only_in_combat")
	eating.max_h = rx_ini:r_float("npc_eating","medkit_health")/100
	eating.min_b = rx_ini:r_float("npc_eating","bandage_bleeding")
	eating.medkits = rx_utils.parse_list(rx_ini,"npc_eating","medkits")
	eating.bandages = rx_utils.parse_list(rx_ini,"npc_eating","bandages")
	eating.delay = rx_utils.parse_list(rx_ini,"npc_eating","delay")
end

function eat_medkit(npc)
	if not eating.enabled then
		return
	end
	if not eating.medkits then
		eat_init()
	end
	local id = npc:id()
	if eating.oic and not npc:best_enemy() then
		eating[id] = nil
		return
	end
	if eating[id] and eating[id].item and eating[id].time then
		if eating[id].time < time_global() then
--			--printf("[%s]eat[%s]",npc:character_name(),eating[id].item:section())
			npc:eat(eating[id].item)
			eating[id].item = nil
		end
		return
	end
	if npc.health < eating.max_h and not xr_wounded.is_wounded(npc) then
		local medkit
		for k,v in ipairs(eating.medkits) do
			medkit = npc:object(v)
			if medkit then
--				--printf("health[%s]=%s:set[%s]",npc:character_name(),npc.health,v)
				eating[id] = {}
				eating[id].time = time_global() + math.random(eating.delay[1],eating.delay[2])
				eating[id].item = medkit
				return
			end
		end
	end
	if npc:get_bleeding() > eating.min_b then
		local bandage
		for k,v in ipairs(eating.bandages) do
			bandage = npc:object(v)
			if bandage then
--				--printf("bleeding[%s]=%s:set[%s]",npc:character_name(),npc:get_bleeding(),v)
				eating[id] = {}
				eating[id].time = time_global() + math.random(eating.delay[1],eating.delay[2])
				eating[id].item = bandage
				return
			end
		end
	end
end
