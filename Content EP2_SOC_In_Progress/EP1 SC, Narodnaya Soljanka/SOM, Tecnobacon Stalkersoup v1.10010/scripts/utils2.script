--TB3D 1.0.9.9.1.9 chg packet pool
function my_ver() return "1.0.9.9.1.9" end

actions_id = {
	anomaly_scanner_base = xr_actions_id.narrator_actions + 500
}
evaluators_id = {
	anomaly_scanner_base = xr_evaluators_id.narrator_evaluators + 500
}

-----------------------------------------------------------------------

local top_lvid, top_gvid
local top_game_vertex_ids

local function gg_backward_scan(gg, lid, gvid)
	while true do
		gvid = gvid - 1
		if gvid < 0 or gg:vertex(gvid):level_id() ~= lid then
			return gvid + 1
		end
	end
	if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("utils2: gg_backward_scan") end
	return nil
end

local function fill_top_game_vertex_ids(gg)
	top_game_vertex_ids = {}
	local sim = alife()
	local lid, gvid = -1, 0
	while gg:valid_vertex_id(gvid) == true do
		if gg:vertex(gvid):level_id() ~= lid then
			lid = gg:vertex(gvid):level_id()
			top_game_vertex_ids[sim:level_name(lid)] = gg_backward_scan(gg, lid, gvid)
		end
		gvid = gvid + 10
	end
end

function get_top_graph_ids(level_name)
	if level_name ~= nil then
		local gg = game_graph()
		if top_game_vertex_ids == nil then
			fill_top_game_vertex_ids(gg)
		end
		local gvid = top_game_vertex_ids[level_name]
		return gg:vertex(gvid):level_vertex_id(), gvid
	end
	if top_gvid == nil then
		local gg = game_graph()
		local gvid = db.actor:game_vertex_id()
		top_gvid = gg_backward_scan(gg, gg:vertex(gvid):level_id(), gvid)
		top_lvid = gg:vertex(top_gvid):level_vertex_id()
	end
	return top_lvid, top_gvid
end

-----------------------------------------------------------------------

function r_bool(ini, section, line, default)
	return se_respawn.r_bool(ini, section, line, default)
end

function r_str(ini, section, line, default)
	return se_respawn.r_str(ini, section, line, default)
end

function r_num(ini, section, line, default)
	return se_respawn.r_num(ini, section, line, default)
end

function r_2nums(ini, section, line, default1, default2)
	if ini:line_exist(section, line) then
		local s = ini:r_string(section, line)
		local at, to, num1, num2 = string.find(s, "([%d%.]+)%s*,%s*([%d%.]+)")
		return (tonumber(num1) or default1), (tonumber(num2) or default2)
	else
		return default1, default2
	end
end

function parse_sections(s, mult)
	local result = {}
	local tokens = parse_names(s)
	local k, n = 1, table.getn(tokens)
	local t
	local prob
	while k <= n do
		t = {}
		t = {section = tokens[k], prob = 100}
		k = k + 1
		if k <= n then
			prob = tonumber(tokens[k])
			if prob ~= nil then
				t.prob = prob * mult
				k = k + 1
			end
		end
		table.insert(result, t)
	end
	return result
end

-----------------------------------------------------------------------

local packet_pool = {}

function packet_pool_get()
	local packet_number = table.getn(packet_pool)
	if packet_number > 0 then
		--TB3D_Services.info_alert("utils2: packet number["..utils.to_str(packet_number).."] taken from the pool")
		return table.remove(packet_pool)
	end
	--TB3D_Services.info_alert("utils2: packet pool empty")
	return net_packet()	--return a new empty packet
end

function packet_pool_put(packet)
	packet:w_begin(0)
	packet:r_seek(2)
	table.insert(packet_pool, packet)
	--TB3D_Services.info_alert("utils2: packet number["..utils.to_str(table.getn(packet_pool)).."] put in the pool")
end

function packet_copy(dst_packet, src_packet, size)
	while size > 3 do
		dst_packet:w_s32(src_packet:r_s32())
		size = size - 4
	end
	while size > 0 do
		dst_packet:w_u8(src_packet:r_u8())
		size = size - 1
	end
end

-----------------------------------------------------------------------
-- generalized to deferred_callback?

local deferred_release_queue

local function init_deferred_release_queue()
	if deferred_release_queue == nil then
		deferred_release_queue = xr_logic.pstor_get_custom(db.actor, "defer_rel_q", "defer_rel_q")
	end
end

function deferred_release(object_id, timeout)
	init_deferred_release_queue()
	deferred_release_queue[object_id] = math.floor(time_global() * 0.001 + (timeout or -1))
	TB3D_Services.packet_alert("utils2: object["..utils.to_str(object_id).."] scheduled for the deferred release in ["..utils.to_str(timeout).."] sec")
end

function deferred_release_update()
	init_deferred_release_queue()
	local se_obj
	local time = math.floor(time_global() * 0.001)
	for k,v in pairs(deferred_release_queue) do
		if v <= time then
			se_obj = alife():object(k)
			if se_obj ~= nil then
				TB3D_Services.packet_alert("utils2: deferred release of object id["..utils.to_str(k).."] done")
				alife():release(se_obj)
				deferred_release_queue[k] = nil
			else
				--if TB3D_Modders.use_abort_message == true then 
				TB3D_Services.packet_alert("utils2: no object id["..utils.to_str(k).."] though it was scheduled for the deferred release") --end
			end
		end
	end
end

-----------------------------------------------------------------------

local communities_relations
local index_for_community

local function load_communities_relations()
	local index = 1
	local rel

	index_for_community = {}
	communities_relations = {}

	local ini = system_ini()
	local communities = ini:r_string("game_relations", "communities")
	local t = {}
	local relations = ""
	for comm,id in string.gfind(communities, "([%w_]+)%s*,%s*([%d%.%-]+)%,*") do
		t = {}
		relations = ini:r_string("communities_relations", comm)
		for rel in string.gfind(relations, "([%d%.%-]+)%,*") do
			table.insert(t, tonumber(rel))
		end
		communities_relations[comm] = t
		index_for_community[comm] = index
		index = index + 1
	end
end

function community_relation(community, npc)
	if index_for_community == nil then
		load_communities_relations()
	end
	local relations = communities_relations[community]
	if relations == nil then
		return -5000
	end
--	dbglog("community_relation(%s,%s): goodwill=%f relation=%f", community, npc:name(),
--			relation_registry.community_goodwill(community, npc:id()),
--			relations[index_for_community[npc:character_community()]])
	return relations[index_for_community[npc:character_community()]] +
			relation_registry.community_goodwill(community, npc:id())
end

-----------------------------------------------------------------------

function frandom(min, max)
	return min + math.random() * (max - min)
end

-----------------------------------------------------------------------

--[[function show_coordinates()
	local hud = get_hud()
	local cs = hud:GetCustomStatic("cs_debug")
	if cs == nil then
		hud:AddCustomStatic("cs_debug", true)
		cs = hud:GetCustomStatic("cs_debug")
	end
	local lvid, gvid = db.actor:level_vertex_id(), db.actor:game_vertex_id()
	local pos, dir = db.actor:position(), db.actor:direction()
	local pos2 = level.vertex_position(lvid)
	local d = vector():sub(pos, pos2)
	local valid = (math.abs(d.x) <= 0.35 and math.abs(d.y) < 1.0 and math.abs(d.z) <= 0.35)
	local msg = string.format("lvid: %d\\n", lvid) ..
				string.format("gvid: %d\\n", gvid) ..
				string.format("pos: %f,%f,%f\\n", pos.x, pos.y, pos.z) ..
				string.format("dir: %f,%f,%f\\n", dir.x, dir.y, dir.z) ..
				"valid: " .. tostring(valid)
	if cs ~= nil then
		cs:wnd():SetText(msg)
	end
end]]--
