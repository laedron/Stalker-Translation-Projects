--TB3D 1.0.9.9.4.0
function my_ver() return "1.0.9.9.4.0" end

local math_random = math.random
local string_sub = string.sub

local not_spawn_levels = {
  l05_bar = true
}

function is_single_player_game  ()
  if (_G.alife == nil) then return (true) end
  if (alife() ~= nil) then return (true) end
  if (_G.IsGameTypeSingle == nil) then return (true) end
  if (IsGameTypeSingle() == true) then return (true) end
  return (false)
end

class "se_zone_anom" (cse_anomalous_zone)
function se_zone_anom:__init (section) super (section)  
end

function se_zone_anom:on_register()
  cse_anomalous_zone.on_register(self)
  local sect = get_section(self)
   self.artefact_spawn_idle = 60*60*1000*getIniValueFloat(sect, "artefact_spawn_idle", 24, nil)
   self.artefact_spawn_rnd = getIniValueFloat(sect, "artefact_spawn_rnd", TB3D_Modders.arts_max, nil)
end

function se_zone_anom:on_unregister()
  cse_anomalous_zone.on_unregister(self)
end

function se_zone_anom:update()
	cse_anomalous_zone.update(self)
	if bind_det_arts.art_count() < (TB3D_Modders.arts_total or 500) then
		if self.last_spawn_time == nil then
			self.last_spawn_time = game.get_game_time()
		end
		if string_sub(self:name(),1,3) ~= "amk" then
			if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("SE ZONES: allowing artefact spawn for["..self:name().."]") end
			if game.get_game_time():diffSec(self.last_spawn_time) >= self.artefact_spawn_idle then
				self.last_spawn_time = game.get_game_time()
				if math_random(TB3D_Modders.arts_max) <= self.artefact_spawn_rnd then
					local sobj = self:spawn_artefacts()
					db.artefacts[sobj.id].spot = false
				end
			end 
		else
			if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("SE ZONES: Preventing artefact spawn for["..self:name().."]") end
		end
	end
end

function se_zone_anom:STATE_Write(packet)
  cse_anomalous_zone.STATE_Write(self, packet)
  if (is_single_player_game() == false) then
    return
  end
  if self.last_spawn_time == nil then
    packet:w_u8(0)
  else
    packet:w_u8(1)
    utils.w_CTime(packet, self.last_spawn_time)
  end 
end

-- recovery
function se_zone_anom:STATE_Read( packet, size )
	--TB3D_Services.info_alert("size "..size)
	local packet1,radius=repack_zone(packet,size)
	--TB3D_Services.info_alert("read begin ")
	cse_anomalous_zone.STATE_Read( self, packet1, size )
	self.radius=radius
	--TB3D_Services.info_alert("State Read "..self.m_story_id)
	--TB3D_Services.info_alert("read end " .. tostring(self.id))
	if editor() then return end
	if (is_single_player_game() == false) then return end
	local flag = packet1:r_u8()
	if flag == 1 then
		self.last_spawn_time = utils.r_CTime(packet1)
	end
end

-- Code is based on bardak's sample
function repack_zone(packet,size)
  local a_radius=0
	local packet1 = net_packet()			-- properties cse_alife_object
	packet1:w_u16(packet:r_u16()) 			-- game_vertex_id 0
	packet1:w_float(packet:r_float()) 		-- cse_alife_object__unk1_f32 2
	packet1:w_u32(packet:r_u32()) 			-- cse_alife_object__unk2_u32 6
	packet1:w_u32(packet:r_u32()) 			-- cse_alife_object__unk2_u32 10
	packet1:w_s32(packet:r_s32()) 			-- object_flags 14
	packet1:w_stringZ(packet:r_stringZ())	-- custom_data 18
	local sid=packet:r_s32() --19
	packet1:w_s32(sid) -- story_id
	--TB3D_Services.info_alert(sid)
	packet1:w_s32(packet:r_s32()) -- se_alife_object__unk3_u32 23
	local shape_count = packet:r_u8() -- 27	-- properties cse_shape
	packet1:w_u8(shape_count)
	for i=1,shape_count do
		local shape_type = packet:r_u8() --28
		packet1:w_u8(shape_type)
		if shape_type == 0 then				-- sphere
			packet1:w_vec3(packet:r_vec3()) -- center 29
			a_radius = packet:r_float()  -- 41
			packet1:w_float(a_radius)
		else								-- box
			local v1 = packet:r_vec3()
			local v2 = packet:r_vec3()
			local v3 = packet:r_vec3()
			local v4 = packet:r_vec3()
			packet1:w_vec3(v1)
			packet1:w_vec3(v2)
			packet1:w_vec3(v3)
			packet1:w_vec3(v4)
			--TB3D_Services.info_alert("|i|="..v1.x.."|j|="..v2.y.."|k|="..v3.z.."|c|="..v4.x)
			a_radius=math.sqrt(v1:magnitude()*v1:magnitude()+v3:magnitude()*v3:magnitude())/2
		end
	end
	-- properties cse_alife_space_restrictor
	packet:r_u8()
	packet1:w_u8(0) --  -- restrictor_type -- 45 or 89
	for i=1,size-packet1:r_tell(),1 do
		packet1:w_u8(packet:r_u8())
	end
	packet1:r_seek(0)
	return packet1,a_radius
end

class "se_zone_visual" (cse_zone_visual)
function se_zone_visual:__init (section) super (section)
end

function se_zone_visual:on_register()
  cse_zone_visual.on_register(self)
  local sect = get_section(self)
   self.artefact_spawn_idle = 60*60*1000*getIniValueFloat(sect, "artefact_spawn_idle", 24, nil)
   self.artefact_spawn_rnd = getIniValueFloat(sect, "artefact_spawn_rnd", TB3D_Modders.arts_max, nil)
end

function se_zone_visual:update()
  cse_zone_visual.update(self)
  if self.last_spawn_time == nil then
    self.last_spawn_time = game.get_game_time()
  end
  if game.get_game_time():diffSec(self.last_spawn_time) >= self.artefact_spawn_idle then
    self.last_spawn_time = game.get_game_time()
    if math_random(100) <= self.artefact_spawn_rnd then
			local sobj = self:spawn_artefacts()
			db.artefacts[sobj.id].spot = false
    end
  end 
end

function se_zone_visual:STATE_Write(packet)
  cse_zone_visual.STATE_Write(self, packet)
  if (is_single_player_game() == false) then
    return
  end
  if self.last_spawn_time == nil then
    packet:w_u8(0)
  else
    packet:w_u8(1)
    utils.w_CTime(packet, self.last_spawn_time)
  end 
end

-- recovery
function se_zone_visual:STATE_Read( packet, size )
  cse_zone_visual.STATE_Read( self, packet, size )
  if editor() then
    return
  end
  if (is_single_player_game() == false) then
    return
  end
  local flag = packet:r_u8()
  if flag == 1 then
    self.last_spawn_time = utils.r_CTime(packet)
  end
end

--' Restrictor
class "se_restrictor" (cse_alife_space_restrictor)
function se_restrictor:__init (section) super (section)
end

function se_restrictor:keep_saved_data_anyway()
  return true
end
