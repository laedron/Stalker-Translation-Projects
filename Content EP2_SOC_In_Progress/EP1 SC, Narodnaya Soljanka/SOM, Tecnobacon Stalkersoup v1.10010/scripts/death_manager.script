--TB3D 1.1.0.0.1.0 03/30/2013 replaced with new version, expanded death items, prevent loadouts for captives,
--bad_psy_helmet, pri_followers_leader, fotoman, lastday, tractorist, fotoman, lastday in dead marshes and research,
--lastday, missing end tag, obj_is_protected, debug, removed levels from loadouts, min_cond, lastday added to inventory,
--has_ammo, reorganized, optimized loot ammo, check dead items, ldk, esc_shustryi, simplified loadouts, last_day,
--reduced vog-25 ammo, _umer from nepis_umer, optimized death info, gar_wounded_bandit, prip_dok_arh, doktor, load out,
--check_dead_items


function my_ver() return "1.1.0.0.1.0" end

local math_random = math.random
--local math_ceil = math.ceil
local string_find = string.find

--[[ following given elsewhere or not used
	["brat_luis"] = "brat_luis_dead",			--in .ltx prior to 1.1
	["snip_esc1"] = "snip_esc1_dead",			--in .ltx, 1.1
	["snip_esc2"] = "snip_esc2_dead",			--in .ltx, 1.1
	["snip_esc3"] = "snip_esc3_dead",			--in .ltx, 1.1
	["snip_esc4"] = "snip_esc4_dead",			--in .ltx, 1.1
	["snip_esc5"] = "snip_esc5_dead",			--in .ltx, 1.1
	["snip_esc6"] = "snip_esc6_dead",			--in .ltx, 1.1
	["snip_esc7"] = "snip_esc7_dead",			--in .ltx, 1.1
	["snip_esc8"] = "snip_esc8_dead",			--in .ltx, 1.1
	["snip_esc9"] = "snip_esc9_dead",			--in .ltx, 1.1
	["snip_esc10"] = "snip_esc10_dead",			--in .ltx, 1.1
	["snip_esc11"] = "snip_esc11_dead",			--in .ltx, 1.1
	["snip_esc12"] = "snip_esc12_dead",			--in .ltx, 1.1
	["naem_zahar1"] = "naem_zahar1_dead",			--in .ltx, 1.1
	["naem_zahar2"] = "naem_zahar2_dead",			--in .ltx, 1.1
	["naem_zahar3"] = "naem_zahar3_dead",			--in .ltx, 1.1
	["naem_zahar4"] = "naem_zahar4_dead",			--in .ltx, 1.1
	["naem_zahar5"] = "naem_zahar5_dead",			--in .ltx, 1.1
	["naem_zahar6"] = "naem_zahar6_dead",			--in .ltx, 1.1
	["pri_followers_bomber"] = "pri_bomber_dead",						--not in all.spawn
	["bandit_krisyk"] = "bandit_krisyk_umer",							--110000, following added from nepis_umer, in .ltx
	["esc_shustryi"] = "esc_shustryi_umer",
	["bar_docent"] = "bar_docent_umer",									--in .ltx
	["dolgovazyi"] = "dolgovazyi_umer",									--in .ltx
	["sak_military_stalker"] = "sak_military_stalker_umer",				--in .ltx
	["Sak"] = "Sak_umer",
	["mil_freedom_member0012"] = "mil_freedom_member0012_umer",
	["bar_dolg_petrenko"] = "bar_dolg_petrenko_umer",					--in .ltx
	["mil_freedom_member0018"] = "mil_freedom_member0018_umer",
]]--

local names_info = {
	["ecolog_wound_bunker"] = "ucen_talk_est",
	["mitya"] = "mitya_dead",
	["grab_stal1"] = "grab_stal1_dead",
	["grab_stal2"] = "grab_stal2_dead",
	["grab_stal3"] = "grab_stal3_dead",
	["grab_stal4"] = "grab_stal4_dead",
	["grab_stal5"] = "grab_stal5_dead",
	["mil_trader_gavr"] = "info_gavr_dead",								--not in all.spawn
	["Mil_Dolg_Zoneguard"] = "mil_scull_dead", 							--skull, not in all.spawn
	["mil_dolg_stalker0000"] = "mil_scull_dead", 						--skull
	["mil_Svoboda_master_Max"] = "mil_max_dead",						--max, not in all.spawn
	["mil_Svoboda_leader"] = "mil_lukash_dead",							--lucash, not in all.spawn
	["svoboda_leader_zombi"] = "mil_lukash_dead",						--lucash, not in all.spawn
	["final_lukash"] = "mil_lukash_dead",								--lucash
	["xalyava_naem1"] = "xalyava_naem1_dead",							--in case logic fails
	["xalyava_naem2"] = "xalyava_naem2_dead",
	["xalyava_naem3"] = "xalyava_naem3_dead",
	["xalyava_naem4"] = "xalyava_naem4_dead",
	["xalyava_naem5"] = "xalyava_naem5_dead",
	["xalyava_naem6"] = "xalyava_naem6_dead",
	["xalyava_naem7"] = "xalyava_naem7_dead",
	["xalyava_naem8"] = "xalyava_naem8_dead",
	["pri_followers_leader"] = "pri_aes_mapspot",
	["val_lager_bandits_borov"] = "val_borov_dead",
	["esc_vagon_wounded"] = "esc_vagon_wounded_umer",
	["mil_freedom_member0021"] = "mil_freedom_member0021_umer",			--Miser
	["esc_shustryi"] = "esc_shustryi_dead",								--109991
	["Sak"] = "mil_max_dead",											--max
	["esc_novice_attacker1"] = "esc_novice_attacker1_umer",
	["esc_provodnik"] = "esc_provodnik_umer",
	["esc_bridge_soldier5"] = "esc_bridge_soldier5_umer",
	["esc_fox"] = "esc_fox_umer",
	["mil_freedom_member0012"] = "mil_lukash_dead",						--lucash
	["bar_dolg_leader"] = "bar_dolg_leader_umer",						--in all.spawn gives %+sar2_death_43 +bar_voronin_dead%
	["bar_dolg_regular_5"] = "bar_dolg_regular_5_umer",
	["val_escort_captive"] = "val_escort_captive_umer",
	["val_escort_nap1"] = "val_escort_nap1_umer",
	["agr_krot"] = "agr_krot_umer",										--in all.spawn gives %+agr_krot_dead +sar2_death_19%
	["gar_hellcar"] = "gar_hellcar_umer",
	["gar_dm_novice"] = "gar_dm_novice_umer",							--%+gar_dm_novice_dead =gar_dm_bandits_fight%
	["gar_dolg_blokpost_4"] = "gar_dolg_blokpost_4_umer",
	["mil_freedom_member0018"] = "mil_max_dead",						--max
	["mil_freedom_stalker0026"] = "mil_freedom_stalker0026_umer"
}
local coll_names_info = {
	["tractorist"] = "tractorist_zep3_done",			--spawns note if not already done
	["l02_stalker_0000"] = "dd_informant_dead"
}

class "drop_manager"
function drop_manager:__init(npc)
	self.npc = npc
end

local counter

function drop_manager:check_dead_info()
	if self.npc then
		local npc_name = protected_items.get_obj_name(self.npc)		--strips off the id
		if TB3D_Services.is_collector(60) then
			if npc_name and coll_names_info[npc_name] then
				TB3D_Services.give_info(coll_names_info[npc_name])
			end
		else
			if npc_name and names_info[npc_name] then
				TB3D_Services.give_info(names_info[npc_name])
			end
		end
	end
end

function drop_manager:check_dead_weapons()
	if self.npc then
		local lname = level:name()
		local npc_name = protected_items.get_obj_name(self.npc)		--strips off the id
		local commun = self.npc:character_community()		--109990
		--TB3D_Services.packet_alert("death mgr: check dead weapons["..utils.to_str(npc_name).."] commun["..utils.to_str(commun).."]")
		--if commun and commun == "lastday" then
			--if string_find(npc_name, "charactercommander") then return end
			--if lname == "red_forest" or lname == "dead_city" then return end
		--end
		local is_rand = TB3D_Modders.loadout_rand_cond
		local min_cond = TB3D_Modders.loadout_min_cond									--109981
		if min_cond == nil or min_cond < 0 or min_cond > 99 then min_cond = 80 end
		local item_in_slot = self.npc:item_in_slot(1)
		if item_in_slot then
			item_in_slot:unload_magazine()													--remove ammo to prevent child ctd
			if is_rand then item_in_slot:set_condition(math_random(min_cond, 100)/100) end
		end
		item_in_slot = self.npc:item_in_slot(2)
		if item_in_slot then
			item_in_slot:unload_magazine()													--remove ammo to prevent child ctd
			if is_rand then item_in_slot:set_condition(math_random(min_cond, 100)/100) end
		end
--[[		function check_weapon(npc, item)																	--109981
			if npc and item and alife():object(item:id()) then
				if IAmAWeapon[item:clsid()] then
					item:unload_magazine()																	--109981, pm still causes error with 9x18_fmj
					if protected_items.obj_is_protected(item) == false then
						if is_rand then item:set_condition(math_random(min_cond, 100)/100) end
						return true
					end
				end
			end
			return false
		end
		self.npc:iterate_inventory(check_weapon, self.npc)
--]]
	end
end

--fixes PDAs, spawns some loot IF npc has less items than loot option, reduces ammo to reasonable amount
--most npc already have an inventory and are skipped except for the PDA fix, no weapons or ammo! use load out system
function drop_manager:check_dead_items()						--109989, just deal with simple qty and not box size
	local lname = level:name()
	local npc_name = protected_items.get_obj_name(self.npc)		--strips off the id
	local community = self.npc:character_community()			--109990
	if TB3D_Modders.use_drop_message then TB3D_Services.packet_alert("death mgr: check dead items["..utils.to_str(npc_name).."] community["..utils.to_str(community).."]") end
	if community == nil then
		community = "zombied"
	elseif community == "trader" then
		return
	elseif npc_name == "gar_wounded_bandit" then
		return
	elseif npc_name == "prip_dok_arh" or npc_name == "doktor" or npc_name == "bar_dolg_petrenko" then
		return
	elseif community == "lastday" then
		if string_find(npc_name, "charactercommander") then return end
		--if lname == "red_forest" or lname == "dead_city" then return end
	end
	if TB3D_Modders.use_drop_message then TB3D_Services.packet_alert("death mgr: iterate inventory") end
	local npc_id = self.npc:id()
	local art_count = 0
	local loot_count = 0							--109989, keep track of random loot
	local ammo_types = 0							--110010, number of ammo types
	local has_ammo = {}								--109981, used to store types of ammo
	--local ammo_count = TB3D_Modders.loadout_ammo_loot	--110010
	--if ammo_count > 100 then ammo_count = 100 end
	function clear_pda(npc, item, rnd)
		if item then
			local name = item:name()
			local sect = item:section()
			if name then
				if (item.clsid and IAmAWeapon[item:clsid()])							--110010, moved up
				  or string_find(name, "wpn_")
				  or string_find(name, "_addon") then									--not considered loot, skip it
					if TB3D_Modders.use_drop_message then TB3D_Services.packet_alert("death mgr: check dead items["..utils.to_str(npc:name()).."] weapon or addon["..name.."] skiped") end
				elseif string_find(name, "af_") then
					art_count = art_count + 1
					if TB3D_Modders.use_drop_message then TB3D_Services.packet_alert("death mgr: check dead items["..utils.to_str(npc:name()).."] has arts["..utils.to_str(art_count).."]") end
				elseif string_find(name, "device_pda")
				  or string_find(name, "device_torch")									--to not interfere with soul cube quest
				  or string_find(name, "psy_helmet")									--removes those from all.spawn
				  or string_find(name, "guitar_a")										--get rid of clutter
				  or string_find(name, "harmonica_a")
				  or string_find(name, "bolt")
				  or string_find(name, "binocular_a")
				  or string_find(name, "balalaika_a") then
					if TB3D_Modders.use_drop_message then TB3D_Services.packet_alert("death mgr: check dead items junk["..name.."] removed") end
					amk.remove_item_from_inventory(item, npc)
				elseif protected_items.obj_is_protected(item) == false then				--109988, moved after psi helmet
					if string_find(sect, "ammo_") then									--109983, optimized ammo method
--[[			--110010
						if has_ammo[sect] == nil then									--start count
							has_ammo[sect] = 1
							ammo_types = ammo_types + 1									--110010, another ammo type
							if TB3D_Modders.use_drop_message then TB3D_Services.packet_alert("death mgr: check dead items["..utils.to_str(npc:name()).."] ammo type["..sect.."] started") end
						else
							has_ammo[sect] = has_ammo[sect] + 1
							--if TB3D_Modders.use_drop_message then TB3D_Services.packet_alert("death mgr: check dead items ammo["..sect.."] = ["..utils.to_str(has_ammo[sect]).."]") end
						end
						--amk.remove_item_from_inventory(item, npc)
--]]
					else
						loot_count = loot_count + 1										--109989, for give_loot below
						if TB3D_Modders.use_drop_message then TB3D_Services.packet_alert("death mgr: check dead items loot["..name.."] count["..utils.to_str(loot_count).."] skiped") end
					end
				else
					if TB3D_Modders.use_drop_message then TB3D_Services.packet_alert("death mgr: check dead items protected["..name.."] skiped") end
				end
			end
		end
		--return true
	end
	self.npc:iterate_inventory(clear_pda, self.npc)			--removes old pda and bad_psy_helmet, spawns mil_pda 30% of the time, also some clutter removed
	if TB3D_Modders.use_drop_message then TB3D_Services.packet_alert("death mgr: check dead items clear pda done, ammo_types["..utils.to_str(ammo_types).."] loot["..utils.to_str(loot_count).."]") end
--[[	if ammo_types > 0 then				--110010
		local ammo_count = TB3D_Modders.loadout_ammo_loot or 2
		if ammo_count > 100 then ammo_count = 100 end
		for ammo, cnt in pairs(has_ammo) do
			create_ammo(self.npc, ammo, math_random(1, ammo_count))
		end
	end
--]]
	local give_art = (TB3D_Modders.give_art_on_death and has_alife_info("bun_antenna_off") and art_count == 0 and math_random(10) == 5)
	local spawn_rate = TB3D_Modders.pda_spawn_rate or 30				--109981
	if spawn_rate > 80 then spawn_rate = 80 end
	local loot_threshold = TB3D_Modders.death_loot_threshold or 4		--110010
	if community == "zombied" then
		if math_random(100) > 30 then
			give_some_stuff(self.npc, "bread_a", 1)
		end
		if give_art then
			give_some_stuff(self.npc, amk_anoms.get_art_type(0), 1)
		end
	elseif community == "bandit" then 							--109996
		if math_random(100) < 30 then
			alife():create("device_pda",
						self.npc:position(),
						self.npc:level_vertex_id(),
						self.npc:game_vertex_id(),
						self.npc:id())
		end
		if give_art then
			give_some_stuff(self.npc, amk_anoms.get_art_type(1), 1)
		end
	elseif community == "stalker" or community == "green" or community == "ecolog" or community == "humter" then
		if math_random(100) < spawn_rate then
			alife():create("device_pda",
						self.npc:position(),
						self.npc:level_vertex_id(),
						self.npc:game_vertex_id(),
						self.npc:id())
		end
		if give_art then
			give_some_stuff(self.npc, amk_anoms.get_art_type(2), 1)
		end
	elseif community ~= "arena_enemy" and community ~= "fotoman" then
		if not string_find(self.npc:name(), "dead_military_esc") then
			if math_random(100) < spawn_rate then
				alife():create("device_pda_npc",
						self.npc:position(),
						self.npc:level_vertex_id(),
						self.npc:game_vertex_id(),
						self.npc:id())
			end
		end
		if give_art then
			give_some_stuff(self.npc, amk_anoms.get_art_type(3), 1)
		end
	end
	if string_find(self.npc:name(), "military_ecolog_agro1") then		--Ivanshenko in agro
		give_some_stuff(self.npc, "bad_psy_helmet", 1)
	else
		local ini = self.npc:spawn_ini()
		if ini and ini:section_exist("dont_spawn_loot") == true then
			if TB3D_Modders.use_drop_message then TB3D_Services.packet_alert("death mgr: check_dead_items["..utils.to_str(self.npc:name()).."] dont_spawn_loot!!!!") end
		elseif loot_count < loot_threshold then			--110010
			spawn_random_loot(self.npc)									--109989, basic items from TB3D_loot.ltx
		end
	end
	if TB3D_Modders.use_drop_message then TB3D_Services.packet_alert("death mgr: check dead items done["..game.get_game_time():timeToString(game.CTime.TimeToMilisecs).."]") end
end

--109981, removed levels, just community now
-- communities ------------------------------------------------------------------
-- can change: stalker, monolith, military, killer, ecolog, dolg, freedom, bandit, zombied, green, nebo, lastday
-- no change: trader, stranger, arena_enemy, sniper, fotoman
---------------------------------------------------------------------------------
function drop_manager:check_npc_loadout()							--dynamic random loadouts (weapon and ammo only)
	local lname = level:name()
	local npc_name = self.npc:name()
	local commun = self.npc:character_community()
	if TB3D_Modders.use_loadout_message == true then
		TB3D_Services.packet_alert("death mgr: check_npc_loadout["..utils.to_str(npc_name).."] commun["..utils.to_str(commun).."]")
	end
	if npc_name == "gar_wounded_bandit" or npc_name == "prip_dok_arh" or npc_name == "doktor" then return end		--110008
	if commun == "trader" 													--never touch
	  or (commun == "fotoman" and lname == "l08u_brainlab")					--never touch, suspended in brain for photo so can't be armed
	  or commun == "sniper"													--never touch
	  --or commun == "zombied"												--never touch
	  or commun == "stranger"												--never touch, doctor
	  then 
		return
	elseif commun == "lastday" then
		if string_find(npc_name, "charactercommander") then return end		--109989
	elseif commun == "killer" then
		if string_find(npc_name, "dead_mono_labirint") then return end
	elseif commun == "dolg" then
		if string_find(npc_name, "val_prisoner_captive")
		  or string_find(npc_name, "val_sacrifice_victim")
		  or string_find(npc_name, "val_escort_captive") then 
			return
		end
	elseif commun == "bandit" then
		if string_find(npc_name, "val_escort_bandit_halfdead") then return end	--no weapon so does not pursue Bullet to the ambush
	elseif commun == "stalker" then
		if string_find(npc_name, "zemlyk")
		  or string_find(npc_name, "esc_shustryi")
		  or string_find(npc_name, "esc_vagon_wounded")
		  --or string_find(npc_name, "val_sos_wounded")							--needs one or is defensless against bandits and dogs
		  then 
			return
		end
	end
	counter = 0
	local item_in_slot
	local suit_id
	if has_alife_info("tb3d_force_loadouts") == true then
		if TB3D_Modders.use_loadout_message == true then
			TB3D_Services.packet_alert("death mgr: check_npc_loadout["..utils.to_str(npc_name).."] commun["..utils.to_str(commun).."] forced load out!!!!")
		end
		item_in_slot = self.npc:item_in_slot(1)
		if item_in_slot then
			item_in_slot:unload_magazine()
			dmx_mod.drop_item_to_inventory(1)
		end
		item_in_slot = nil
		item_in_slot = self.npc:item_in_slot(2)
		if item_in_slot then
			item_in_slot:unload_magazine()
			dmx_mod.drop_item_to_inventory(2)
		end
		function remove_weapons(npc, item)			--109981
			if item then
				if (item.clsid and IAmAWeapon[item:clsid()])
				  or (string_find(item:name(), "wpn_") and not string_find(item:name(), "binoc"))
				  or string_find(item:name(), "ammo_") then
					npc:drop_item(item)
					amk.remove_item(item)
				end
			end
			return true
		end
		self.npc:iterate_inventory(remove_weapons, self.npc)		--not binocs
	else
		if TB3D_Modders.use_loadout_message == true then
			TB3D_Services.packet_alert("death mgr: check_npc_loadout["..utils.to_str(npc_name).."] commun["..utils.to_str(commun).."] assign load out")
		end
		item_in_slot = self.npc:item_in_slot(1)
		if item_in_slot then
			counter = counter + 1
			--self.npc:activate_slot(1)
			if TB3D_Modders.use_loadout_message == true then
				TB3D_Services.packet_alert("death mgr: check_npc_loadout["..utils.to_str(npc_name).."] commun["..utils.to_str(commun).."] weapon in slot["..utils.to_str(item_in_slot:name()).."]")
			end
		end
		item_in_slot = nil
		item_in_slot = self.npc:item_in_slot(2)
		if item_in_slot then
			counter = counter + 1
			--self.npc:activate_slot(2)
			if TB3D_Modders.use_loadout_message == true then
				TB3D_Services.packet_alert("death mgr: check_npc_loadout["..utils.to_str(npc_name).."] commun["..utils.to_str(commun).."] weapon in slot["..utils.to_str(item_in_slot:name()).."]")
			end
		end
		function has_weapons(npc, item)					--109981
			if item then
				if (item.clsid and IAmAWeaponFireOnly[item:clsid()]) then
					counter = counter + 1
				elseif (string_find(item:name(), "wpn_")
				  and not string_find(item:name(), "binoc")
				  and not string_find(item:name(), "grenade")
				  and not string_find(item:name(), "_addon")) then
					counter = counter + 1
					return true
				end
			end
			return true
		end
		if counter == 0 then self.npc:iterate_inventory(has_weapons, self.npc) end
	end
	if counter == 0 then 													--109996, no weapon so dynamically assign loadout
--[[
		local min_cond = TB3D_Modders.min_weapon_cond								--109981
		if min_cond == nil or min_cond > 99 or min_cond < 0 then min_cond = 80 end
		item_in_slot = self.npc:item_in_slot(1)
		if item_in_slot then
			counter = counter + 1
			if TB3D_Modders.loadout_rand_cond == true then
				item_in_slot:set_condition(math_random(min_cond, 100)/100)
				suit_id = self.npc:get_current_outfit()
				if suit_id then suit_id:set_condition(math_random(min_cond, 100)/100) end
			end
		end
		item_in_slot = nil
		suit_id = nil
		item_in_slot = self.npc:item_in_slot(2)
		if item_in_slot then
			if TB3D_Modders.loadout_rand_cond == true then
				item_in_slot:set_condition(math_random(min_cond, 100)/100)
				suit_id = self.npc:get_current_outfit()
				if suit_id then suit_id:set_condition(math_random(min_cond, 100)/100) end
			end
		end
]]--
		local ammo_cnt = TB3D_Modders.loadout_ammo_count or 200						--109981, excess will be removed when npc dies
		if commun == "zombied" then
			give_weapon(self.npc, 2, "wpn_ak74")
			create_ammo(self.npc, "ammo_5.45x39_fmj", ammo_cnt)						--109981, so they don't run out too soon
			if TB3D_Modders.use_loadout_message == true then
				TB3D_Services.packet_alert("death mgr: ["..utils.to_str(npc_name).."] has loadout[zombied]")
			end
		elseif string_find(npc_name, "sniper") then									--Monolith snipers
			give_weapon(self.npc, 2, "wpn_svu")
			create_ammo(self.npc, "ammo_7.62x54_ap", ammo_cnt)
			if TB3D_Modders.use_loadout_message == true then
				TB3D_Services.packet_alert("death mgr: ["..utils.to_str(npc_name).."] has loadout[sniper]")
			end
		elseif string_find(npc_name, "gar_bandit_post_7") then						--garbage top of tunnel
			give_weapon(self.npc, 2, "wpn_toz34")
			create_ammo(self.npc, "ammo_12x70_buck", ammo_cnt)
			if TB3D_Modders.use_loadout_message == true then
				TB3D_Services.packet_alert("death mgr: ["..utils.to_str(npc_name).."] has loadout[toz34]")
			end
		elseif commun == "fotoman" then
			give_weapon(self.npc, 2, "wpn_pm")
			create_ammo(self.npc, "ammo_9x18_fmj", ammo_cnt)
			if TB3D_Modders.use_loadout_message == true then
				TB3D_Services.packet_alert("death mgr: ["..utils.to_str(npc_name).."] has loadout[fotoman pm]")
			end
		elseif npc_name == "pre_killers_baza_killer_walk" then						--110008
			if TB3D_Modders.use_loadout_message == true then
				TB3D_Services.packet_alert("death mgr: ["..utils.to_str(npc_name).."] loadout skipped")
			end
		else
			local ltx_max = 3
			local rank = self.npc:character_rank()			--109995, simplified process
			if rank > 999 then
				if rank > 1200 then ltx_max = 5 end
				rank = 1000
			elseif rank > 899 then
				if rank > 950 then ltx_max = 5 end
				rank = 900
			elseif rank > 599 then
				if rank > 650 then ltx_max = 5 end
				rank = 600
			elseif rank > 399 then
				if rank > 450 then ltx_max = 5 end
				rank = 400
			else
				if rank > 250 then ltx_max = 5 end
				rank = 200
			end
			local ltx_id = math_random(1, ltx_max)
			local ini_name = "inventory\\"..utils.to_str(commun).."\\"..utils.to_str(rank).."\\"..utils.to_str(ltx_id)..".ltx" 		--109980, removed level
			local ini = ini_file(ini_name) 
			if ini and ini:section_exist("loadout") then									--make sure it is a loadout file	
				local item
				if TB3D_Modders.use_loadout_message == true then
					TB3D_Services.packet_alert("death mgr: ["..utils.to_str(npc_name).."] has loadout["..utils.to_str(ini_name).."]")
				end
				if ini:section_exist("weapon") then	
					if ini:line_exist("weapon","secondary") then
						item = ini:r_string("weapon","secondary")
						if item and item ~= "" then
							give_weapon(self.npc, 1, item)
						end
					end
					if ini:line_exist("weapon","primary") then
						item = ini:r_string("weapon","primary")
						if item and item ~= "" then
							give_weapon(self.npc, 2, item)
						end
					end
				end
				if ini:section_exist("ammo") then	
					if ini:line_exist("ammo","primary") then
						item = ini:r_string("ammo","primary")
						if item and item ~= "" then
							create_ammo(self.npc, item, ammo_cnt)
						end
					end
					if ini:line_exist("ammo","secondary") then
						item = ini:r_string("ammo","secondary")
						if item and item ~= "" then
							create_ammo(self.npc, item, math_random(10))
						end
					end
				end
				if ini:section_exist("extras") then
					for cnt = 1, 10 do
						if ini:line_exist("extras", tostring(cnt)) then
							item = ini:r_string("extras", tostring(cnt))
							if item and item ~= "" then
								if string_find(item, "ammo") then
									if string_find(item, "vog-25") then
										create_ammo(self.npc, item, math_random(0,4))
									else
										create_ammo(self.npc, item, math_random(10))
									end
								elseif string_find(item, "wpn_") then
									if math_random(1,50) == 25 then give_weapon(self.npc, 0, item) end
								elseif string_find(item, "grenade") then
									give_some_stuff(self.npc, item, math_random(0,2))
								else
									give_some_stuff(self.npc, item, math_random(0,ltx_max))
								end
							end
						else
							break		--must be consecutive
						end
					end
				end
			elseif TB3D_Modders.use_loadout_message == true then
				TB3D_Services.packet_alert("death mgr: ["..utils.to_str(npc_name).."] loadout["..utils.to_str(ini_name).."] not found!!!")
			end
			ini_name = ""
			ini = nil
		end
	end
	if TB3D_Modders.use_loadout_message == true then
		TB3D_Services.packet_alert("death mgr: check_npc_loadout done["..game.get_game_time():timeToString(game.CTime.TimeToMilisecs).."]")
	end
end

--================================================== services =======================================================
function create_ammo(npc, section, number)
	--TB3D_Services.packet_alert("death mgr: create ammo["..utils.to_str(npc:name()).."] sect["..utils.to_str(section).."] amount["..utils.to_str(number).."]")
	local position = npc:position()
	local lvi = npc:level_vertex_id()
	local gvi = npc:game_vertex_id()
	local pid = npc:id()
	se_respawn.create_ammo(section, position, lvi, gvi, pid, number)
end

function give_some_stuff(npc, section, number)
	local position = npc:position()
	local lvi = npc:level_vertex_id()
	local gvi = npc:game_vertex_id()
	local pid = npc:id()
	if number > 1 then
		for i=1,number do
			alife():create(section,
							position,
							lvi,
							gvi,
							pid)
		end
	else
		alife():create(section,
						position,
						lvi,
						gvi,
						pid)
	end
end

function give_weapon(npc, slot, item)
	alife():create(item, npc:position(),
						 npc:level_vertex_id(),
						 npc:game_vertex_id(),
						 npc:id())
	if slot == 2 then			--activate main weapon
		npc:activate_slot(slot)
	--elseif slot == 1 then		--activate secondary
	--else						--in backpack
	end
end

function spawn_random_loot(corpse)						--109981, no weapons or ammo given here
	local loot_count = TB3D_Modders.loot_option or 1
	if loot_count > 5 then loot_count = 5 end
	if TB3D_Modders.use_drop_message then TB3D_Services.packet_alert("death mgr: spawn_random_loot["..utils.to_str(corpse:name()).."] loot count["..utils.to_str(loot_count).."] start") end
	if loot_count > 0 then
		local total_groups
		local str = ""
		local ini = ini_file("misc\\TB3D_loot.ltx")
		if ini then				--110010
			if ini:section_exist("groups") and ini:line_exist("groups","total") then
				str = tostring(ini:r_string("groups","total"))
			end
			if str and str ~= "" then total_groups = tonumber(str) end
			if total_groups == nil or total_groups < 1 then total_groups = 20 end
			local loot_group = math_random(total_groups)
			local count1 = math_random(0,loot_count) 
			local count2 = math_random(0,loot_count) 
			if TB3D_Modders.use_drop_message then TB3D_Services.packet_alert("death mgr: spawn_random_loot["..utils.to_str(corpse:name()).."] group["..utils.to_str(loot_group).."] 1["..utils.to_str(count1).."] 2["..utils.to_str(count2).."]") end
			if ini:section_exist(tostring(loot_group)) then	
				local cnt = 1					--110010
				while cnt > 0 do
					if ini:line_exist(loot_group,tostring(cnt)) then
						str = tostring(ini:r_string(loot_group,tostring(cnt)))
						if str == nil or str == "" then
							cnt = 0
						else
							if math_random(10) < 6 then
								for i = 1, count1 do
									alife():create(str,	
										corpse:position(),
										corpse:level_vertex_id(),	
										corpse:game_vertex_id(), 
										corpse:id())
								end
							else
								for i = 1, count2 do
									alife():create(str,	
										corpse:position(),
										corpse:level_vertex_id(),	
										corpse:game_vertex_id(), 
										corpse:id())
								end
							end
							cnt = cnt+1
						end
					else
						cnt = 0
					end
				end
			else			--110010
				TB3D_Services.packet_alert("death mgr: spawn_random_loot section NOT FOUND!!!!")
			end
			str = ""
			ini = nil
		else							--110010
			TB3D_Services.packet_alert("death mgr: spawn_random_loot[TB3D_loot.ltx] NOT FOUND!!!!")
		end
	end
end