--TB3D 1.0.9.9.2.6
function my_ver() return "1.0.9.9.2.6" end
--------------------------------------------------------------------------------------------------
-- Kotrolya scheme for the territory
----------------------------------------------------------------------------------------------------

territory = {}
---------------------------------------------------------------------------------------------------------------------
class "action_territory"
function action_territory:__init(obj, storage)
	self.object = obj
	self.st = storage
end
function action_territory:update(delta)
	if xr_logic.try_switch_to_another_section(self.object, self.st, db.actor) then
		return
	end	
end
function action_territory:hit_callback(obj, amount, local_direction, who, bone_index)
	if who:id() == db.actor:id() then
		if obj:relation(db.actor) ~= game_object.enemy then
			if TB3D_Modders.use_combat_message then TB3D_Services.packet_alert("sr territory: HIT_CALLBACK["..obj:name().."] by["..who:name().."] amount["..utils.to_str(amount).."] bone["..utils.to_str(bone_index).."] hit nuetral") end
			xr_logic.pstor_store(obj,"wasenemy",false) -- Shot in a neutral or a friend. remember
			xr_logic.pick_section_from_condlist(db.actor, self.object, self.st.territory_hit)
		end	
	end
end
function action_territory:death_callback(victim, who)
	if who:id() == db.actor:id() then
		if TB3D_Modders.use_combat_message then TB3D_Services.packet_alert("sr territory: DEATH_CALLBACK["..victim:name().."] by["..who:name().."]") end
		if xr_logic.pstor_retrieve(victim,"wasenemy",true) then
			if TB3D_Modders.Global_Debug then TB3D_Services.info_alert("SR TERRITORY: preventing reaction to territory kill for["..utils.to_str(victim:name()).."]") end
			return -- HS killed the enemy. Will not be offended
		end
		--if victim:relation(db.actor) == game_object.enemy then
			--return
		--end	
		xr_logic.pick_section_from_condlist(db.actor, self.object, self.st.territory_death)
	end
end

---------------------------------------------------------------------------------------------------------------------
function add_to_binder(obj, ini, scheme, section, storage)
	local new_action = action_territory(obj, storage)
	-- Register all the actions, in which the method must be called reset_scheme settings change the scheme:
	xr_logic.subscribe_action_for_events(obj, storage, new_action)
	sr_territory.subscribe_territory_for_events(obj, new_action)
end

function set_scheme(obj, ini, scheme, section, gulag_name)
	local st = xr_logic.assign_storage_and_bind(obj, ini, scheme, section)
	st.logic = xr_logic.cfg_get_switch_conditions(ini, section, obj)
	local tmp = utils.cfg_get_string(ini, section, "territory_hit", obj, false, "")
	if tmp then
		st.territory_hit = xr_logic.parse_condlist(obj, section, "territory_hit", tmp)
	else
		st.territory_hit = xr_logic.parse_condlist(obj, section, "territory_hit", "")
	end
	tmp = utils.cfg_get_string(ini, section, "territory_death", obj, false, "")
	if tmp then
		st.territory_death = xr_logic.parse_condlist(obj, section, "territory_death", tmp)
	else
		st.territory_death = xr_logic.parse_condlist(obj, section, "territory_death", "")
	end
end

function issue_event(npc, type, ...)
	local arg = {...}
	if type == "hit_callback" then
		for k,v in pairs(territory) do
			v.hit_callback(v, unpack(arg))
		end
	end
	if type == "death_callback" then
		for k,v in pairs(territory) do
			v.death_callback(v, unpack(arg))
		end
	end
end

function subscribe_territory_for_events(obj, new_action)
	if territory[obj:id()] == nil then
		territory[obj:id()] = new_action
	end
end
