--TB3D 1.1.0.0.0.5 fixed correct_position as it caused tearing from bad lvids, dist_limit, iterate inventory, generic_m_story_id,
-- better cleaner and evaluate, obj_is_protected, checkcorpse, zombie list dcity doc, glavny, radar, petruha
function my_ver() return "1.1.0.0.0.5" end
-- Red75 (c) 2008
-- Marauder scheme v 1.1
-- Part of AMK MOD

local math_random = math.random
local math_sqrt = math.sqrt
local string_find = string.find

evid_see_stuff=6931
evid_near_stuff=evid_see_stuff+1
evid_see_body=evid_see_stuff+2
evid_position_corrected=evid_see_stuff+3

actid_reach_item=evid_see_stuff
actid_grab_item=evid_see_stuff+1
actid_grab_body=evid_see_stuff+2
actid_correct_position=evid_see_stuff+3

-- Causes closure times period, obj[var] stores during the next trip
function timed(obj,var,period,closure)
	if obj[var] and obj[var]<time_global() then
		obj[var]=time_global()+period
		closure()
	elseif not obj[var] then
		obj[var]=time_global()+period
--		closure()
	end
end

function trigger_timed(obj,var)
	obj[var]=time_global()
end

local disabled_objects={}

function checkCorpse(obj)
	if db.check_corpse_looted(obj) ~= nil then
		return false
	else
		local obj_id = obj:id()
		local cnt, prt = 0,0
		obj:iterate_inventory(function (dummy, item) if protected_items.obj_is_protected(obj) == false then cnt = cnt + 1 else prt = prt +1 end end, nil)
		if cnt > 0 then
			--db.set_corpse_checked(obj, prt)
			return true
		else
			db.set_corpse_checked(obj, prt)
			return false
		end
	end
end

function checkLooter(obj)				--109975
    local obj_id = obj:id()
	local cnt=0
	obj:iterate_inventory(function (dummy, item) if obj then cnt=cnt+1 end	end, nil)
	return cnt < 10
end

local valuable_clsid={
    [clsid.art_bast_artefact]=true,
    [clsid.art_black_drops]=true,
    [clsid.art_dummy]=true,
    [clsid.art_electric_ball]=true,
    [clsid.art_faded_ball]=true,
    [clsid.art_galantine]=true,
    [clsid.art_gravi]=true,
    [clsid.art_gravi_black]=true,
    [clsid.art_mercury_ball]=true,
    [clsid.art_needles]=true,
    [clsid.art_rusty_hair]=true,
    [clsid.art_thorn]=true,
    [clsid.art_zuda]=true,
    [clsid.artefact_s]=true,
    --[clsid.device_detector_simple]=true,
    --[clsid.device_pda]=true,
    --[clsid.device_torch_s]=true,
    [clsid.equ_exo]=true,
    [clsid.equ_military]=true,
    [clsid.equ_scientific]=true,
    [clsid.equ_stalker_s]=true,
    [clsid.obj_antirad]=true,
    --[clsid.obj_attachable]=true,			--109989, gas cannisters
    --[clsid.obj_bandage]=true,
    --[clsid.obj_bolt]=true,
    --[clsid.obj_bottle]=true,
    --[clsid.obj_food]=true,
    [clsid.obj_medkit]=true,
    [clsid.wpn_ak74_s]=true,
    [clsid.wpn_ammo]=true,
    [clsid.wpn_ammo_m209]=true,
    [clsid.wpn_ammo_og7b]=true,
    [clsid.wpn_ammo_vog25]=true,
    --[clsid.wpn_binocular_s]=true,
    [clsid.wpn_bm16_s]=true,
    [clsid.wpn_fn2000]=true,
    --[clsid.wpn_fort]=true,
    [clsid.wpn_groza_s]=true,
    [clsid.wpn_hpsa_s]=true,
    --[clsid.wpn_knife_s]=true,
    [clsid.wpn_lr300_s]=true,
    [clsid.wpn_pm_s]=true,
    [clsid.wpn_rg6_s]=true,
    [clsid.wpn_rpg7_s]=true,
    [clsid.wpn_scope_s]=true,
    [clsid.wpn_shotgun_s]=true,
    [clsid.wpn_silencer]=true,
    [clsid.wpn_svd_s]=true,
    [clsid.wpn_svu_s]=true,
    [clsid.wpn_usp45_s]=true,
    [clsid.wpn_val_s]=true,
    [clsid.wpn_vintorez_s]=true,
    [clsid.wpn_walther_s]=true,
    [clsid.wpn_wmagaz]=true,
    [clsid.wpn_wmaggl]=true
}

local obj_owner={}

--[[function bgwith(str,ptr)
	local ps=string_find(str,ptr)
 return ps~=nil and ps==1
end]]

function isValuable(obj)
	if IAmAStalker[obj:clsid()] or IAmAMonster[obj:clsid()] then
		 if obj:alive() then return false else return checkCorpse(obj) end		--looks to see if has protected item
	elseif protected_items.obj_is_protected(obj, "items_protected", "exactly") == false then 
		local sec=obj:section()
        if sec then
            if sec=="amk_metka" then
				return false
			end
        end
		return true			--all other objects so grab execute can clean them
    end
    return false
end

function claimGObject(npc,st,obj)
	if protected_items.obj_is_protected(obj) == false then
		if st.grabitemid then
			obj_owner[st.grabitemid]=nil
		end
		st.grabitemid=obj:id()
		obj_owner[obj:id()]=npc:id()
	else
		TB3D_Services.packet_alert("watcher act: claimgobject["..utils.to_str(obj:section()).."] protected")
	end
end

function freeGObject(st)
	if st.grabitemid then
		obj_owner[st.grabitemid]=nil
		st.grabitemid=nil
	end
end

function clearGObject(st)
	st.grabitemid=nil
end

function getGObject(st)
	if st.grabitemid then
		local ret=level.object_by_id(st.grabitemid)
		if ret==nil then
			st.grabitemid=nil
		end 
		return ret
	end
	return nil
end

function mypGObject(npc,st)
	return st.grabitemid~=nil and obj_owner[st.grabitemid]~=nil and obj_owner[st.grabitemid]==npc:id()
end

class "ev_see_stuff" (property_evaluator)

function ev_see_stuff:__init(st,name) super(nil, name)
	self.st=st
end

local bad_dangers={
	[danger_object.hit]=true,
	[danger_object.attacked]=true,
	[danger_object.bullet_ricochet]=true,
	[danger_object.grenade]=true,
	[danger_object.entity_death]=true,
	[danger_object.enemy_sound]=true
}

local inertion_time=30000

function bad_danger(npc)
	local danger=npc:best_danger()
	if danger then
		return bad_dangers[danger:type()] and time_global()-danger:time()<inertion_time
	end
	return false
end

function ev_see_stuff:evaluate()
	local npc=self.object
	local res=getGObject(self.st)~=nil
	if npc then
		local npc_id = npc:id()
		local actsch=db.storage[npc_id].active_scheme
		if actsch and db.actor then
			if xr_logic.try_switch_to_another_section(npc, db.storage[npc_id][actsch], db.actor) then
				if res then freeGObject(self.st) end
				return false	--109989, finish existing scheme first
			end
		end
		local act_sec=db.storage[npc_id].active_section or ""
		if string_find(act_sec,"^combat") or (not npc:alive()) or xr_wounded.is_wounded(npc) or npc:best_enemy() or
			bad_danger(npc) or (actsch and db.storage[npc_id][actsch].no_loot) then
			if res then freeGObject(self.st) end
			return false
		end 
		if res and self.st.block_search then return true end
		local skip_all = false
		timed( self.st,"tm1",TB3D_Modders.search_min_time+(math_random()*TB3D_Modders.search_rand_time),
			function()
				local function check_item(o)
					local obj=o:object()
					local obj_id = obj:id()
					--TB3D_Services.packet_alert("watcher act: see stuff eval["..npc:name().."] object["..obj:name().."]")
					if obj_owner[obj_id] and (level.object_by_id(obj_owner[obj_id])==nil or level.object_by_id(obj_owner[obj_id]):alive()==false) then
						obj_owner[obj_id]=nil
					end
					if IAmAStalker[obj:clsid()] then
						local gi_comm
						local res_comm
						if obj.character_community then
							res_comm = obj:character_community()
						else
							res_comm = ""
						end
						if npc.character_community then
							gi_comm = npc:character_community()
						else
							gi_comm = "_"
						end
						--TB3D_Services.packet_alert("watcher act: see stuff eval["..gi_comm.."] object["..res_comm.."]")
						if not TB3D_Modders.npc_loot_own_community and gi_comm == res_comm then											--110005, don't loot same community
							skip_all = true
						end
					end
					if not skip_all then
						local min_dist = TB3D_Modders.search_actor_dist or 6
						if obj:section() ~= "m_trader" and obj:name() ~= "single_player" then
							if db.actor and db.actor:alive() and db.actor:position():distance_to_sqr(obj:position()) > min_dist then
								if (not self.st.disabled_objects[obj_id])
								  and (obj:parent()==nil or (not IAmAStalker[obj:parent():clsid()] or not IAmAMonster[obj:parent():clsid()]))
								  and (obj_owner[obj_id]==nil or obj_owner[obj_id]==npc_id)
								  and npc:accessible(obj:level_vertex_id()) then
									if isValuable(obj) then
										if TB3D_Modders.use_looting_message then TB3D_Services.packet_alert("watcher act: see stuff eval["..npc:name().."] object["..obj:name().."] valuable[true]") end
										local max_dist
										if string_find(act_sec,"^camper") or string_find(act_sec,"^danger") then
											max_dist = TB3D_Modders.search_dusy_dist or 5
										else
											max_dist = TB3D_Modders.search_max_dist or 60
										end
										if level.vertex_position(obj:level_vertex_id()):distance_to(npc:position()) < max_dist then
											if TB3D_Modders.use_looting_message then TB3D_Services.packet_alert("watcher act: see stuff eval["..npc:name().."] object["..obj:name().."] go claim") end
											claimGObject(npc,self.st,obj)
											res=true
										end
									end
								end
							end
						end
					end
				end															-- end local function - check_item
				for o in npc:memory_visible_objects() do check_item(o) if skip_all then break end end
				for o in npc:memory_sound_objects() do check_item(o) end
			end																-- end timed function
		)
		return res
	end
	--if res then freeGObject(self.st) res = false end
	return res
end

 class "ev_near_stuff" (property_evaluator)

 function ev_near_stuff:__init(st,name) super(nil, name)
	self.st=st
 end

function ev_near_stuff:evaluate()
	local npc=self.object
	local gi=getGObject(self.st)
	if gi then
		if self.st.dest_lvid then
			return npc:level_vertex_id()==self.st.dest_lvid
		end
		return level.vertex_position(gi:level_vertex_id()):distance_to_sqr(npc:position())<1
	end
	return false
end

class "ev_see_body" (property_evaluator)

function ev_see_body:__init(st) super(nil, "ev_see_body")
	self.st=st
end

function ev_see_body:evaluate()
	local npc=self.object
	if npc then
		local npc_comm
		if npc.character_community then npc_comm = npc:character_community() else npc_comm "" end
		local gi=getGObject(self.st)
		if gi and db.check_corpse_looted(gi) == nil then
			if IAmAStalker[gi:clsid()] then
				return true
			elseif IAmAMonster[gi:clsid()] then
				return true
			end
		end
	end
	return false
end

class "ev_position_corrected" (property_evaluator)

function ev_position_corrected:__init(st) super(nil, "ev_position_corrected")
	self.st=st
end

function ev_position_corrected:evaluate()
--    local npc=self.object
	return self.st.position_corrected==true
end

class "act_grab_item" (action_base)

function act_grab_item:__init (action_name, st) super (nil, action_name)
	self.st = st
end

function act_grab_item:initialize()
	action_base.initialize(self)
	local npc=self.object
	npc:set_item(object.idle,nil)
	npc:set_movement_type(move.walk)
	npc:set_mental_state(anim.danger)
	npc:set_body_state(move.crouch)
	npc:movement_enabled(true)
	local gi=getGObject(self.st)
	npc:set_sight(look.danger,nil,0)
	self.st.block_search=true
	if gi then
		if(IAmAStalker[gi:clsid()] or IAmAMonster[gi:clsid()]) then
			self.tt=time_global()+3000
		else
			self.tt=time_global()+1000
			utils.send_to_nearest_accessible_vertex(npc,gi:level_vertex_id())
		end
	end
	self.force=vector():set(0,0,0)
end

function act_grab_item:execute()
	if TB3D_Modders.Global_Debug == true then 
		TB3D_Services.info_alert("watcher act: grab item execute")
	end
	action_base.execute(self)
	local npc=self.object
	local gi=getGObject(self.st)
	local can_take = checkLooter(npc)									--if has more than 10 items then don't keep
	if gi and protected_items.obj_is_protected(gi) == false then
		local gip = gi:parent()
		if self.tt<time_global() then
			if gip==nil then										--no parent so treat as memory object
				if can_take then
					if IAmAWeapon[gi:clsid()] then
						if gi:condition()>0.90 then						--only keep good weapons, helps reduce mem consumption
							amk.spawn_item_in_inv(gi:section(),npc)
						end
					elseif valuable_clsid[gi:clsid()] then				--keep only certain items
						amk.spawn_item_in_inv(gi:section(),npc)
					end
				end
				amk.remove_item(gi)										--remove so npc stop picking up and also conserve memory
			else --if valuable_clsid[gi:clsid()] then					--has parent, only transfer certain items
				--if can_take then
					gip:transfer_item(gi,npc)
					npc:enable_memory_object(gi,false)
				--end
			end
			clearGObject(self.st)									--item does not exist in memory, only in npc inv list so just clear it from his list
		end
	end
	if TB3D_Modders.Global_Debug == true then 
	TB3D_Services.info_alert("watcher act: grab item execute done") end
end

function act_grab_item:finalize()
	local npc=self.object
	self.st.block_search=nil
	npc:set_sight(look.danger,nil,0)
	trigger_timed(self.st,"tm1")
	self.st.dest_lvid=nil -- Clear adjusted destination
	action_base.finalize(self)
end

class "act_grab_body" (action_base)

function act_grab_body:__init (st) super (nil, "act_grab_body")
	self.st = st
end

function act_grab_body:initialize()
	action_base.initialize(self)
	local npc=self.object
	local gi=getGObject(self.st)
	self.st.block_search=true
	if gi and protected_items.obj_is_protected(gi) == false then
		self.tt=time_global()+6000
		state_mgr.set_state(npc,"search",nil,nil,{look_object=gi})
	else
		self.st.dest_lvid=nil
	end
end

function act_grab_body:execute()
	--TB3D_Services.info_alert("watcher act: grab body execute")
	action_base.execute(self)
	local npc=self.object
	local gi=getGObject(self.st)
	if gi then
		if self.tt<time_global() then
			if gi:parent()==nil then							--this transfers correctly
				if TB3D_Modders.use_looting_message then TB3D_Services.packet_alert("watcher act: grab body iterate inventory") end
				local prt = 0
				gi:iterate_inventory(function(d,item)
					if protected_items.obj_is_protected(item)==false then
						if valuable_clsid[item:clsid()] then
							gi:transfer_item(item,npc)
						else
							gi:drop_item(item)
							amk.remove_item(item)
						end
					else
						prt = prt + 1
					end
				end, nil)
				local num=gi:money() 
				if num and num >0 then 
					local deadmoney = num
					local gi_rank
					gi_rank = ranks.get_obj_rank_name(gi)
					if gi_rank ~= nil then
						if gi_rank == "novice" and deadmoney >=70 then
							deadmoney=math_random(25,70)    
						elseif gi_rank == "experienced" and deadmoney >=150 then
							deadmoney=math_random(50,150)  
						elseif gi_rank == "veteran" and deadmoney >=220 then
							deadmoney=math_random(100,220) 
						elseif gi_rank == "master" and deadmoney >=300 then
							deadmoney=math_random(200,300)  
						end
					end
					npc:give_money(deadmoney) 
					if TB3D_Modders.log_game_stats == true then game_stats.money_quest_update(deadmoney) end
					gi:give_money(-num) 
					if TB3D_Modders.log_game_stats == true then game_stats.money_quest_update(-num) end
				end
				db.set_corpse_checked(gi, prt)
			end
			-- Here it is impossible to release the object. transfer_item asynchronously. Therefore, we do clearGObject
			clearGObject(self.st)
		end
	else
		self.st.dest_lvid=nil
	end
end

function act_grab_body:finalize()
	local npc=self.object
	self.st.block_search=nil
	trigger_timed(self.st,"tm1")
	self.st.dest_lvid=nil -- Clear adjusted destination
	action_base.finalize(self)
	--collectgarbage("collect")										-- force memory cleanup
end

function correct_position(gi,npc)
	if IAmAStalker[gi:clsid()] then
		-- Calculate the vector difference between the coordinates of the bone and level vertex. Trying to find a level vertex closest to the bone
		local diff=gi:bone_position("bip01_head"):sub(level.vertex_position(gi:level_vertex_id()))
		local len=diff:magnitude()
		local diffp=vector():set(diff.z,0,-diff.x):mul(0.5)
		-- Move the target point to one side to the NPC not climb kicking a corpse
		diff:add(diffp)
		--TB3D_Services.info_alert("watcher act: correct position diff["..utils.to_str(diff.x)..","..utils.to_str(diff.y)..","..utils.to_str(diff.z).."] len["..utils.to_str(len).."]")
		return npc:vertex_in_direction(gi:level_vertex_id(),diff,len)
	else
		return gi:level_vertex_id()
	end
end

class "act_reach_item" (action_base)

function act_reach_item:__init (action_name, st) super (nil, action_name)
	self.st = st
end

function act_reach_item:initialize()
	action_base.initialize(self)
	local npc=self.object
	local gi=getGObject(self.st)
	self.st.dest_lvid=nil
	self.tgt_lvid=0
	if gi then
		if npc:accessible(gi:level_vertex_id()) then
			npc:set_detail_path_type(move.curve)
			npc:set_path_type(game_object.level_path)
			if npc:best_danger() and time_global()-npc:best_danger():time()<inertion_time then
				npc:set_mental_state(anim.danger)
				npc:set_body_state(move.crouch)
				npc:set_movement_type(move.walk)
			else 
				npc:set_body_state(move.standing)
				npc:set_mental_state(anim.free)
				npc:set_movement_type(move.walk)
			end
			npc:movement_enabled(true)
            --if npc:best_weapon() and IAmAWeapon[npc:best_weapon():clsid()] then
            --end
			npc:set_sight(look.danger,nil,0)
			if TB3D_Modders.Global_Debug == true then TB3D_Services.info_alert("watcher act: reach item init correcting position") end
			self.st.dest_lvid=correct_position(gi,npc)
			self.tgt_lvid=gi:level_vertex_id()
			npc:set_dest_level_vertex_id(self.st.dest_lvid)
		else
			freeGObject(self.st)
		end
	end
	self.ct=time_global()
	self.clvid=npc:level_vertex_id()
	self.st.position_corrected=false
end

function act_reach_item:execute()
	--TB3D_Services.info_alert("watcher act: reach item execute")
	action_base.execute(self)
	local npc=self.object
	local gi=getGObject(self.st)
	if gi and gi:parent()~=nil then
		-- HS took the goodies. You can add a zoom in on the HS.
		self.st.dest_lvid=nil
		freeGObject(self.st)
	elseif gi then
		if self.clvid==npc:level_vertex_id() then
			if time_global()-self.ct>10000 then
				self.st.disabled_objects[gi:id()]=true
				self.st.dest_lvid=nil
				freeGObject(self.st)
			end
		else
			self.clvid=npc:level_vertex_id()
			self.ct=time_global()
		end
		if self.tgt_lvid~=gi:level_vertex_id() then
			if TB3D_Modders.Global_Debug == true then TB3D_Services.info_alert("watcher act: reach item execute correcting position") end
			self.tgt_lvid=gi:level_vertex_id()
			self.st.dest_lvid=correct_position(gi,npc)
			npc:set_dest_level_vertex_id(self.st.dest_lvid)
		end
	end
end

function add_to_binder(object, char_ini, scheme, section, st)
	local npc=object
	st.disabled_objects={}
	local manager = object:motivation_action_manager()
	local prop_idlecombat=xr_evaluators_id.state_mgr + 3
	local prop_contact=xr_evaluators_id.stohe_meet_base + 1
	--TB3D_Services.packet_alert("watcher act: npc["..utils.to_str(npc:name()).."] story id["..utils.to_str(npc:story_id()).."]")
	if npc:story_id() ~= generic_m_story_id or npc_no_looting(npc) then				--109989
		manager:add_evaluator(evid_see_stuff, property_evaluator_const(false))
		manager:add_evaluator(evid_see_body, property_evaluator_const(false))
		manager:add_evaluator(evid_near_stuff, property_evaluator_const(false))
		manager:add_evaluator(evid_position_corrected, property_evaluator_const(false))
	else
		manager:add_evaluator(evid_see_stuff, ev_see_stuff(st,"ev_see_stuff"))
		manager:add_evaluator(evid_see_body, ev_see_body(st))
		manager:add_evaluator(evid_position_corrected, ev_position_corrected(st))
		manager:add_evaluator(evid_near_stuff, ev_near_stuff(st,"ev_near_stuff"))
		local action = act_grab_item("act_grab_item", st)
		action:add_precondition(world_property(stalker_ids.property_alive,true))
		action:add_precondition(world_property(stalker_ids.property_enemy,false))
		action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))
		action:add_precondition(world_property(blowout_scheme.evid_anomaly,false))
		action:add_precondition(world_property(blowout_scheme.evid_blowout,false))
		action:add_precondition(world_property(evid_see_stuff,true))
		action:add_precondition(world_property(evid_near_stuff,true))
		action:add_precondition(world_property(evid_see_body,false))
		action:add_precondition(world_property(prop_idlecombat,true)) -- disable to State Manager
		action:add_effect(world_property(evid_near_stuff, false))
		action:add_effect(world_property(evid_see_stuff, false))
		action:add_effect(world_property(evid_see_body,true)) -- to switch to a search of the corpse
		manager:add_action (actid_grab_item, action)
		action = act_grab_body(st)
		action:add_precondition(world_property(stalker_ids.property_alive,true))
		action:add_precondition(world_property(stalker_ids.property_enemy,false))
		action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))
		action:add_precondition(world_property(blowout_scheme.evid_anomaly,false))
		action:add_precondition(world_property(blowout_scheme.evid_blowout,false))
		action:add_precondition(world_property(evid_see_stuff,true))
		action:add_precondition(world_property(evid_see_body,true))
		action:add_precondition(world_property(evid_near_stuff,true))
		action:add_effect(world_property(evid_near_stuff, false))
		action:add_effect(world_property(evid_see_stuff, false))
		action:add_effect(world_property(evid_see_body,false))
		manager:add_action (actid_grab_body, action)
		action = act_reach_item("act_reach_item", st)
		action:add_precondition(world_property(stalker_ids.property_alive,true))
		action:add_precondition(world_property(stalker_ids.property_enemy,false))
		action:add_precondition(world_property(prop_contact,false))
		action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))
		action:add_precondition(world_property(blowout_scheme.evid_anomaly,false))
		action:add_precondition(world_property(blowout_scheme.evid_blowout,false))
		action:add_precondition(world_property(evid_see_stuff,true))
		action:add_precondition(world_property(evid_near_stuff,false))
		action:add_precondition(world_property(prop_idlecombat,true))
		action:add_effect (world_property(evid_near_stuff, true))
		manager:add_action (actid_reach_item, action)
		action = manager:action(xr_actions_id.alife)
		action:add_precondition(world_property(evid_see_stuff,false))
		action = manager:action(stalker_ids.action_danger_planner)
		action:add_precondition(world_property(evid_see_stuff,false))
	end
end

function set_scheme(npc, ini, scheme, section) local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
	st.ini=ini
end 

function npc_no_looting(npc)
	local comm =  npc:character_community()
	local name = npc:name()
	local profile_name = npc:profile_name()
	return (
		comm == "zombied"
		or comm == "trader"
		or comm == "fotoman"						--109976
		or comm == "stalker_antisniper"				--109989, Dyak, ...
		or comm == "stalker_sakharov"				--109989, Ghost, Fritz, Stargazer, ...
		or comm == "arena_enemy"
		or profile_name == "Syslov"
		or profile_name == "Kombat"
		or profile_name == "Shadows"
		or profile_name == "Mudri"
		or profile_name == "Grozn"
		or profile_name == "Alex"
		or name =="esc_novice_attacker1"							--110004, petruha wanders toward bridge
		or name =="agr_defector_stalker1"
		or name =="agr_ratcatcher"									--109989, deserter in swamp
		or name =="gar_dm_novice"									--109989, yurik
		or name =="gar_hellcar_group_1"								--109989, need to stay in positions for bes quest
		or name =="gar_hellcar_group_2"
		or name =="gar_stalker_0006"								--109989, need to stay in position for bes quest
		or name =="gar_stalker_0007"								--109989, Vampire
		or name =="mil_stalker0012"
		or name =="brat_luis"										--109989, brother luis
		or name =="agr_krot"										--109977, mole
		or name =="yantar_ecolog_general" 							-- mad at the Military and Sakharov
		or name =="mil_freedom_member0021" 							-- Miser into a zombie!
		or name =="dcity_dok_bolot"									-- 109993, dcity doctor
		or name =="dead_city_molniy"								-- 110004, panther
		or name =="dcity_parfumer"									-- 110004, need stay in position
		or name =="andersen"
		or name =="zemlyk"
		or name =="glavny"											-- 109998, lab x14
		or string_find(name, "^marsh_nebo_")						-- 109989, tend to pick up everything in swamp
		or string_find(name, "^agr_factory_")						-- 109989, messes with battle
		or string_find(name, "^bar_stalker_")						-- 109989, get too far away from buildings
		or string_find(name, "^rad_ambush")							-- 109989, loot dead scientists
		or string_find(name, "^mil_freedom_barier_respawn_")		-- 109989, wander into battle area before attack
		or string_find(name, "^nebo_exit")							-- 109989
		or string_find(name, "^esc_blokpost")						-- 109989, moved from evaluator
		or string_find(name, "^esc_bridge_soldier")
		or string_find(name, "^amk_embankment_soldat")
		or string_find(name, "^gar_bandit_stroyka")
		or string_find(name, "^rad_stalker")						-- 110002, interferes with assault on pripyat exit
		or string_find(name, "^generators_")						-- 110003, village and lab areas
		or string_find(name, "^pred_baza_")							-- 110004, makes base attack too easy
		or string_find(name, "^predbannik_")						-- 110004
		or string_find(name, "^stalker_bandit_")					-- 110005, error in visual
		)
end