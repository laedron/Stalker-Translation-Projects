-- TB3D 1.1.0.0.1.0 fixed rucksack, added sleep anytime option, The Collector, changed versioning in first run, optimized,
-- added debug messages, added forced GC, fixed hud options, added blowout type 5, collector start, dmx135, chgd respawner messeges, news,
-- protected respawner, removed amk blood splatter, hit styles, removed kill actor from radar fix and added health-0.01,
-- moved connect news, labx8 door, chgd beacon drop, added auto vis dist, removed weather types,
-- moved spawn_star to taynik_spawn, added blood to hud opts, added ingame options, added alife option, ald weapons,
-- blowout hits, weather, info_artmod_soul_gravi_zone, radzones to stalker binder, dv portal, phantom_spawn option, fixer,
-- mono dead doc, cleanup, weather option, prevent blowouts in dv until done with krysyk, blowout_npc, info_recieved, marsh_band_spawn,
-- sak_book4, tb3d_collector, corrected lighting_val, changed fixer to only be called on level change, sak_book4, news, blowout types, get_obj_level,
-- moved force_fixes, lc fixes, tb3d_harsh_environment, send_tip_id optimization, transmutator sms, check_prior_version, yantar_zombied,
-- force_garbage_collect, hdr off indoors, corpse checked, is_harsh_blowout(), level_up, optimized blowouts, set_player_relations, blowout phases, hdr,
-- indoor/outdoor spots, stages of storm, meceniy_outfit_new and meceniy_outfit_strelok Hud - aleks1970, startup, generate anoms, Run_Blowout_pp,
-- test_for_need_sleep_matras, translate aleks1970, zep_note_gen_grimwald, check_storm_over, debug, fixer, sv/cl logs, trans uses anom pos now,
-- to_td_level_changer_from_puzir, new news struct, show_news, run_blowout_pp
function my_ver() return "1.1.0.0.1.0" end
--[[
File:  amk_mod .script
original authors: copyright © AMK TEAM 2007-2008
Added  fenechka by TAG
TB3D re-written 8/15/2011
--]]

local math_random = math.random
local math_floor = math.floor
local math_pi = math.pi
local math_sin = math.sin
local math_cos = math.cos
local math_ceil = math.ceil
local string_find = string.find
local string_sub = string.sub
local translate = game.translate_string

local sound_obj_right,sound_obj_left,snd_volume,snd_obj_eq

local in_hide=false

--'*******************************************************************************!!!!TB3D
--'   **   **   **   **   **    **   **   **        FIRST_RUN            **   **   ** 
--'*******************************************************************************
-- db.actor unavailable!
function on_game_start()
	db.clear_database()																-- first call to database
	if TB3D_Modders.force_garbage_collect then collectgarbage("collect") end		-- force memory cleanup
	math.randomseed(device():time_global())
	TB3D_Services.packet_alert("amk mod: on game start actor[nil]")
end

local verify_failed
function first_run() 		--mod_call() from amk.script on_game_load, do not spawn objects here!!!!!!!
	if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("AMK MOD: first run start") end
	if TB3D_Modders.verify_script_versions then
		verify_failed = TB3D_Verify_Scripts.verify_files()
	end
	--!!!!TB3D - !!!!!!! DO NOT CHANGE - ORDER IS CRITICAL !!!!!!!!!!!! -----
	local tb3d_ver = amk.load_variable("tb3d_version",0)		--returns 0 if not created yet
	local level_up = TB3D_Services.init_level_up()				--109980
	--TB3D_Services.packet_alert("TB3D starting ver["..utils.to_str(tb3d_ver).."] levelup["..utils.to_str(level_up).."]")
	if tb3d_ver < TB3D_Services.major_version then				--older saves or new game
		if tb3d_ver > 0 then									--109989, old legacy tb3d save
			if level_up > 0 then
				TB3D_Services.packet_alert("TB3D converting old collector save["..utils.to_str(tb3d_ver).."] to["..TB3D_Services.major_version.."] levelup["..utils.to_str(level_up).."] returning to the zone...")
			elseif level_up == -1 then
				TB3D_Services.packet_alert("TB3D converting old stalker save["..utils.to_str(tb3d_ver).."] to["..TB3D_Services.major_version.."], returning to the zone...")
				TB3D_Services.set_new_levelup(0) 								--109989
			else
				TB3D_Services.packet_alert("TB3D converting old stalker save["..utils.to_str(tb3d_ver).."] to["..TB3D_Services.major_version.."], returning to the zone...")
			end
			if amk.load_variable("first_started", nil) == nil then 				--109989
				amk.save_variable("first_started", tb3d_ver)					--started saving this in 109924
			end
			amk.save_variable("check_prior", tb3d_ver)							--109989, need update version fixes
		else																	--new game
			amk.save_variable("temp_intro", 1)
			local game_version
			local server_name = get_console():get_string("mm_net_srv_name")
			if server_name == "gd_collector" then
				game_version = 4
				TB3D_Services.set_new_levelup(1) 								--109978
				TB3D_Services.give_info("tb3d_started_as_collector")
			else
				if server_name == "gd_master" then
					game_version = 3
				elseif server_name == "gd_veteran" then
					game_version = 2
				elseif server_name == "gd_stalker" then
					game_version = 1
				elseif server_name == "gd_novice" then
					game_version = 0
				end
				TB3D_Services.set_new_levelup(0)								--109978
			end
			TB3D_Services.set_difficulty(game_version)
			TB3D_Services.packet_alert("TB3D version["..TB3D_Services.major_version.."] new game difficulty["..utils.to_str(game_version).."]")
			amk.save_variable("first_started",TB3D_Services.major_version)		--user support
			amk.save_variable("check_prior", TB3D_Services.major_version)		--109989, do initial fixes
		end
		amk.save_variable("tb3d_version", TB3D_Services.major_version)
	else																		--returning: same version
		if level_up == -1 then													--109989, should never happen on a returning game
			TB3D_Services.set_new_levelup(0) 									--109989
			TB3D_Services.packet_alert("TB3D started["..utils.to_str(amk.load_variable("first_started",0)).."] version["..TB3D_Services.major_version.."] levelup["..utils.to_str(level_up).."] no level up!!!!...")
		elseif level_up > 0 then
			TB3D_Services.packet_alert("TB3D started["..utils.to_str(amk.load_variable("first_started",0)).."] version["..TB3D_Services.major_version.."] levelup["..utils.to_str(level_up).."] collector returning to the zone...")
		else
			TB3D_Services.packet_alert("TB3D started["..utils.to_str(amk.load_variable("first_started",0)).."] version["..TB3D_Services.major_version.."] stalker returning to the zone...")
		end
	end
	--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!--
	-------------!! obsolete, now saved in level_weathers
	if amk.load_variable("weather",nil) ~= nil then amk.del_variable("weather") end
	if amk.load_variable("dynweather",nil) ~= nil then amk.del_variable("dynweather") end
	if amk.load_variable("option_alife",nil) ~= nil then amk.del_variable("option_alife") end
	-------------!!
	if amk.load_variable("option_helmets_snd",nil) == nil then amk.save_variable("option_helmets_snd",1) end
	if amk.load_variable("option_autosave",nil) == nil then amk.save_variable("option_autosave",1) end
	if amk.load_variable("option_shoot_eff",nil) == nil then amk.save_variable("option_shoot_eff",1) end
	if amk.load_variable("option_hud",nil) == nil then amk.save_variable("option_hud",3) end
	if amk.load_variable("option_mus",nil) == nil then amk.save_variable("option_mus",1) end
	if amk.load_variable("option_treasure",nil) == nil then amk.save_variable("option_treasure",0) end
	if amk.load_variable("option_ddof",nil) == nil then amk.save_variable("option_ddof", TB3d_Modders.ddof_mode) end
	if amk.load_variable("option_news",nil) == nil then amk.save_variable("option_news", 1) end
	if amk.load_variable("option_cop",nil) == nil then amk.save_variable("option_cop",1) end
	if amk.load_variable("option_nv",nil) == nil then amk.save_variable("option_nv", 1) end
	if amk.load_variable("option_auto",nil) == nil then amk.save_variable("option_auto", TB3d_Modders.auto_levels) end
	if amk.load_variable("option_megafone",nil) == nil then amk.save_variable("option_megafone", 1) end
	if amk.load_variable("option_weather",nil) == nil then amk.save_variable("option_weather", 0) end
	if amk.load_variable("option_dyn_suit",nil) == nil then amk.save_variable("option_dyn_suit", 1) end
	if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("AMK MOD: first run done") end
end --first run

--'*******************************************************************************
--'   **      **    **   **   **        CHECK_SPAWN          **   **   **   **    
--'*******************************************************************************
function check_spawn()
	local obj
	local lname = level.name()
	local sname = ""
	if TB3D_Modders.Global_Debug then
		TB3D_Services.packet_alert("AMK MOD: check spawn start")
	end
	if TB3D_Modders.use_server_messages then
		get_console():execute("net_sv_log_data 1")	--user.ltx uses on/off which fails				--110001
		get_console():execute("net_cl_log_data 1")	--user.ltx uses on/off which fails
	else
		get_console():execute("net_sv_log_data 0")	--user.ltx uses on/off which fails
		get_console():execute("net_cl_log_data 0")	--user.ltx uses on/off which fails
	end
	spawn_unspawned_respawners() 
	if TB3D_amk_spawn then TB3D_amk_spawn.init() end				-- used for testing spawns
	if amk.load_variable("option_auto", 0) > 0 then					-- check levels that need lower settings to protect against ctd from bad oclusion (.HOM) files
		TB3D_Services.adjust_for_level(lname)						--109955
	end
	if TB3D_Modders.head_bob then
		get_console():execute("cam_inert "..utils.to_str(TB3D_Modders.head_sway_power))	--head sway and bob ON
	else
		get_console():execute("cam_inert 0")											--head sway and bob OFF
	end
	if amk.load_variable("temp_intro",0) > 0 then										--new game
		local gdiff = TB3D_Services.get_difficulty_num()								--starting rank
		if gdiff == 4 then
			db.actor:set_character_rank(900)
		elseif gdiff == 3 then
			db.actor:set_character_rank(600)
		elseif gdiff == 2 then
			db.actor:set_character_rank(300)
		elseif gdiff == 1 then
			db.actor:set_character_rank(100)
		else --novice
			db.actor:set_character_rank(10)
		end
		TB3D_Services.packet_alert("AMK MOD: new game starting rank["..utils.to_str(db.actor:character_rank()).."] diff["..utils.to_str(gdiff).."]")
		TB3D_Triggers.spawn_sleep_places()												--spawned once for all.sav
		-----------------------------------------------------------------------------------------------------------------------
		TB3D_Services.remove_dynrad_info()												--to be used in modders info group (my1-my11)
		obj = alife():story_object(830)													--pripyat stadium space_restrictor
		if obj then
			alife():release(obj)
			--obj = alife():story_object(10776)
			--if not obj then obj = alife():create(10776) end							--obj[33943][pri_space_restrictor_0011]
			--TB3D_Services.packet_alert("sid 10776 created obj["..utils.to_str(obj.id).."]["..utils.to_str(obj:name()).."]")
		end
		amk.g_start_timer("gg_need_sleep",0,0,6)
		amk.g_start_timer("show_news",0,0,10)
		spawn_fuel()																			--small and medium fuel cans
		spawn_military_btr()																	--cordon south entrance	tanks and choppers
		dmx_mod.syslov_spawn()
		dmx_mod.pripyat_cop_to_pripyat_1()
		dmx_mod.pripyat_cop_to_pripyat_2()
		dmx_mod.lab_x8_to_pripyat_cop()
	else
		sname = TB3D_Services.check_teleportation()
		--TB3D_Services.info_alert("AMK MOD: check spawn 6a")
		if sname == "" then
			sname = amk.load_variable("level_on_save",lname)
			if sname == lname then
				TB3D_Services.packet_alert("reloaded ["..lname.."]")
			else
				TB3D_Services.packet_alert("normal level change from["..sname.."] to["..lname.."]")
			end
		elseif sname == "tp" then
			sname = amk.load_variable("level_on_save",lname)
			TB3D_Services.packet_alert("teleport used from["..sname.."] to["..lname.."]")
		else
			TB3D_Services.packet_alert("special teleport used from["..sname.."] to["..lname.."]")
		end
		--TB3D_Services.info_alert("AMK MOD: check spawn 6b")
		TB3D_Services.level_on_save(sname)															--109983, set var
		if lname ~= sname then
			TB3D_Services.remove_info("yan_zombied_respawn_01")										--109989, reset snorks for next use
			TB3D_Services.remove_info("yan_zombied_respawn_02")
			TB3D_Services.remove_info("yan_zombied_respawn_03")
			TB3D_Services.remove_info("yan_zombied_respawn_04")
			TB3D_Services.remove_info("yan_zombied_respawn_05")
			TB3D_Services.remove_info("yan_zombied_respawn_06")
			TB3D_Services.remove_info("yan_zombied_respawn_07")
			TB3D_Services.remove_info("yan_zombied_respawn_08")
			TB3D_Services.remove_info("tb3d_sar_toggled")											--reset monolit for next use
			TB3D_Services.remove_info("tb3d_marsh_zones")											--frog sounds, set in dyn spawn
			TB3D_Services.remove_info("tb3d_cooling_zones")											--ventillators, set in dyn spawn
			if not has_alife_info("tb3d_game_end") then
				set_ALD_weapons(amk.load_variable("tb3d_ald_weapons", 0))							--special spawns from time to time
			end
			if level_weathers.is_indoor(sname) and not level_weathers.is_indoor(lname) then			--109981, from indoors to outdoors
				local tamt = amk.load_variable("tonemap", -1)
				if tamt ~= -1 then
					get_console():execute("r2_tonemap_amount "..utils.to_str(tamt))					--109981, has no effect if hdr is off
					amk.del_variable("tonemap")
				end
				local tlow = amk.load_variable("tonelow", -1)
				if tlow ~= -1 then
					get_console():execute("r2_tonemap_lowlum "..utils.to_str(tlow))					--109981, has no effect if hdr is off
					amk.del_variable("tonelow")
				end
			end
			if level_weathers.is_indoor(lname) and not level_weathers.is_indoor(sname) then			--109981, outdoors to indoors
				amk.save_variable("tonelow", get_console():get_float('r2_tonemap_lowlum'))			--109981 indoor hdr for proper mood lighting
				amk.save_variable("tonemap", get_console():get_float('r2_tonemap_amount'))
				get_console():execute("r2_tonemap_amount "..utils.to_str(TB3D_Modders.hdr_hilum_indoor))
				get_console():execute("r2_tonemap_lowlum "..utils.to_str(TB3D_Modders.hdr_lowlum_indoor))
			end
		end
	end
	local blow = TB3D_Services.blow()																--110000, moved
	obj = alife():story_object(97118)																--109998, now use elevator button
	if obj then alife():release(obj) end
	if level_weathers.is_indoor(sname) then
		TB3D_Spots.clear_under_spots(sname)
	end
	if level_weathers.is_indoor(lname) then
		TB3D_Spots.show_under_spots(lname)
	end
	if TB3D_Modders.Global_Debug then
		TB3D_Services.packet_alert("AMK MOD: check spawn 3")
	end
	TB3D_Triggers.spawn_zone_teleports()															--radar, limansk
	if (news_main) then news_main.init() end
	if TB3D_Modders.use_offline_alife then
		amk_offline_alife.init()
		amk_offline_alife.update_npc_tables()
		if TB3D_Modders.offline_alife_trade == true then amk_offline_alife.update_trade() end		--amk unique items for sale news
	end
	if TB3D_Modders.Global_Debug then
		TB3D_Services.packet_alert("AMK MOD: check spawn 4")
	end
	if TB3D_Modders.alias_name and TB3D_Modders.alias_name ~= "" and TB3D_Modders.alias_name ~= " " then
		TB3D_Services.packet_alert("AMK MOD: Username set to["..TB3D_Modders.alias_name.."]")
		get_console():execute("name "..TB3D_Modders.alias_name)						--110005
	end
	local startup = amk.load_variable("temp_intro",0)								--109972
	-------------------------------------------------------------------------------------------
	if TB3D_Services.is_collector(10) == true or has_alife_info("tb3d_game_end") then 				-- COLLECTOR START
	-------------------------------------------------------------------------------------------
		if startup > 0 or has_alife_info("tb3d_game_end") then										--start or next level-up
			local levelup = TB3D_Services.get_level_up() 											--109978
			if TB3D_Services.remove_info("tb3d_game_end") == true then								--109977, achieved next level-up
				levelup = levelup + 1
				local oldrep = db.actor:character_reputation()
				db.actor:change_character_reputation(-oldrep)						--zero out rep, controls runaways
				db.actor:change_character_reputation(900)
				--db.actor:set_character_rank(900)									--minimum for full arena access
				TB3D_Services.set_new_levelup(levelup)								--109978
			end
			--TB3D_Services.packet_alert("AMK MOD: Collector levelup["..utils.to_str(levelup).."]["..utils.to_str(TB3D_Services.is_collector(11)).."]")
			if levelup == 1 then																	--109972
				if startup > 0 then
					--amk.changeStartTime()
					TB3D_Modders.collector_spawn()									--give items on spawn
					db.actor:set_character_rank(777)								--900 after main task completion infos
					amk.del_variable("temp_intro")
					db.actor:give_money(math_random(1000,5000))
				else
					--TB3D_Services.packet_alert("AMK MOD: Collector level-up 1")
					TB3D_Services.give_info("tb3d_collector")
					TB3D_Services.give_info("tb3d_collector_start")
					TB3D_Services.give_info("tb3d_collector_done")
					TB3D_Services.remove_info("agr_knockdown")						--insure these are off on return from ns
					TB3D_Services.remove_info("tb3d_bad_torch")
					TB3D_Services.remove_info("tb3d_blowout_done")					--forces save and collector message
					local old_rep = db.actor:character_reputation()
					if old_rep < 600 or old_rep > 900 then
						db.actor:change_character_reputation(-old_rep)				--zero out rep, controls runaways
						db.actor:change_character_reputation(900)					--back in normal range
					end
					db.actor:set_character_rank(2500)								--collector start
					db.actor:give_money(-db.actor:money())
					db.actor:give_money(math_random(1000,5000))
					TB3D_Triggers.remove_zone_teleports()							--limansk and hospital
				end
				TB3D_Services.remove_info("tayniki_coll")							--this ativates collector dialog
				TB3D_Services.set_community(db.actor, "actor", 0, 0, false)
				TB3D_Services.set_player_relations(5)								--109981, killer, lastday and mono -500, all others 0
				db.actor:set_actor_position(vector():set(20.45, 12.77, 94.0))		--loft by bridge
				obj = alife():story_object(18100)									--remove lc in generators to marsh (doc_heli)
				if obj then alife():release(obj) end
				obj = alife():story_object(18101)									--remove lc in marsh to generators (doc_heli)
				if obj then alife():release(obj) end
				obj = alife():story_object(832)										--remove lc to npp
				if obj then alife():release(obj) end
				dmx_mod.create_level_changer_prip_to_zat()							--6009 - replaces prip to npp
				amk.g_start_timer("blow_shift", 0, 0, 2)							-- give time for guards to go online
				news_main.next_blow(4)
				TB3D_Services.give_info("agr_nii_rupor_off")						--109996, make sure speaker is off
			elseif levelup == 2 then												--109978, Desolation
				TB3D_Services.set_player_relations(5)								--109981, killer, lastday and mono -500, all others 0
				TB3D_Services.delayed_action(1, "tb3d_sms_storm", 10)				--start timer to send sms
				TB3D_Services.set_harsh_environment(2)								--start earthquake and wake
			elseif levelup == 3 then												--109996, reclamation
				alife():create("zep_note_gen_grimwald", vector():set(-223.757,33.071,-127.943),78486,3077)		--109997, tent ne near checkpoint
				TB3D_Services.give_info("tb3d_spawn_oman")							--oman occupies waiting room helipad
			end
		else
			--TB3D_Services.packet_alert("AMK MOD: check spawn 5")
			--TB3D_Triggers.treasure_hunt_ending()									--creates final portals for testing
			if blow then
				check_blowout(blow)
			else
				if amk.has_timer("blow_shift") == false then start_blow_timer(0) end
			end
			if TB3D_Modders.use_DMX_cars then										--now can be turned on later in game -COLLECTOR ONLY-
				if TB3D_Services.give_info("tb3d_dmx_cars") == true then
					dmx_cars.car_spawn()
					dmx_cars.quest_cars_spawn()										--spawn quest cars
				end
			end
		end
		--if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("AMK MOD: check spawn c6") end
	-------------------------------------------------------------------------------------------
	else						-- STALKER START
	-------------------------------------------------------------------------------------------
		TB3D_services.stalker_set_portals()										--clears lcs based on info portions
		if startup > 0 then
			start_blow_timer(5)	--no news on start for blowouts
			news_manager.amk_send_tip_id("amk_welcome_msg","amk_welcome_title",10,40,"tb3d_master")
			amk.del_variable("temp_intro")
			TB3D_Services.give_info("tayniki_coll")								--collector start only, this deativates it
			obj = alife():story_object(6002)									--exit_to_darkvalley_from_esc, off until dv done
			if obj then alife():release(obj) end
			obj = alife():story_object(196)										--110006, exit_to_darkvalley_01, wait for mission from bartender
			if obj then alife():release(obj) end
			obj = alife():story_object(11500)									--110006, exit_to_puzir_from_garbage wait for mission from bartender
			if obj then alife():release(obj) end
			obj = alife():story_object(11506)									--110006, to_td_level_changer_from_puzir wait for Kalinin done
			if obj then alife():release(obj) end
			obj = alife():story_object(594)										--bar to wild territory, off until get x16 task
			if obj then alife():release(obj) end
			----- moved from amk and sak -------TB3D 109932------------------------------------------------------------------------
			--amk			--recipies for arts
			amk.spawn_item("amk_zapiska",vector():set(-126.96,-28.41,-379.12),27,125181)	-- l01_escape
			amk.spawn_item("amk_zapiska",vector():set(21.6,-3.94,-18.28),1140,5991)			-- l04u_labx18
			---sak
			amk.spawn_item("sak_document",vector():set(350,-51.74,-24.45),2031,93051) 		-- radar lc -- document under the corpse of the scientist in the woods RJ
			amk.spawn_item("rad_document6",vector():set(621.95,-42.64,187.38),1910,224619)	-- artmod info -- case in a kung monolitovtsuv
			--spawned in bar_dialogs.give_agroprom_reward								 	-- a note on the third floor of the Agricultural industry
			amk.spawn_item("sak_document2",vector():set(-80,-1.30,153),163,187916) 			-- art mod -- document under the railway embankment Cordon
			amk.spawn_item("garbage_pda",vector():set(-226,-7.37,-132.36),252,208345) 		-- art mod -- PDA in the camp of bandits in a landfill
			amk.spawn_item("rad_document6",vector():set(-28.4,-0.26,-173.55),676,211656) 	-- art mod -- business in a trailer Agroprom
			amk.spawn_item("rad_pda",vector():set(530.7,-49.41,-241.61),2061,180657) 		-- dv lc -- PDA in a trailer on the radar
			amk.spawn_item("rad_document6",vector():set(-139.6,-25.03,-355.6),19,116593) 	-- art mod -- case in the cordon
			TB3D_Modders.stalker_start()
		else	---back for more
			--TB3D_Services.packet_alert("AMK MOD: check spawn 6")
			if blow then
				check_blowout(blow)
			else
				if amk.has_timer("blow_shift") == false then start_blow_timer(0) end
			end
		end
		--TB3D_Services.packet_alert("AMK MOD: check spawn 7")
		TB3D_Modders.stalker_spawn()													-- give items on spawn
	end
	if verify_failed then
		news_manager.amk_send_tip_id("tb3d_bad_script_msg","tb3d_system_msg",10,40,"tb3d_master")		--109980, if game loads at all
	end
	local check_prior = amk.load_variable("check_prior", nil)										--109989
	if check_prior then
		TB3D_Services.check_prior_version(check_prior)												--109989, version changed or new game
		amk.del_variable("check_prior")
	end
	TB3D_Services.report_plug_ins()													--110000, reports the style and author (plug-ins)
	TB3D_Services.report_gulags()
	task_manager.show_counts()
	--if TB3D_Modders.force_garbage_collect then collectgarbage("collect") end		--force memory cleanup
  	if TB3D_Modders.Global_Debug then
		TB3D_Services.packet_alert("AMK MOD: check spawn done")
	end
end --check spawn

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **      NEWS_AMK          **   **   **   **   **    **   **   **   **
--'*******************************************************************************
function show_news()													--110007, rewritten to have seperate news in collector in the future
	if amk.load_variable("option_news", 1) > 0 then
		local lname = level.name()
		local blow = TB3D_Services.blow()								--109980
		if TB3D_Modders.use_news_message == true then TB3D_Services.packet_alert("amk mod: show news blow["..utils.to_str(blow).."] level["..lname.."]") end
		if (blow and blow >= run_hide) and not level_weathers.is_indoor(lname) then
			--no news during blowout									--110007
		elseif level_weathers.is_indoor(lname) == true then
			--no news reception indoors
		elseif news_main.on_news() == true then							--110007
			--game news sent
		elseif TB3D_Services.is_collector() then		--level-up 1 and beyond
			if TB3D_Services.is_instorm(lname) then		--110007
				--no news during harsh environment
			else
				if TB3D_Modders.use_news_message == true then TB3D_Services.packet_alert("amk mod: collector show news") end
				local rand1 = math_random(10)	--don't show news if == 4 or 5
				--TB3D_Services.packet_alert("amk mod: show news["..rand1.."]")
				if rand1 > 5 then
					local news_random
					if math_random(10) < 6 then
						news_random = "dolg_news_"..math.random(11)
						if TB3D_Modders.use_news_message == true then TB3D_Services.packet_alert("amk mod: show news rand dolg["..news_random.."]") end
						news_manager.give_game_news(translate(news_random), "ui\\ui_iconsTotal", Frect():set(498,141,83,47), 0, 15000)
					else
						news_random = "freedom_news_"..math.random(6)
						if TB3D_Modders.use_news_message == true then TB3D_Services.packet_alert("amk mod: show news rand freedom["..news_random.."]") end
						news_manager.give_game_news(translate(news_random), "ui\\ui_iconsTotal", Frect():set(498,141,83,47), 0, 15000)
					end
				elseif rand1 < 4 then
					local news_item = math.random(80)
					local news_text = translate("news_uniq_"..news_item)
					local ini = ini_file("misc\\TB3D_uniq_news.ltx") 							--110007, names only
					if ini and ini:section_exist("names") then
						if news_item < 60 then
							local name = ini:r_string("names",tostring(math.random(300)))		--contains member callsigns
							if name then news_text = "@"..name.." "..news_text end
						end
						local sname = ini:r_string("names",tostring(math.random(300)))
						if sname == name then sname = ini:r_string("names",tostring(math.random(300))) end
						if sname then news_text = news_text.." >"..sname end
					end
					if TB3D_Modders.use_news_message == true then TB3D_Services.packet_alert("amk mod: show news rand sms["..news_item.."]["..news_text.."]") end
					news_manager.give_game_news(news_text, "ui\\ui_iconsTotal", Frect():set(498,141,83,47), 0, 15000)
					if (news_item==9) then	-- extra string: 9b and 24b - aleks1970
						news_manager.give_game_news(translate("news_uniq_9b"), "ui\\ui_iconsTotal", Frect():set(498,705,83,47), 0, 15000)
					elseif (news_item==24) then
						news_manager.give_game_news(translate("news_uniq_24b"), "ui\\ui_iconsTotal", Frect():set(498,705,83,47), 0, 15000)
					end
					ini = ""
				end
			end
		else			--stalker level-up 0
			if TB3D_Modders.use_news_message == true then TB3D_Services.packet_alert("amk mod: stalker show news") end
			local rand1 = math_random(10)										--don't show news if == 4 or 5
			--TB3D_Services.packet_alert("amk mod: show news["..rand1.."]")
			if rand1 > 5 then
				local news_random
				if math_random(10) < 6 then
					news_random = "dolg_news_"..math.random(11)
					if TB3D_Modders.use_news_message == true then TB3D_Services.packet_alert("amk mod: show news rand dolg["..news_random.."]") end
					news_manager.give_game_news(translate(news_random), "ui\\ui_iconsTotal", Frect():set(498,141,83,47), 0, 15000)
				else
					news_random = "freedom_news_"..math.random(6)
					if TB3D_Modders.use_news_message == true then TB3D_Services.packet_alert("amk mod: show news rand freedom["..news_random.."]") end
					news_manager.give_game_news(translate(news_random), "ui\\ui_iconsTotal", Frect():set(498,141,83,47), 0, 15000)
				end
			elseif rand1 < 4 then
				local news_item = math.random(80)
				local news_text = translate("news_uniq_"..news_item)
				local ini = ini_file("misc\\TB3D_uniq_news.ltx") 							--110007, names only
				if ini and ini:section_exist("names") then
					if news_item < 60 then
						local name = ini:r_string("names",tostring(math.random(300)))		--contains member callsigns
						if name then news_text = "@"..name.." "..news_text end
					end
					local sname = ini:r_string("names",tostring(math.random(300)))
					if sname == name then sname = ini:r_string("names",tostring(math.random(300))) end
					if sname then news_text = news_text.." >"..sname end
				end
				if TB3D_Modders.use_news_message == true then TB3D_Services.packet_alert("amk mod: show news rand sms["..news_item.."]["..news_text.."]") end
				news_manager.give_game_news(news_text, "ui\\ui_iconsTotal", Frect():set(498,141,83,47), 0, 15000)
				if (news_item==9) then	-- extra string: 9b and 24b - aleks1970
					news_manager.give_game_news(translate("news_uniq_9b"), "ui\\ui_iconsTotal", Frect():set(498,705,83,47), 0, 15000)
				elseif (news_item==24) then
					news_manager.give_game_news(translate("news_uniq_24b"), "ui\\ui_iconsTotal", Frect():set(498,705,83,47), 0, 15000)
				end
				ini = ""
			end
		end
		local next_check_time = TB3D_Modders.check_news_rate or 40
		amk.g_start_timer("show_news",0,0,math_random(next_check_time,next_check_time+40))				--set for next time to check
		if TB3D_Modders.use_news_message == true then TB3D_Services.packet_alert("amk mod: show news done") end
	end
end --show news

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **      SLEEP_AMK          **   **   **   **   **    **   **   **   **
--'*******************************************************************************
function reduce_need_sleep(time)
	local tmp=amk.load_variable("gg_need_sleep",0)
	tmp=tmp-time*120
	if tmp<0 then tmp=0 end
	amk.save_variable("gg_need_sleep_nrg",0)
	amk.save_variable("block_sleep_menu",0)
	amk.save_variable("gg_need_sleep",tmp)
	test_sleep_pp()
end

function test_for_need_sleep()
	if sleep_manager.is_sleep_active() == false then 
		amk.save_variable("gg_need_sleep",amk.load_variable("gg_need_sleep",0)+1) 
		test_sleep_pp()
	end
	amk.g_start_timer("gg_need_sleep",0,0,6)
end

function test_sleep_pp()
	local tmp=amk.load_variable("gg_need_sleep",0)
	if tmp>360 then
		sleep_manager.main(5+amk.load_variable("gg_need_sleep_nrg",0))
	elseif tmp>300 then
		level.add_pp_effector("yantar_underground_psi.ppe", 999, true)
		level.set_pp_effector_factor(999, 5.0)  
		-- DMX MOD on
		local snd_obj = xr_sound.get_safe_sound_object([[actor\sleepy]])
        snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
        local cs = get_hud():GetCustomStatic("sleep_static")
        if cs == nil then get_hud():AddCustomStatic("sleep_static",true) end
	    -- DMX MOD off
	else	--if tmp<=300 then
		level.remove_pp_effector(999)
		get_hud():RemoveCustomStatic("sleep_static") -- DMX MOD
	end
end

function check_sleep_item(obj)
	local section = obj:section()
	local stype=nil
	if section=="energy_drink" then
		stype="nrg"
	elseif section=="matras" then
		stype="matras"
	elseif section=="treasure_item" then
		stype="tr_item"
	end
	if stype~=nil then
		amk.start_timer("sleep_"..stype,0.1,obj:id())
	end
end

function test_for_need_sleep_nrg(oid)
	if alife():object(oid)==nil then
		local n=amk.load_variable("gg_need_sleep_nrg",0)
		if n<3 then
			amk.save_variable("gg_need_sleep_nrg",n+1)
			amk.save_variable("gg_need_sleep",amk.load_variable("gg_need_sleep",0)-30+n*10) 
			test_sleep_pp()
		end
		if TB3D_Modders.default_sleep == true then
			amk.g_start_timer("block_sleep_menu",0,1,0)
			amk.save_variable("block_sleep_menu",1)
		end
	end
end
--[[
function test_for_need_sleep_med(oid)
	if alife():object(oid)==nil then
		amk.save_variable("gg_need_sleep",amk.load_variable("gg_need_sleep",0)+5) 
		test_sleep_pp()
	end
end
]]--
function test_for_need_sleep_matras(oid)
	if alife():object(oid)==nil then
		local enemy=false
		local obj
		local level_object_by_id = level.object_by_id
		local actorPos = db.actor:position()
		if TB3D_Modders.default_sleep == true then   -- !!!!TB3D, why even parse data
			for npcId, npc in pairs(db.storage) do
				obj = level_object_by_id(npcId)
				if obj then
					if	(obj:id() ~= db.actor
						and (( IAmAStalker[obj:clsid()] and amk.get_npc_relation(obj,db.actor)=="enemy" ) or IAmAMonster[obj:clsid()])
						and obj:position():distance_to(actorPos) < 40 and obj:see(db.actor)) then
						enemy=true
						break
					end
				end
			end
		end
		if enemy==true then
			news_manager.amk_send_tip_id("not_need_sleep_enemy","sms_incomming",5,40,"tb3d_master")
		elseif TB3D_Services.blow() then			--109980
			news_manager.amk_send_tip_id("blowout_not_sleep","sms_incomming",5,40,"tb3d_master")
		elseif has_alife_info("horror_time_begin") then
			news_manager.amk_send_tip_id("not_need_sleep_in_hell","sms_incomming",5,40,"tb3d_master")
		elseif amk.load_variable("block_sleep_menu",0)==0 then			--see if energy drink
			local spwn=ui_cheat.cheat(get_hud())
			level.start_stop_menu(spwn,true)
		else
			news_manager.amk_send_tip_id("not_need_sleep_nrg","sms_incomming",5,40,"tb3d_master")
		end
	    amk.spawn_item_in_inv("matras")
	end
end --sleep matras

function test_for_need_sleep_tr_item(oid)		--!!!!TB3D
	if alife():object(oid)==nil then
	    if news_main then
	      news_main.create_treasurebox()
	    end
	end
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **      RADAR_FIX         **   **   **   **   **    **   **   **   **
--'*******************************************************************************
function check_radar_off()
	if (level.name() == "l10_radar") then
		if not has_alife_info("bar_deactivate_radar_done") then
			local pos = db.actor:position()
			if pos.z>65 and pos.x>350 and pos.x<410 then
				if amk.load_variable("radar_fix",0)==0 then
					level.add_pp_effector("fire_hit.ppe", 1523, true)
					level.set_pp_effector_factor(1523, 0.5)
					amk.save_variable("radar_fix",1)
					amk.start_timer("radar_fix",5)
				end
			end
		end
	end
end

function radar_fix()
	level.remove_pp_effector(1523)
	--local pos = db.actor:position()
	--if pos.z>65 and pos.x>350 and pos.x<410 then
		--db.actor:kill(db.actor)
	--end
	db.actor.health = db.actor.health - 0.01
	amk.del_variable("radar_fix")
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **      ITEM_TRANSFORM         **   **   **   **   **    **   **   **
--'*******************************************************************************

local tramsform_items = {
	["item1"] = {info = "info_portion_1", result = {"item_out_1", "item_out_2", "item_out_3", "item_out_4"}},
	["item2"] = {info = "info_portion_2", result = {"item_out_2"}},
	["kaktus_izomorf"] = {info = "kaktus_izo_resept", result = {"bloodsucker_effector", "af_spirit_4", "af_arhara_globus", "mutant_krovosos_cocoon"}},
	["izom_globus"] = {info = "kaktus_izo_resept", result = {"bomba_mina_n", "af_babka_3", "af_spirit_4", "device_teleport"}},
	["psevdokristall"] = {info = "kaktus_izo_resept", result = {"af_spirit_3", "af_babka_2", "wpn_m4", "device_teleport"}},
	["izomorf_plastilin"] = {info = "molniya_plastilin_ok_start", result = {"korobka_sigars", "ammo_5.45x39_izomorf", "ammo_7.62x54_izomorf", "ammo_zhekan_izomorf"}},
    ["korobka_sigars"] = {info = "kluch_poluchen", result = {"9x39_izomorf", "ammo_9x39_izomorf", "ammo_9x39_izomorf", "ammo_9x39_izomorf"}}
}

-- checking for a fallen object / artifact
function check_for_item_drop(obj)
	local obj_sect = obj:section()
	if tramsform_items[obj_sect] and not has_alife_info(tramsform_items[obj_sect].info) then
		local lv = obj:level_vertex_id()
		local gv = obj:game_vertex_id()
		if gv == value_65535 then gv = db.actor:game_vertex_id() end
		if gv == value_65535 then return end -- it seems that no number of vertex
		-- subject fits - send it to the examination
		-- know not whether he ate or vvlozhili in nvchku
		local tbl	= {}
		tbl.obj_id	= obj:id()
		tbl.lv		= lv
		tbl.gv		= gv
		amk.start_timer("timer_drop_obj_transform", 0.2, tbl)
	end
end

function item_transform(obj_id, lv, gv)
    local obj = level.object_by_id(obj_id)
    if obj then
        level.add_pp_effector("teleport.ppe", 1524, false)
        local result = tramsform_items[obj:section()].result
        local position = obj:position()
        for i = 1, #result do
            amk.spawn_item(result[i], position, gv, lv)
        end
        amk.remove_item(obj)
    end
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **      AF_TRANSFORM         **   **   **   **   **    **   **   **
--'*******************************************************************************
local cur_level=nil
local havegoodart=false

-- component list
-- desirable to add, in alphabetical order
local afs={
["af_ameba_mica"] = true,
["af_ameba_slime"] = true,
["af_ameba_slug"] = true,
["af_armor_1"] = true,
["af_armor_2"] = true,
["af_armor_3"] = true,
["af_babka_1"] = true,
["af_babka_2"] = true,
["af_babka_3"] = true,
["af_blood"] = true,
["af_cristall"] = true,
["af_cristall_flower"] = true,
["af_cry_1"] = true,
["af_cry_2"] = true,
["af_dik_1"] = true,
["af_dik_2"] = true,
["af_dik_3"] = true,
["af_drops"] = true,
["af_dummy_battery"] = true,
["af_dummy_battery_red"] = true,
["af_dummy_dummy"] = true,
["af_dummy_glassbeads"] = true,
["af_dummy_pellicle"] = true,
["af_dummy_pellicle_red"] = true,
["af_dummy_spring"] = true,
["af_dummy_spring_red"] = true,
["af_electra_flash"] = true,
["af_electra_moonlight"] = true,
["af_electra_sparkler"] = true,
["af_fireball"] = true,
["af_fuzz_kolobok"] = true,
["af_gold_fish"] = true,
["af_gravi"] = true,
["af_kamen_udachy"] = true,
["af_kol_1"] = true,
["af_kol_2"] = true,
["af_kol_3"] = true,
["af_medusa"] = true,
["af_mincer_meat"] = true,
["af_night_star"] = true,
["af_part_monolit2"] = true,
["af_pudd_1"] = true,
["af_pudd_2"] = true,
["af_pudd_3"] = true,
["af_rusty_kristall"] = true,
["af_rusty_sea_urchin"] = true,
["af_rusty_thorn"] = true,
["af_simbion"] = true,
["af_soul"] = true,
["af_spirit_1"] = true,
["af_spirit_2"] = true,
["af_spirit_3"] = true,
["af_vyvert"] = true,
["bandage"] = true,
["bezoar"] = true,
["bread"] = true,
["conserva"] = true,
["energy_drink"] = true,
["izomorf_kompas"] = true,
["kolbasa"] = true,
["mutant_boar_leg"] = true,
["mutant_dog_tail"] = true,
["mutant_face_tushkano"] = true,
["mutant_flesh_eye"] = true,
["mutant_krovosos_jaw"] = true,
["mutant_psevdodog_tail"] = true,
["mutant_snork_leg"] = true,
["mutant_zombie_teeth"] = true,
["vodka"] = true
}

-- checking for a fallen object / artifact
function check_for_af_drop(obj)
	local obj_sect = obj:section()
	-- check whether it is not one of the components
	if afs[obj_sect] == true then
		local anom_id,anom_pos,anom_radius,dist = amk_anoms.get_nearest_anomaly(obj)
		if anom_id and anom_radius - dist > -2 then
			--local anom_sect = level.object_by_id(anom_id):section()
			--local obj_pos = obj:position()
			local lv = level.object_by_id(anom_id):level_vertex_id()
			local gv = level.object_by_id(anom_id):game_vertex_id()
			if gv == value_65535 then gv = obj:game_vertex_id() end
			if gv == value_65535 then gv = db.actor:game_vertex_id() end
			if gv == value_65535 then return end -- it seems that no number of vertex
			-- subject fits - send it to the examination
			-- know not whether he ate or vvlozhili in nvchku
			local tbl		= {}
			tbl.obj_id		= obj:id()
			tbl.anom_id		= anom_id
			tbl.anom_radius	= anom_radius
			tbl.lv			= lv
			tbl.gv			= gv
			amk.start_timer("timer_drop_obj_varka", 0.2, tbl)
			-- moved to amk.script
			--check_af_transform(obj, obj_sect, obj_pos, anom_id, anom_sect, anom_pos, anom_radius, lv, gv)
		end
	end
end

-- test: whether the ingredient for cooking
-- parameter - the name of the section
function is_komponent(sec)
     return (afs[sec] ~= nil)
end

-- anomalies "uznatsya" on the part of the name!
-- komp - komponentv
-- good luck v_udachi + vvrozhdenie in bulvzhnik v_virogd <= 100 !!!
-- rejection v_ottorg = 100 - (v_udachi + v_virogd) therefore they do not need a table propisvvat
-- cel - goal (may bvt multiple goals)
-- info - infoportsiya that will vvdana after L-L + = + J cooking
-- virogd - what vvrozhdaetsya (may bvt multiple vvrozhdeny)
-- vremya = {Days chasv, minutv} - cooking time / mutation
-- remove_anomaly - remove a anomali (can be combined with cooking / mutation)
-- not_for_mutator - recipe never popadt in transmutator
-- ne_ugadat -  recipe ugadvvaetsya in transmutatore, but will num shows the presence of the piston
local anom_recept_komp = {
	-- default if no dannvh closer to the recipe
	default = {
		cel = {},
		v_udachi = 100,
		v_virogd = 0,
		virogd = {["af_buliz"]=true},
		vremya = {0,0,5},
		remove_anomaly = false
	},
	anomalii = {
		["_zharka"] = {
			-- default if no dannvh closer to the recipe,
			-- which can pereopredelyatya in the recipe
			name = "\"Fry-up\"",
			default = {
				v_udachi = 100,
				v_virogd = 0,
				vremya = {0,0,5}
			},
			recepti = {
				["info_izomorf_kompas"] = { -- remove the artifact without results anomalii cooking / mutation
					komp = {["izomorf_kompas"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					remove_anomaly = true
				},
				["info_artmod_electra_flash_zharka"] = {
					komp = {["af_medusa"]=true,["af_rusty_thorn"]=true,["af_vyvert"]=true,["vodka"]=true},
					cel = {["af_electra_flash"]=true}
				},
				["info_artmod_ameba_slime_zharka"] = {
					komp = {["af_medusa"]=true,["af_blood"]=true,["kolbasa"]=true,["mutant_dog_tail"]=true},
					cel = {["af_ameba_slime"]=true}
				},
				["info_artmod_gravi_zharka"] = {
					komp = {["af_medusa"]=true,["af_blood"]=true,["bandage"]=true,["conserva"]=true},
					cel = {["af_gravi"]=true}
				},
				["info_artmod_night_star_zharka"] = {
					komp = {["af_rusty_kristall"]=true,["af_vyvert"]=true,["af_electra_flash"]=true,["mutant_snork_leg"]=true},
					cel = {["af_night_star"]=true}
				},
				["info_artmod_electra_moonlight_zharka"] = {
					komp = {["af_gravi"]=true,["af_medusa"]=true,["af_electra_flash"]=true,["mutant_krovosos_jaw"]=true},
					cel = {["af_electra_moonlight"]=true}
				},
				["info_artmod_dummy_battery_zharka"] = {
					komp = {["af_electra_flash"]=true,["af_ameba_mica"]=true,["vodka"]=true,["mutant_dog_tail"]=true},
					cel = {["af_dummy_battery"]=true}
				},
				-- ["info_amk_recipt_souls"] = {
				["info_amk_recipt_soul_drops"] = {
					komp = {["af_soul"]=true},
					cel = {["af_spirit_1"]=true},
					vremya = {0,4,0}
				},
				["info_artmod_gusenica"] = {
					komp = {["bezoar"]=true},
					cel = {["af_caterpillar"]=true},
					vremya = {0,0,5},
					v_udachi = 75,
					v_virogd = 25
				},
				["info_artmod_probabka_burera"] = {
					komp = {["af_babka_3"]=true},
					cel = {["af_babka_4"]=true},
					vremya = {0,0,5},
					v_udachi = 75,
					v_virogd = 25
				},
				-- ["info_amk_recipt_souls"] = {
				["info_amk_recipt_soul_fire"] = {
					komp = {["af_spirit_1"]=true},
					cel = {["af_spirit_2"]=true},
					vremya = {0,6,0}
				},
				-- ["info_amk_recipt_souls"] = {
				["info_amk_recipt_soul_cristal"] = {
					komp = {["af_spirit_2"]=true},
					cel = {["af_spirit_3"]=true},
					vremya = {0,10,0}
				},
				["info_amk_recipt_tears_fire"] = {
					komp = {["af_cry_1"]=true},
					cel = {["af_cry_2"]=true},
					vremya = {0,5,0}
				},
				["info_amk_recipt_dikoobraz"] = {
					komp = {["af_rusty_sea_urchin"]=true},
					cel = {["af_dik_1"]=true},
					vremya = {0,3,0}
				},
				["info_amk_recipt_giant_small_brother"] = {
					komp = {["af_kol_3"]=true},
					cel = {["af_kol_4"]=true},
					vremya = {0,3,0}
				},
				["info_amk_recipt_controller_skalp"] = {
					komp = {["af_armor_3"]=true},
					cel = {["af_armor_4"]=true},
					vremya = {0,6,0}
				}
			}
		},
		["_galant"] = {
			-- default, if no data is closer to the recipe
			name = "\"Electra\"",
			default = {
				v_udachi = 100,
				v_virogd = 0,
				vremya = {0,0,5}
			},
			recepti = {
				["info_red_battery"] = { -- remove the artifact without results anomalii cooking / mutation
					komp = {["af_dummy_battery_red"]=true},
					remove_anomaly = true,
					vremya = {0,0,1},
					not_for_mutator = true
				},
				["info_artmod_fireball_galant"] = {
					komp = {["af_blood"]=true,["af_medusa"]=true,["vodka"]=true,["mutant_dog_tail"]=true},
					cel = {["af_fireball"]=true}
				},
				["info_artmod_cristall_flower_galant"] = {
					komp = {["af_vyvert"]=true,["af_rusty_thorn"]=true,["conserva"]=true,["mutant_dog_tail"]=true},
					cel = {["af_cristall_flower"]=true}
				},
				["info_artmod_ameba_mica_galant"] = {
					komp = {["af_ameba_slime"]=true,["af_rusty_thorn"]=true,["af_medusa"]=true,["kolbasa"]=true},
					cel = {["af_ameba_mica"]=true}
				},
				["info_artmod_electra_moonlight_galant"] = {
					komp = {["af_gravi"]=true,["af_blood"]=true,["af_fireball"]=true,["mutant_psevdodog_tail"]=true},
					cel = {["af_soul"]=true}
				},
				["info_artmod_gold_fish_galant"] = {
					komp = {["af_medusa"]=true,["af_rusty_thorn"]=true,["af_cristall_flower"]=true,["mutant_flesh_eye"]=true},
					cel = {["af_gold_fish"]=true}
				},
				["info_artmod_dummy_spring_galant"] = {
					komp = {["af_cristall_flower"]=true,["af_cristall"]=true,["mutant_psevdodog_tail"]=true,["conserva"]=true},
					cel = {["af_dummy_spring"]=true}
				},
				["info_artmod_medusa_galant"] = {
					komp = {["mutant_face_tushkano"]=true,["bandage"]=true,["conserva"]=true,["mutant_dog_tail"]=true},
					cel = {["af_medusa"]=true}
				},
				-- ["info_amk_recipt_souls"] = {
				["info_amk_recipt_soul_bengal"] = {
					komp = {["af_spirit_3"]=true},
					cel = {["af_spirit_4"]=true},
					vremya = {0,1,0}
				},
				["info_amk_recipt_tears_electra"] = {
					komp = {["af_drops"]=true},
					cel = {["af_cry_1"]=true},
					vremya = {0,5,0}
				},
				["info_amk_recipt_grandmother_glassbeards"] = {
					komp = {["af_dummy_glassbeads"]=true},
					cel = {["af_babka_1"]=true},
					vremya = {0,5,0}
				},
				-- ["info_amk_recipt_dummy"] = {
				["info_amk_recipt_dummy_fire"] = {
					komp = {["af_dummy_dummy"]=true},
					cel = {["af_pudd_1"]=true},
					vremya = {0,3,0}
				},
				-- ["info_amk_recipt_dummy"] = {
				["info_amk_recipt_dummy_bright"] = {
					komp = {["af_pudd_1"]=true},
					cel = {["af_pudd_2"]=true},
					vremya = {0,6,0}
				},
				-- ["info_amk_recipt_dummy"] = {
				["info_amk_recipt_dummy_moon"] = {
					komp = {["af_pudd_2"]=true},
					cel = {["af_pudd_3"]=true},
					vremya = {0,8,0}
				},
				["info_amk_recipt_electra_dikoobraz"] = {
					komp = {["af_dik_1"]=true},
					cel = {["af_dik_2"]=true},
					vremya = {0,5,0}
				}
			}
		},
		["_buzz"] = {
			-- default if no dannvh closer to the recipe
			name = "\"Aspic\"",
			default = {
				v_udachi = 100,
				v_virogd = 0,
				vremya = {0,0,5}
			},
			recepti = {
				["info_izomorf_kompas"] = { -- remove the artifact without results anomali³ cooking / mutation
					komp = {["izomorf_kompas"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					remove_anomaly = true
				},
				["info_artmod_rusty_kristall_buzz"] = {
					komp = {["af_electra_sparkler"]=true,["af_medusa"]=true,["af_drops"]=true,["bread"]=true},
					cel = {["af_rusty_kristall"]=true}
				},
				["info_artmod_rusty_thorn_buzz"] = {
					komp = {["af_blood"]=true,["bandage"]=true,["bread"]=true,["mutant_dog_tail"]=true},
					cel = {["af_rusty_thorn"]=true}
				},
				["info_artmod_fireball_buzz"] = {
					komp = {["af_rusty_thorn"]=true,["af_vyvert"]=true,["mutant_snork_leg"]=true,["bread"]=true},
					cel = {["af_fireball"]=true}
				},
				["info_artmod_night_star_buzz"] = {
					komp = {["af_gravi"]=true,["af_blood"]=true,["af_electra_flash"]=true,["mutant_psevdodog_tail"]=true},
					cel = {["af_gold_fish"]=true}
				},
				["info_artmod_fuzz_kolobok_buzz"] = {
					komp = {["af_night_star"]=true,["af_soul"]=true,["af_electra_moonlight"]=true,["af_rusty_sea_urchin"]=true},
					cel = {["af_fuzz_kolobok"]=true}
				},
				["info_artmod_vyvert_buzz"] = {
					komp = {["mutant_face_tushkano"]=true,["bandage"]=true,["conserva"]=true,["mutant_dog_tail"]=true},
					cel = {["af_vyvert"]=true}
				},
				["info_amk_recipt_tears_chimaera"] = {
					komp = {["af_cry_2"]=true},
					cel = {["af_cry_3"]=true},
					vremya = {0,2,0}
				},
				["info_amk_recipt_pra_grandmother_glassbeards"] = {
					komp = {["af_babka_1"]=true},
					cel = {["af_babka_2"]=true},
					vremya = {0,3,0}
				},
				-- ["info_amk_recipt_dummy"] = {
				["info_amk_recipt_dummy_puding"] = {
					komp = {["af_pudd_3"]=true},
					cel = {["af_pudd_4"]=true},
					vremya = {0,12,0}
				},
				["info_amk_recipt_sopl_dikoobraz"] = {
					komp = {["af_dik_2"]=true},
					cel = {["af_dik_3"]=true},
					vremya = {0,2,0}
				},
				["info_amk_recipt_almaz_kolobok"] = {
					komp = {["af_kol_2"]=true},
					cel = {["af_kol_3"]=true},
					vremya = {0,8,0}
				},
				["info_amk_recipt_pancir"] = {
					komp = {["af_armor_2"]=true},
					cel = {["af_armor_3"]=true},
					vremya = {0,2,0}
				},
				["tretiy_kod_dost_start"] = {
					komp = {["af_simbion"]=true},
					cel = {["af_arhara_globus"]=true},
					vremya = {0,0,10},
					v_udachi = 75,
					v_virogd = 25
				},
				["info_amk_recipt_simbion"] = {
					komp = {["af_medusa"]=true,["af_drops"]=true,["af_blood"]=true,["af_rusty_thorn"]=true},
					cel = {["af_simbion"]=true},
					vremya = {0,5,0}
				}
			}
		},
		["_fountain"] = {
			name = "\"Fountain\"",
			recepti = {
				["info_izomorf_kompas"] = { -- remove the artifact without results anomali³ cooking / mutation
					komp = {["izomorf_kompas"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					remove_anomaly = true
				},
				["info_artmod_cristall_buzz"] = {
					komp = {["af_cristall_flower"]=true,["af_medusa"]=true,["af_fireball"]=true,["mutant_krovosos_jaw"]=true},
					cel = {["af_cristall"]=true}
				}
			}
		},
		["_mincer"] = {
			-- default if no dannvh closer to the recipe
			name = "\"Carousel\"",
			default = {
				v_udachi = 100,
				v_virogd = 0,
				vremya = {0,0,5}
			},
			recepti = {
				["info_red_spring"] = { -- remove the artifact without results anomali³ cooking / mutation
					komp = {["af_dummy_spring_red"]=true},
					remove_anomaly = true,
					vremya = {0,0,1},
					not_for_mutator = true
				},
				["info_artmod_cristall_flower_mincer"] = {
					komp = {["af_blood"]=true,["af_medusa"]=true,["bandage"]=true,["conserva"]=true},
					cel = {["af_cristall_flower"]=true}
				},
				["info_artmod_drops_mincer"] = {
					komp = {["af_vyvert"]=true,["bandage"]=true,["vodka"]=true,["mutant_dog_tail"]=true},
					cel = {["af_drops"]=true}
				},
				["info_artmod_rusty_kristall_mincer"] = {
					komp = {["af_electra_sparkler"]=true,["af_medusa"]=true,["conserva"]=true,["mutant_dog_tail"]=true},
					cel = {["af_rusty_kristall"]=true}
				},
				["info_artmod_electra_moonlight_mincer"] = {
					komp = {["af_fireball"]=true,["af_blood"]=true,["af_ameba_slug"]=true,["mutant_krovosos_jaw"]=true},
					cel = {["af_electra_moonlight"]=true}
				},
				["info_artmod_ameba_slug_mincer"] = {
					komp = {["af_electra_flash"]=true,["af_vyvert"]=true,["af_fireball"]=true,["mutant_psevdodog_tail"]=true},
					cel = {["af_ameba_mica"]=true}
				},
				["info_artmod_dummy_glassbeads_mincer"] = {
					komp = {["af_ameba_mica"]=true,["af_rusty_sea_urchin"]=true,["af_gold_fish"]=true,["af_night_star"]=true},
					cel = {["af_dummy_glassbeads"]=true}
				},
				["info_amk_recipt_burer_grandmother_glassbeards"] = {
					komp = {["af_babka_2"]=true},
					cel = {["af_babka_3"]=true},
					vremya = {0,0,10}
				},
				["info_amk_recipt_titan_kolobok"] = {
					komp = {["af_kol_1"]=true},
					cel = {["af_kol_2"]=true},
					vremya = {0,5,0}
				},
				["we_ne_chmuri"] = {
					komp = {["af_kamen_udachy"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					not_for_mutator = true,
					info = "spawn_hospit_live"
				},
				["mozno_varit"] = {
					komp = {["af_part_monolit2"]=true},
					cel = {["af_kamen_udachy"]=true},
					vremya = {0,0,1},
					not_for_mutator = true,
					info = "spawn_kamen_udachy"
				},
				["info_amk_recipt_cheshya"] = {
					komp = {["af_armor_1"]=true},
					cel = {["af_armor_2"]=true},
					vremya = {0,5,0}
				}
			}
		},
		["_mosquito_bald"] = {
			-- default if no dannvh closer to the recipe
			name = "\"Tramplin\"",
			default = {
				v_udachi = 100,
				v_virogd = 0,
				vremya = {0,0,5}
			},
			recepti = {
				["info_red_pellicle"] = { -- remove the artifact without results anomali³ cooking / mutation
					komp = {["af_dummy_pellicle_red"]=true},
					remove_anomaly = true,
					vremya = {0,0,1},
					not_for_mutator = true
				},
				["info_artmod_mincer_meat_mosquito_bald"] = {
					komp = {["af_vyvert"]=true,["af_blood"]=true,["vodka"]=true,["mutant_dog_tail"]=true},
					cel = {["af_mincer_meat"]=true}
				},
				["info_artmod_electra_sparkler_mosquito_bald"] = {
					komp = {["af_drops"]=true,["bandage"]=true,["kolbasa"]=true,["mutant_dog_tail"]=true},
					cel = {["af_electra_sparkler"]=true}
				},
				["info_artmod_ameba_slug_mosquito_bald"] = {
					komp = {["af_medusa"]=true,["af_drops"]=true,["bandage"]=true,["vodka"]=true},
					cel = {["af_ameba_slug"]=true}
				},
				["info_artmod_cristall_mosquito_bald"] = {
					komp = {["af_mincer_meat"]=true,["af_vyvert"]=true,["af_fireball"]=true,["mutant_flesh_eye"]=true},
					cel = {["af_cristall"]=true}
				},
				["info_artmod_rusty_sea_urchin_mosquito_bald"] = {
					komp = {["af_ameba_slime"]=true,["af_blood"]=true,["af_rusty_kristall"]=true,["mutant_krovosos_jaw"]=true},
					cel = {["af_rusty_sea_urchin"]=true}
				},
				["info_artmod_dummy_dummy_mosquito_bald"] = {
					komp = {["af_ameba_mica"]=true,["af_cristall"]=true,["af_mincer_meat"]=true,["af_night_star"]=true},
					cel = {["af_dummy_dummy"]=true}
				},
				["info_amk_recipt_stone_dikoobraz"] = {
					komp = {["af_dik_3"]=true},
					cel = {["af_dik_4"]=true},
					vremya = {0,9,0}
				},
				["info_amk_recipt_steel_kolobok"] = {
					komp = {["af_fuzz_kolobok"]=true},
					cel = {["af_kol_1"]=true},
					vremya = {0,2,0}
				},
				["info_amk_recipt_shkura"] = {
					komp = {["af_dummy_pellicle"]=true},
					cel = {["af_armor_1"]=true},
					vremya = {0,5,0}
				}
			}
		},
		["_gravi_zone"] = {
			-- default if no dannvh closer to the recipe
			name = "\"Funnel\"",
			default = {
				v_udachi = 100,
				v_virogd = 0,
				vremya = {0,0,5}
			},
			recepti = {
				["info_red_battery"] = { -- remove the artifact without results anomali³ cooking / mutation
					komp = {["af_dummy_battery_red"]=true},
					remove_anomaly = true,
					vremya = {0,0,1},
					not_for_mutator = true
				},
				["info_artmod_ameba_slug_gravi_zone"] = {
					komp = {["af_vyvert"]=true,["af_medusa"]=true,["kolbasa"]=true,["mutant_dog_tail"]=true},
					cel = {["af_ameba_slug"]=true}
				},
				["info_artmod_ameba_slime_gravi_zone"] = {
					komp = {["af_medusa"]=true,["bandage"]=true,["conserva"]=true,["mutant_dog_tail"]=true},
					cel = {["af_ameba_slime"]=true}
				},
				["info_artmod_electra_flash_gravi_zone"] = {
					komp = {["af_vyvert"]=true,["af_blood"]=true,["mutant_dog_tail"]=true,["vodka"]=true},
					cel = {["af_electra_flash"]=true}
				},
				["info_artmod_night_star_gravi_zone"] = {
					komp = {["af_rusty_thorn"]=true,["af_medusa"]=true,["af_rusty_kristall"]=true,["mutant_psevdodog_tail"]=true},
					cel = {["af_night_star"]=true}
				},
				["info_artmod_soul_gravi_zone"] = {
					komp = {["af_electra_flash"]=true,["af_cristall_flower"]=true,["af_ameba_slug"]=true,["mutant_snork_leg"]=true},
					cel = {["af_soul"]=true}
				},
				["info_artmod_dummy_pellicle_gravi_zone"] = {
					komp = {["af_ameba_mica"]=true,["af_cristall"]=true,["af_gold_fish"]=true,["af_soul"]=true},
					cel = {["af_dummy_pellicle"]=true}
				}
			}
		},
		["_ice"] = {
			-- default if no dannvh closer to the recipe
			name = "\"Freezer\"",
			default = {
				v_udachi = 100,
				v_virogd = 0,
				vremya = {0,0,5}
			},
			recepti = {
				["info_izomorf_kompas"] = { -- remove the artifact without results anomali³ cooking / mutation
					komp = {["izomorf_kompas"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					remove_anomaly = true
				},
				["life_heart_final"] = {
					komp = {["af_dummy_dummy"]=true,["af_rusty_sea_urchin"]=true,["af_gold_fish"]=true,["af_night_star"]=true},
					cel = {["af_life_heart"]=true}
				},
				["info_red_battery"] = {
					komp = {["af_dummy_battery"]=true},
					cel = {["af_dummy_battery_red"]=true}
				},
				["info_red_spring"] = {
					komp = {["af_dummy_spring"]=true},
					cel = {["af_dummy_spring_red"]=true}
				},
				["info_red_pellicle"] = {
					komp = {["af_dummy_pellicle"]=true},
					cel = {["af_dummy_pellicle_red"]=true}
				}
			}
		},
		["_ogon"] = {
			name = "\"Fever\""
		},
		["_sphere"] = {
		name = "\"Bubble\"",
			default = {
				v_udachi = 100,
				v_virogd = 0,
				vremya = {0,0,5}
			},			
			recepti = {
				["info_izomorf_kompas"] = { -- remove the artifact without results anomali³ cooking / mutation
					komp = {["izomorf_kompas"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					remove_anomaly = true
				}
			}				
		},
		["_zavesa"] = {
		name = "\"Tornado\"",
			default = {
				v_udachi = 100,
				v_virogd = 0,
				vremya = {0,0,5}
			},			
			recepti = {
				["info_izomorf_kompas"] = { -- remove the artifact without results anomali³ cooking / mutation
					komp = {["izomorf_kompas"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					remove_anomaly = true
               },
				["fima_mulo_nayti_done"] = {
					komp = {["mutant_zombie_teeth"]=true,["kolbasa"]=true},
					cel = {["rudiment_big"]=true},
					v_udachi = 50,
					v_virogd = 50,
					not_for_mutator = true
				}
			}				
		},
		["_smallrain"] = {
		name = "\"Focal fog\"",
			default = {
				v_udachi = 100,
				v_virogd = 0,
				vremya = {0,0,5}
			},			
			recepti = {
				["info_izomorf_kompas"] = { -- remove the artifact without results anomali³ cooking / mutation
					komp = {["izomorf_kompas"]=true},
					cel = {["izomorf_kompas"]=true},
					vremya = {0,0,1},
					remove_anomaly = true
				}
			}				
		},
		["_monolith"] = {
			name = "\"Radon cloud\""
		},
		["_no_gravity"] = {
			name = "\"Elevator\""
		}
	}
}

-- AET return value, possibly due to defaults
function get_af_transform_param(name, recept, recepti)
	local result
	--get_console():execute("load ~#I#:"..string.format(name.." name"))
	if recept[name] ~= nil then
		result = recept[name]
	elseif recepti["default"] ~= nil and recepti["default"][name] ~= nil then
		result = recepti["default"][name]
	elseif anom_recept_komp["default"] ~= nil and anom_recept_komp["default"][name] ~= nil then
		result = anom_recept_komp["default"][name]
	else
		-- no information!!!
		news_manager.amk_send_tip(translate("sms_no_info")..name.."]!",translate("sms_cook_arts"),0,15,"gen_info")
		result = nil
	end
	return result
end

-- oluchaem polnvy set of recipes for the anomaly anom_sect
function fill_recepti_est(anom_sect)
	local recepti_est = {} -- retseptv for a given anomaly
	local anom_name = nil
	for anom, recepti in pairs(anom_recept_komp["anomalii"]) do
		if string_find(anom_sect, anom) ~= nil then --found in the list anomali.
			anom_name = anom_recept_komp["anomalii"][anom]["name"]
			if anom_recept_komp["anomalii"][anom]["recepti"] then
				for info, recept in pairs(recepti["recepti"]) do
					if not recept["not_for_mutator"] and not recept["remove_anomaly"] and (has_alife_info(info) or not recept["ne_ugadat"]) then
					-- if has_alife_info(info) then -- x ++ is this recipe: stored in a table
						recepti_est[info] = {}
						for k, v in pairs(recept) do
							if type(v) == "table" then
								recepti_est[info][k] = {}
								for i, j in pairs(v) do
									recepti_est[info][k][i] = j
								end
							else
								recepti_est[info][k] = v
							end
						end
					-- end
					end
				end
			end
		end
	end
	return recepti_est,anom_name
end

-- checks and retseptv komponetv
-- if vs in the order - start cooking / mutatsi
function check_af_transform(af, af_sect, obj_pos, anom_id, anom_sect, anom_pos, anom_radius, lv, gv)
	--search for anomalies
	local obj, obj_sect
	local dist
	local count = 0
	local recepti_est = {} -- retseptv in the presence of y + +, in part kotorvh dannvy component
	local recept_podhodit = false
	local finish = false -- flag for vvhoda of cycles
	local cel		--= get_af_transform_param("cel", recepti_est[info], recepti)
	local v_udachi		--= get_af_transform_param("v_udachi", recepti_est[info], recepti)
	local v_virogd		--= get_af_transform_param("v_virogd", recepti_est[info], recepti)
	local virogd		--= get_af_transform_param("virogd", recepti_est[info], recepti)
	local vremya		--= get_af_transform_param("vremya", recepti_est[info], recepti)
	local remove_anomaly	--= get_af_transform_param("remove_anomaly", recepti_est[info], recepti)
	local remove_anomaly_id --= anom_id
	local komp		--= recepti_est[info]["komp"]
	local result, udacha 	--= af_select_result(v_udachi, v_virogd, virogd, cel, komp)
	local info_portion	--= recepti_est[info]["info"]
	for anom, recepti in pairs(anom_recept_komp["anomalii"]) do
		if string_find(anom_sect, anom) ~= nil then --found in the list anomali, near which stand
			recepti_est = {}
			recept_podhodit = false
			-- collect retseptv in kotorvh involved dannvy component
			for info, recept in pairs(recepti["recepti"]) do
				if has_alife_info(info) and recept["komp"][af_sect] == true then --have a prescription and this component is involved in 
					recept_podhodit = true
					-- copy recipe
					recepti_est[info] = {}
					for k, v in pairs(recept) do
						if type(v) == "table" then
							recepti_est[info][k] = {}
							for i, j in pairs(v) do
								recepti_est[info][k][i] = j
							end
						else
							recepti_est[info][k] = v
						end
					end
					-- as table.getn() as the operator # is not rabotat with tables in kotorvh not tselochiselnve indeksv,
					--then count the number of ruchnu
					count = 0
					for k,v in pairs(recepti_est[info]["komp"]) do
						count = count + 1
					end
					recepti_est[info]["count"] = count
					--get_console():execute("load ~#I#:"..string.format("0 "..af_sect.." adopted. Lnom: ".. anom .." rec. "..info.." "..recepti_est[info]["count"]))
				end
			end
			if recept_podhodit then -- if you have found at least one ime iysya approaching s recipe
				--news_manager.amk_send_tip("etsept approached. anom_radius "..anom_radius," cooking",0,15,"gen_info")
				--and eat a number of other komponentv
				--if you find them in vvbrannvh recipes, then remove them from the recipes
				--as a recipe without osta\tsya components - the recipe worked
				for i=1,last_object do
					obj = level.object_by_id(i)
					if obj and alife():object(i) then
						dist = obj:position():distance_to(anom_pos)
						if obj:parent() == nil and ((anom_radius - obj:position():distance_to(anom_pos)) > -2) then
							obj_sect = obj:section()
							--get_console():execute("load ~#I#:"..string.format(" obj_sect: "..obj_sect.." dist: "..dist))
							--check otobrannve retseptv
							for info, recept in pairs(recepti_est) do
								-- if the component is in the recipe
								if recepti_est[info]["komp"][obj_sect] == true then
									-- adding L-component will remove it from igrv
									recepti_est[info]["komp"][obj_sect] = obj:id()
									-- reduce the number of components in the recipe
									recepti_est[info]["count"] = recepti_est[info]["count"] - 1
									--news_manager.amk_send_tip(obj_sect.." found. Lnom: "..anom.." rec. "..info.." "..recepti_est[info]["count"],"cooking",0,15,"gen_info")
									--get_console():execute("load ~#I#:"..string.format(obj_sect.." found. Lnom: "..anom.." rec. "..info.." "..recepti_est[info]["count"]))
									-- if the recipe is empty, then it worked
									if recepti_est[info]["count"] == 0 then
										--get_console():execute("load ~#I#:"..string.format(info.." worked. Lnom: "..anom))
										-- install all parametrv for the recipe, perhaps because of reticence
										cel		= get_af_transform_param("cel", recepti_est[info], recepti)
										v_udachi		= get_af_transform_param("v_udachi", recepti_est[info], recepti)
										v_virogd		= get_af_transform_param("v_virogd", recepti_est[info], recepti)
										virogd		= get_af_transform_param("virogd", recepti_est[info], recepti)
										vremya		= get_af_transform_param("vremya", recepti_est[info], recepti)
										remove_anomaly	= get_af_transform_param("remove_anomaly", recepti_est[info], recepti)
										remove_anomaly_id = anom_id
										komp		= recepti_est[info]["komp"]
										result, udacha 	= af_select_result(v_udachi, v_virogd, virogd, cel, komp)
										info_portion	= recepti_est[info]["info"]
										if cel == nil or v_udachi == nil or v_virogd == nil
											or virogd == nil or vremya == nil or remove_anomaly == nil 
											or cel == nil and remove_anomaly == false
											or v_udachi + v_virogd > 100 then
											-- curve recipe - vvhodim
											finish = true
											break
										end
										-- failure
										if udacha == false then
											remove_anomaly = false
											info_portion = nil
										end
										level.add_pp_effector("teleport.ppe", 1524, false)
										-- start cooking / mutatsi³
										--[[if info_portion then
											get_console():execute("load ~#I#: info_portion: "..info_portion)
										else
											get_console():execute("load ~#I#: info_portion: nil")
										end]]
										--as_start_universal_transform_timer(komp, result, obj_pos, vremya, gv, lv, info_portion, remove_anomaly, remove_anomaly_id)
										anom_pos.y = anom_pos.y+1				--110005, make sure above ground				
										as_start_universal_transform_timer(komp, result, anom_pos, vremya, gv, lv, info_portion, remove_anomaly, remove_anomaly_id)			--110005
										-- remove from igrv komponentv recipe
										for k,v in pairs(komp) do
											alife():release(alife():object(v))
										end
										-- vvhodim
										finish = true
										break
									end
								end
							end
						end
					end
					if finish then break end
				end
			end
			-- anomaly with the recipes found, all the cases sdelanv - vvhodim
			break
		end
	end
end

function af_flash(af)
	level.add_pp_effector("teleport.ppe", 1524, false)
	amk.remove_item(af)
end

-- accidentally vvbiraet result returned AET table with sections of the results
function af_select_result(v_udachi, v_virogd, virogd, cel, komp)
	local rnd=math_random(0,100)
	if rnd > v_udachi then --failure
		if rnd > v_virogd + v_udachi then -- rejection
			return komp, false
		else -- vvrozhdenie
			return virogd, false
		end
	else -- good luck
		-- get_console():execute("load ~#I#:"..string.format("good luck "..amk.pack_array_to_string(cel)))
		return cel, true
	end
end

-- run transofrmatsi
-- rezultatv can bvt mnogochislennv (a few goals, a complete rejection of components, some vvrozhdeny)
function as_start_universal_transform_timer(komp, result, pos, vremya, gv, lv, info_portion, remove_anomaly, remove_anomaly_id)
	local t={} -- sohranyaemve dannve
	t.result = result -- You can save directly tablitsv
	t.pos = {}
		t.pos.x = pos.x
		t.pos.y = pos.y
		t.pos.z = pos.z
	t.gv=gv
	t.lv=lv
	t.info_portion = info_portion
	t.komp = komp -- you can save directly tablitsv
	t.remove_anomaly = remove_anomaly
	t.remove_anomaly_id = remove_anomaly_id
	--get_console():execute("load ~#I#:"..string.format(" g_start_timer: "..vremya[1].." "..vremya[2].." "..vremya[3].." "..amk.pack_array_to_string(t)))
	amk.g_start_timer("af_transform_universal", vremya[1], vremya[2], vremya[3], t)
end

-- old FUNCTIONS
function af_start_transform(v1,v2,af_from,af_target)
	local rnd=math_random(0,100)
	if rnd>v1 then
		if rnd>v2+v1 then
			return af_from
		else
			return "af_buliz"
		end
	else
		return af_target
	end
end

-- old FUNCTIONS
function af_start_transform_timer(af,pos,delay_d,delay_h,delay_m,af_sect)
	local t={}
	t.section=af
	t.pos={}
		t.pos.x=pos.x
		t.pos.y=pos.y
		t.pos.z=pos.z
	t.gv=gv
	t.lv=lv
	t.from_sect=af_sect
	amk.g_start_timer("af_transform",delay_d,delay_h,delay_m,t)
end

-- finish cooking / mutatsi
-- can be a lot of results bvt
function af_transform_universal_end(params)
	--get_console():execute("load ~#I#:"..string.format(" af_transform_universal_end "))
	-- if there is rezultatv
	local count = 0
	local anom_pos
	local obj
	for k, v in pairs(params.result) do
		count = count + 1
	end
	if count > 0 then
		anom_pos = vector():set(params.pos.x, params.pos.y, params.pos.z)
		if db.actor:position():distance_to(anom_pos) < 15 then
			level.add_pp_effector("teleport.ppe", 1524, false)
		end
		-- form a string with the names of components
		local from_komp = ""
		for k,v in pairs(params.komp) do
			if k then
				from_komp = from_komp..translate(amk.get_inv_name(k))
			end
		end
		-- cut off, "" in the tail
		local rtext = translate("trans_finished_title").." [%c[255,240,20,14]"..string_sub(from_komp, 1, -1).."%c[default]]"
		-- spawns a result (v)
		for k,v in pairs(params.result) do
			obj = amk.spawn_item(k, vector():set(params.pos.x,params.pos.y+2,params.pos.z), params.gv, params.lv)		--110000
			amk.add_spot_on_map(obj.id, "red_location", rtext)
		end
		news_manager.send_tip_txt(db.actor,rtext,0,"gen_info",15000)
	end
	-- dam infoportsi if there is
	if params.info_portion then
		TB3D_Services.give_info(params.info_portion)
	end
		--and not has_alife_info(params.info_portion) then
		--get_console():execute("load ~#I#: params.info_portion: "..params.info_portion)
		--TB3D_Services.give_info(params.info_portion)
		--[[if has_alife_info(params.info_portion) then
			get_console():execute("load ~#I#: params.info_portion: "..params.info_portion.." ³+TL++=")
		end]]
	--end
	-- remove the anomaly, if necessary, and it is not needed
	-- code is taken from amk_anoms.turn_off_all()
	if params.remove_anomaly then
		local sobj = alife():object(params.remove_anomaly_id)
		if sobj then
			--local map = TB3D_Services.get_obj_level(sobj.m_game_vertex_id)
			--local obj_name=sobj:name()
	--		if not amk_anoms.check_exclusion(sobj, map) then 
				local status = amk_anoms.get_anomaly_status(sobj)
				if status=="" or status == "on" then
					amk_anoms.set_anomaly_status(sobj, "del")
			end
				alife():release(sobj, true)
	--		end
		end
	end
--[[	get_console():execute("load ~#I#:"..string.format(" boiling over "))
	get_console():execute("flush")]]
end

-- old function
function af_transform_end(params)
	local from_sect="\""..params.from_sect.."\""
	from_sect = translate("trans_finished_title").." [%c[255,240,20,14]"..from_sect.."%c[default]]"
	local obj
	obj=amk.spawn_item(params.section,vector():set(params.pos.x,params.pos.y+2,params.pos.z),params.gv,params.lv)		--110000
	amk.add_spot_on_map(obj.id,"red_location",rtext)
	news_manager.send_tip_txt(db.actor,rtext,2,"gen_info",10000)
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **   **    AMK_METKA     **   **   **   **   **    **   **   **   **
--'*******************************************************************************
local beakons={}
function check_beacon_drop(obj)
	if obj then
		--TB3D_Services.packet_alert("amk mod: check beacon dropped")
		--local lp=level.present()
		--local dp=device()==nil or device():is_paused()
		if obj:section()=="amk_metka" and not has_alife_info("ui_pda") then
			beakons[obj:id()]=true
		end
	end
end

function check_metka()
	local spwn
	local obj
	for id,v in pairs(beakons) do
		obj=level.object_by_id(id)
		if obj then
			beakons[id]=nil
			if obj:parent()==nil then
				spwn=ui_dots.dots(get_hud(),id)
				level.start_stop_menu(spwn,true)
			end
		end
	end  
end

local last_update=0 
local inert = 1000 
local clicks_prev = 200 music_section="" music_previous_section="" music_next_section_start_time=0 music_stop_previous=0 music=false music_init = 0 music_themes = {} music_phases={} musicflag=1 
local music_objs={[1]=nil,[2]=nil} 
local music_stor={ enemy_see_actor=0, actor_see_enemy=0, enemy_hit_actor=0, actor_hit_enemy=0 } music_lo_lvl=7 music_hi_lvl=17 
local music_graph={}  
function build_music_graph() 
	local skip = false 
	local lname = level.name() 
	if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("amk mod: build music graph") end
	local iniFileName = "scripts\\amk\\music\\music.ltx"
	local sect = "music_themes"
	local sini = ini_file(iniFileName) 
	local tmp, t, tt
	local lvl
	if sini and iniLineSectionExist(sect, iniFileName) then 
		local result, id, value = nil, nil, nil
		for a=0,iniLinesCount(sect, iniFileName)-1 do
			id = nil
			result, id, value = getIniLine(sect,a,"","", iniFileName) 
			if id~=nil and amk.trim(id)~="" and amk.trim(id)~=nil then
				id=amk.trim(id)
				value1 = amk.str_explode("|", amk.trim(value), true)
				value={}
				for k,v in pairs(value1) do 
					tmp = nil
					tmp = amk.str_explode("=", v, true)
					value[tmp[1]]=tmp[2]
				end 
				if value.map then 
					t = nil
					t = amk.str_explode(",", value.map, true)
					for kk,vv in pairs(t)do
						skip = skip or vv == lname
					end
					skip = not skip
				else
					skip = false
				end 
				if not skip then 
					table.insert(music_themes, id)
					--t = amk.parse_ini_section_to_array(sini,id.."_music_files")
					t = amk.parse_ini_section_to_array_new(iniFileName,id.."_music_files")
					t.null = ""
					for k,v in pairs(t) do
						music_phases[id.."_"..k]=v 
						if not music_graph[id.."_"..k] then
							music_graph[id.."_"..k] = {}
						end 
						--tt = amk.parse_ini_section_to_array(sini,id.."_graph_"..k)
						tt = amk.parse_ini_section_to_array_new(iniFileName,id.."_graph_"..k)
						for kk,vv in pairs(tt) do 
							tmp = nil
							tmp = amk.str_explode(",",vv,true) 
							lvl = tmp[1]
							lvl = amk_mod["music_"..lvl.."_lvl"]
							music_graph[id.."_"..k][id.."_"..kk] = {lvl,tmp[2]}
						end
					end
				end
			end
		end 
		if #music_themes > 0 then
			if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("amk mod: build music graph done[true]") end
			return true
		end
	end
	if TB3D_Modders.use_abort_message then TB3D_Services.packet_alert("amk mod: build music graph done[false]") end
	return false
end  

function music_start(sound) 
	if not music and not has_alife_info("u_6") then 
		if TB3D_Modders.use_sound_message then TB3D_Services.packet_alert("amk mod: music start["..utils.to_str(sound).."]") end
		if music_objs[1]==nil then music_objs[1]=amk_music.amk_music() end 
		if music_objs[2]==nil then music_objs[2]=amk_music.amk_music() end
		music_objs[musicflag]:initialize(music_phases[sound])
		music_next_section_start_time=music_objs[musicflag]:play()-200
		music_previous_section=music_section musicflag=3-musicflag
		music = true
		if TB3D_Modders.use_sound_message then TB3D_Services.packet_alert("amk mod: music start["..utils.to_str(sound).."] done") end
	elseif music and has_alife_info("u_6") then
		music_objs[musicflag]:stop()
		music = false
	else
		music = true
	end
end  

function music_change(sound) 
	if music then
		music_objs[musicflag]:initialize(music_phases[sound])
		music_next_section_start_time=music_objs[musicflag]:play_at_time(music_next_section_start_time+200)-200
		musicflag=3-musicflag
		music_previous_section=music_section
	end
end  

function interactive_music()
	if amk.load_variable("option_mus",1)==1 and not has_alife_info("u_6") then 
		--TB3D_Services.packet_alert("amk mod: interactive music")
		if music_init == 1 then 
			if not music then 
				if time_global() - last_update > inert then music_select_section(inert) last_update = time_global()  end
			end 
			if not music and music_previous_section=="" and music_section~="" then music_start(music_section) end 
			if music and music_previous_section~="" and music_section=="" then music_previous_section="" end 
			if music then
				music_objs[1]:update()
				music_objs[2]:update() 
				if time_global() > music_next_section_start_time then
					music_select_section(music_objs[musicflag]:length()) 
					if music_section~="" then music_change(music_section) else music=false  end
				end
			end
		elseif music_init == 0 then
			if build_music_graph() then music_init=1 else music_init=-1 end
		end
	elseif music then
		if music_objs[musicflag]:playing() then music_objs[musicflag]:stop() end
		music = false
	end
end  

function reset_music_cntrs(c)
	music_stor.actor_see_enemy=music_stor.actor_see_enemy-2*c music_stor.enemy_see_actor=music_stor.enemy_see_actor-2*c music_stor.actor_hit_enemy=music_stor.actor_hit_enemy-8*c music_stor.enemy_hit_actor=music_stor.enemy_hit_actor-4*c 
	if music_stor.actor_see_enemy<0 then music_stor.actor_see_enemy=0 elseif music_stor.actor_see_enemy>music_lo_lvl then music_stor.actor_see_enemy=music_lo_lvl end 
	if music_stor.enemy_see_actor<0 then music_stor.enemy_see_actor=0 elseif music_stor.enemy_see_actor>music_lo_lvl then music_stor.enemy_see_actor=music_lo_lvl end 
	if music_stor.actor_hit_enemy<0 then music_stor.actor_hit_enemy=0 elseif music_stor.actor_hit_enemy>music_hi_lvl then music_stor.actor_hit_enemy=music_hi_lvl end 
	if music_stor.enemy_hit_actor<0 then music_stor.enemy_hit_actor=0 elseif music_stor.enemy_hit_actor>music_hi_lvl then music_stor.enemy_hit_actor=music_hi_lvl  end
end 

local shoot_helper=0  

function calc_adrenaline(act,obj,typ) 
	if amk.load_variable("option_mus",1)==1 then 
		--TB3D_Services.packet_alert("amk mod: calc adrenaline["..utils.to_str(act).."]")
		local dist = obj:position():distance_to(db.actor:position()) 
		if not dist or dist < 1 then dist = 1 end								--109955
		if act=="actor_see_enemy" then
			music_stor.actor_see_enemy=music_stor.actor_see_enemy+50/dist
		elseif act=="enemy_see_actor" then
			music_stor.enemy_see_actor=music_stor.enemy_see_actor+50/dist
		elseif act=="actor_hit_enemy" then 
			if time_global()>shoot_helper then
				music_stor.actor_hit_enemy=music_stor.actor_hit_enemy+13 shoot_helper=time_global()+500
			end
		elseif act=="enemy_hit_actor" then
			music_stor.enemy_hit_actor=music_stor.enemy_hit_actor+8
		end
	end
end  

function music_select_section(time)
	reset_music_cntrs(time/inert) 
	local cs = music_section 
	local eseen = music_stor.enemy_see_actor 
	if eseen >= music_lo_lvl then eseen = music_lo_lvl  end 
	local aseen = music_stor.actor_see_enemy 
	if aseen >= music_lo_lvl then aseen = music_lo_lvl  end 
	local ehits = music_stor.enemy_hit_actor 
	if ehits >= music_hi_lvl then ehits = music_hi_lvl  end 
	local ahits = music_stor.actor_hit_enemy 
	if ahits >= music_hi_lvl then ahits = music_hi_lvl  end 
	local lvl = aseen + eseen 
	if lvl>music_hi_lvl*0.75 then lvl=music_hi_lvl*0.75  end
	lvl = ehits + lvl + ahits 
	if music_section=="" then music_section=music_themes[math_random(#music_themes)].."_null"  end 
	local last_sel_max=0 
	local last_sel_min=1000
	for k,v in pairs(music_graph[music_section]) do 
		if v[2]=="<" and v[1]<last_sel_min then 
			if v[1]>lvl then music_section=k last_sel_min=v[1]  end
		end 
		if v[2]==">" and v[1]>=last_sel_max then 
			if v[1]<=lvl then music_section=k last_sel_max=v[1]  end
		end
	end 
	if string_find(music_section,"null") then music_section="" end 
	if music and music_previous_section~="" and music_section=="" then music_previous_section=""  end 
	local l=0 
	if music and music_objs[musicflag]~=nil then l=music_objs[musicflag]:length()  end
end  

--'*******************************************************************************
--'   **   **   **   **   **    **      BLOWOUTS       **   **   **   **   
--'*******************************************************************************
------- blowout types -------------------------------
--0 = outdoor: must hide!
--1 = indoor/underground: does not occur
--2 = anywhere: don't need hide - further away levels
--3 = anywhere: don't need hide with phantoms - npp area
--4 reserved
--5 = skip blowouts, for special and problem levels
----------------------------------------------------
function blowout_type()												--109980, sets a local so not to hammer array
	return TB3D_Services.blowout_type()
end

function blowout()													--109980, sets a local so not to hammer load_var
	return TB3D_Services.blow() ~= nil 
end

function check_blowout(phase)
	local bt=blowout_type()
	TB3D_Services.packet_alert("AMK MOD: check blowout bt["..utils.to_str(bt).."] phase["..utils.to_str(phase).."]")
	if bt == 0 or bt == 2 or bt == 3 then
		local results = TB3D_Modders.blow_phase_basis + (math_random()*TB3D_Modders.blow_phase_shift) - (TB3D_Modders.blow_phase_shift/2)
		if results < 1 then results = 1 elseif results > TB3D_Modders.blow_phase_max then results = TB3D_Modders.blow_phase_max end
		if phase==0 then
			if bt ~= 2 then
				level.set_weather("pre_blow",true)
				if TB3D_Modders.surge_day_effect == true then level.set_weather_fx("surge_day") end			--COP style sky effects
				level.add_cam_effector("camera_effects\\shell_shock.anm", 2004, false, "")
				local snd_obj = xr_sound.get_safe_sound_object([[ambient\organic_moan1]])
				snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
			end
			level.add_pp_effector("monolith_off.ppe", 2003, false)							--109980
			amk.g_start_timer("blowout", 0, 0, 1, 1)
			--TB3D_Services.set_blow(phase)	
		elseif phase==1 then
			amk_anoms.pre_blow_off()
			amk.g_start_timer("blowout", 0, 0, results, 2)
			--TB3D_Services.set_blow(phase)								--109980
		elseif phase==2 then
			if bt ~= 2 then
				local snd_obj2 = xr_sound.get_safe_sound_object([[ambient\earthquake]])
				snd_obj2:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
				level.add_cam_effector("camera_effects\\earthquake.anm", 2002, true, "")
				local snd_obj = xr_sound.get_safe_sound_object([[anomaly\blowout]])
				snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
				blowout_psy_sound("start")
				level.add_pp_effector("vibros.ppe", 2001, true)
			end
			in_hide=false
			amk.g_start_timer("blowout", 0, 0, results, 3)
			--TB3D_Services.set_blow(phase)								--109980
		elseif phase==3 then		--npc hideout phase
			--TB3D_Services.packet_alert("AMK MOD: blowout ["..phase.."]")
			amk.g_start_timer("blowout",0,0,results,4)
			--TB3D_Services.set_blow(phase)							--109980
		elseif phase==4 then
			--TB3D_Services.packet_alert("AMK MOD: blowout ["..phase.."]")
			if bt ~= 2 then
				if TB3D_Modders.blowout_crows == true then TB3D_hit_styles.blowout_crows() end
			end
			amk.g_start_timer("blowout", 0, 0, results, 5)
			--TB3D_Services.set_blow(phase)							--109980
		elseif phase==5 then
			--TB3D_Services.packet_alert("AMK MOD: blowout ["..phase.."]")
			if bt ~= 2 then
				level.remove_cam_effector(2002)
				level.remove_pp_effector(2001)
			end
			level.add_pp_effector("monolith_off.ppe", 2003, false)
			amk.g_start_timer("blowout", 0, 0, 1, 6)
			--amk.start_timer("blowout",5,5)
			--TB3D_Services.set_blow(phase)							--109980
		else						--just ending
			tb3d_services.packet_alert("blowout done")
			if bt ~= 2 then
				if level_weathers.is_indoor(level.name()) == false then
					level_weathers.set_new_weather("stormy")
					TB3D_Services.give_info("tb3d_force_weather")
				end
			end
			if TB3D_Services.is_collector(11) then
				tb3d_services.packet_alert("blowout done: collector")
				TB3D_Services.give_info("tb3d_blowout_done")
			end
		end
	else											--non blowout levels
		level.add_cam_effector("camera_effects\\earthquake.anm", 2002, true, "")
		amk.start_timer("blowout",math_random(40,60),7)
	end
end

function blowout_phantoms()
	if TB3D_Modders.phantom_spawn then
		local blow=TB3D_Services.blow()			--amk.load_variable("blowout",-1)
		local bt=blowout_type()
		if blow and bt==3 and blow>run_hide and blow<can_leave then
		  local lname=level.name()
			if not in_hide and amk_hideouts.blowouts_phantoms[lname] then
				local phantoms=amk_hideouts.blowouts_phantoms[lname]
				if phantoms and phantoms.count>0 then
					if math_random()<phantoms.probability then
						if phantom_manager:phantom_count()<phantoms.count then
							local yaw	 			= math_pi*2.0*math_random()
							local radius 			= phantoms.radius*(math_random()/2.0+0.5)
							local height 			= phantoms.height*math_random()
							local a_pos 			= db.actor:position()
							local pos 				= vector():set(math_sin(yaw)*radius+a_pos.x,a_pos.y+height,math_cos(yaw)*radius+a_pos.z)
							phantom_manager.spawn_phantom(pos)
						end
					end
				end
			end
		end
	end
end

function blowout_scary_sounds()
	local blow=TB3D_Services.blow()			--amk.load_variable("blowout",-1)
	if blow and blow>get_nervous and blow<can_leave then
		local snd_obj = xr_sound.get_safe_sound_object(amk_hideouts.blowout_sounds[math_random(#amk_hideouts.blowout_sounds)])
		local a=vector()
		a.x=math_random(0,10)
		a.y=math_random(0,10)
		a.z=math_random(0,10)
		snd_obj:play_at_pos(db.actor, db.actor:position():add(a))
		amk.start_timer("blowout_ss",math_random(10,30),0)
	end
end

function blowout_psy_sound(action)
	if action=="start" then
		snd_obj_eq = sound_object([[ambient\earthquake]],sound_object.looped+sound_object.s2d)
    snd_obj_eq:play(db.actor, 4, sound_object.looped+sound_object.s2d)
	end
	if action == "stop" then
		if snd_obj_eq then snd_obj_eq:stop() end
	end
	local lname=level.name()
	if not amk_hideouts.blowouts_phantoms[lname] then return end
	local psy_sound=amk_hideouts.blowouts_phantoms[lname].psy_sounds or false	
	if not psy_sound then return end
	if action=="start" then
		local level_vol=amk_hideouts.blowouts_phantoms[lname].level_vol or 1				
		sound_obj_right, sound_obj_left = xr_sound.get_sound_object("psy_voices", "random")
		sound_obj_left:play_at_pos (db.actor, vector():set(-1, 0, 1), 0, sound_object.s2d + sound_object.looped)
		sound_obj_right:play_at_pos(db.actor, vector():set( 1, 0, 1), 0, sound_object.s2d + sound_object.looped)
		snd_volume	= level.get_snd_volume()
		level.set_snd_volume( level_vol )
	end
	if action == "stop" then
		if sound_obj_left then sound_obj_left:stop() end
		if sound_obj_right then sound_obj_right:stop() end
		if snd_volume then level.set_snd_volume(snd_volume) end
	end	
end

function Run_Blowout_pp()
	local bt=blowout_type()		--returns 5 if no blowout or type
	if TB3D_Modders.run_blowout_pp == true and has_alife_info("tutorial_end") and not has_alife_info("tb3d_harsh_environment") then		--109992
		local level_num = level.num				--110006
		if TB3D_Modders.use_info_message then TB3D_Services.packet_alert("AMK MOD: Run_Blowout_pp hr["..level.get_time_hours().."] min["..level.get_time_minutes().."]") end		--110010
		if level_num == 5 and not has_alife_info("bandit_krisyk_done") then
			TB3D_Services.stop_blow()			--skip it to not have bes and demon attack bandit base
			bt = 5								--not 0 so no news given
		elseif (level_num == 8 or level_num == 9)			--110010
		  and not has_alife_info("yan_x16_documents_gain") then
			TB3D_Services.stop_blow()			--skip it to not have Kruglov logic broken
			bt = 5								--not 0 so no news given
		elseif level_num == 3 or level_num == 4			--109975
		  and not has_alife_info("agroprom_military_case_done") then
			TB3D_Services.stop_blow()			--skip it to not have base in hideout
			bt = 5								--not 0 so no news given
		elseif level_num == 11 and not has_alife_info("bar_deactivate_radar_done") then
			TB3D_Services.stop_blow()			--109989, skip it to not happen during skull or barrier battles
			bt = 5								--not 0 so no news given
		else
			if TB3D_Modders.use_info_message then TB3D_Services.packet_alert("AMK MOD: Run_Blowout_pp["..utils.to_str(bt).."]") end
			if bt == 0 then										--normal out door, hide!
				start_outdoor_blow(bt)
			elseif bt == 1 then									--underground, don't need to hide, can sleep
				TB3D_Services.give_info("tb3d_blowout_under")	--causes message when return above ground
				TB3D_Services.stop_blow()
			elseif bt < 4 then									--no hide and phantoms
				start_outdoor_blow(bt)
			else												--no blowout in these areas		
				TB3D_Services.stop_blow()
			end
			dmx_mod.blowout_phrases()							--send message even in non blowout areas
		end
	else
		TB3D_Services.stop_blow()			--blowouts are skipped so just do anoms
		bt = 5
	end
	if bt == 1 or bt > 3 then				--no blowout
		if amk_anoms.pre_blow_off() then amk_anoms.after_blow_on() end		--110006, optimized
	end
	start_blow_timer(bt)										--always set up for next one even if run_blowout_pp = false
end
function start_outdoor_blow(bt)
	TB3D_Services.time_resync()						--return to normal time if excelerated
	sleep_manager.stopper()							--can't sleep
	if bt ~= 2 then
		amk.start_timer("blowout_ss",math_random(5,15),0)
	end
	amk.start_timer("blowout",11,0)
	--TB3D_Services.set_blow(0)	
end

function start_blow_timer(bt)
	local minutes = math_floor(TB3D_Modders.blow_time_basis + (math_random()*TB3D_Modders.blow_time_shift) - (TB3D_Modders.blow_time_shift/2))
	if TB3D_Modders.use_info_message then TB3D_Services.packet_alert("AMK MOD: start_blow_timer["..utils.to_str(minutes).."] minutes") end
	amk.g_start_timer("blow_shift", 0, 0, minutes)
	if bt == 0 or bt == 2 or bt == 3 then news_main.next_blow(minutes) end			--only outdoor levels
end

---------------------------------------------------
--' TimeFactor = 5
--' GameMin = 12 RealSec
--' TimeBlowout = 184 RealSec
--' Home (Timer = 36 sec)
--' The first phase (Timer = 36 sec)
--' The second phase (Timer = 36 sec)
--' Third phase (Timer = 36 sec)
--' fourth phase (Timer = 60 sec)
--' tail (Timer = 0 sec)
--' phase 6 = was in a blowout and changed to non blowout level
---------------------------------------------------
function Blowout_pp(phase)
	local bt=TB3D_Services.blowout_type()
	if TB3D_Modders.Global_Debug then 
		TB3D_Services.packet_alert("AMK MOD: blowout ["..phase.."]["..bt.."]") 
	end
	if bt == 0 or bt == 2 or bt == 3 then 
		local results = TB3D_Modders.blow_phase_basis + (math_random()*TB3D_Modders.blow_phase_shift) - (TB3D_Modders.blow_phase_shift/2)
		if results < TB3D_Modders.blow_phase_basis then
			results = TB3D_Modders.blow_phase_basis
		elseif results > TB3D_Modders.blow_phase_max then
			results = TB3D_Modders.blow_phase_max
		end
		--TB3D_Services.packet_alert("AMK MOD: blowout ["..phase.."]")
		if phase==0 then
			if bt ~= 2 then
				level.set_weather("pre_blow",true)
				if TB3D_Modders.surge_day_effect == true then level.set_weather_fx("surge_day") end			--COP style sky effects
				level.add_cam_effector("camera_effects\\shell_shock.anm", 2004, false, "")
				local snd_obj = xr_sound.get_safe_sound_object([[ambient\organic_moan1]])
				snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
			end
			level.add_pp_effector("monolith_off.ppe", 2003, false)							--109980
			amk.g_start_timer("blowout", 0, 0, 1, 1)
			TB3D_Services.set_blow(phase)	
		elseif phase==1 then
			--TB3D_Services.packet_alert("AMK MOD: blowout ["..phase.."]")
			amk_anoms.pre_blow_off()
			amk.g_start_timer("blowout", 0, 0, results, 2)
			TB3D_Services.set_blow(phase)								--109980
		elseif phase==2 then
			if bt ~= 2 then
				local snd_obj2 = xr_sound.get_safe_sound_object([[ambient\earthquake]])
				snd_obj2:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
				level.add_cam_effector("camera_effects\\earthquake.anm", 2002, true, "")
				local snd_obj = xr_sound.get_safe_sound_object([[anomaly\blowout]])
				snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
				blowout_psy_sound("start")
				level.add_pp_effector("vibros.ppe", 2001, true)
			end
			in_hide=false
			amk.g_start_timer("blowout", 0, 0, 1, 3)
			TB3D_Services.set_blow(phase)								--109980
		elseif phase==3 then		--npc hideout phase
			--TB3D_Services.packet_alert("AMK MOD: blowout ["..phase.."]")
			if bt ~= 2 then
				if TB3D_Modders.blowout_crows == true then TB3D_hit_styles.blowout_crows() end
			end
			amk.g_start_timer("blowout",0,0,results,4)
			TB3D_Services.set_blow(phase)							--109980
		elseif phase==4 then
			--TB3D_Services.packet_alert("AMK MOD: blowout ["..phase.."]")
			level.add_pp_effector("monolith_off.ppe", 2003, false)
			amk.g_start_timer("blowout", 0, 0, 1, 5)
			TB3D_Services.set_blow(phase)							--109980
		elseif phase==5 then
			--TB3D_Services.packet_alert("AMK MOD: blowout ["..phase.."]")
			if bt ~= 2 then
				level.remove_cam_effector(2002)
				level.remove_pp_effector(2001)
			end
			amk_anoms.after_blow_on()
			amk.g_start_timer("blowout", 0, 0, 1, 6)
			TB3D_Services.set_blow(phase)							--109980
		elseif phase==6 then
			--TB3D_Services.packet_alert("AMK MOD: blowout ["..phase.."]")
			level.add_pp_effector("monolith_off.ppe", 2003, false)
			TB3D_Services.stop_blow()							--109980
			if bt ~= 2 then
				blowout_psy_sound("stop")
				local snd_obj = xr_sound.get_safe_sound_object([[anomaly\teleport_work2]])
				snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
				if TB3D_Modders.zombie_team == true then
					tag_spb.zombie_team()
				end 
				TB3D_Services.time_resync()										--resync time of day
				if level_weathers.is_indoor(level.name()) == false then
					level_weathers.set_new_weather("stormy")
					TB3D_Services.give_info("tb3d_force_weather")
				end
			end
			if TB3D_Services.is_collector(12) then
				TB3D_Services.give_info("tb3d_blowout_done")
			end
			--collectgarbage("collect")										-- force memory cleanup
		end
	elseif phase == 7 then													--indoor from outdoor?
		--TB3D_Services.packet_alert("AMK MOD: blowout ["..phase.."]")
		level.remove_cam_effector(2002)
		TB3D_Services.stop_blow()							--109980
		TB3D_Services.time_resync()											--resync time of day
		if level_weathers.is_indoor(level.name()) == false then
			level_weathers.set_new_weather("stormy")
			TB3D_Services.give_info("tb3d_force_weather")
		end
	end
end

function on_blowout_hit(npc,hide)
	--TB3D_Services.packet_alert("AMK MOD: blowout hit")
	local bt=blowout_type()
	local blow=TB3D_Services.blow()			--109980
	if bt>get_nervous or (blow and blow~=huddle_up) then 
		return false
	end
	return do_blowout_hits(npc,hide)
end

function do_blowout_hits(npc,hide)	
	--if npc and TB3D_Modders.blowout_npc == true then
		if npc.alive and npc:alive() then
			local lname=level.name()
			local need_hit=true
			if hide and hide.zone then							--npc, don't hit them if protection < 100%
				if check_npc_in_hideout(npc,hide) == true then	--this prevents many dead/wounded in hideout
					need_hit = false
				end
			end
			local blow = TB3D_Services.blow()			--109980
			if need_hit and blow and blow == huddle_up then
				--TB3D_Services.packet_alert("AMK MOD: blowout call hit npc")
				TB3D_hit_styles.blowout_amk(npc, (amk_hideouts.blowout_damages[lname] or 0.01))
			end
			return need_hit
		--else
			--TB3D_Services.packet_alert("AMK MOD: blowout hits, npc is dead")
		end
	--else
		--TB3D_Services.packet_alert("AMK MOD: blowout hits, npc is nil!!!!!!!!")
	--end
	return false
end

function check_npc_in_hideout(npc,hide)
	if hide and hide.zone then				--protection only
		for k,v in pairs(hide.zone) do
			if v.p3 then 
				if amk.check_npc_in_box(npc,vector():set(unpack(v.p1)),vector():set(unpack(v.p2)),vector():set(unpack(v.p3))) == true then return true end
			else
				if amk.check_npc_in_box(npc,vector():set(unpack(v.p1)),vector():set(unpack(v.p2))) == true then return true end
			end
		end
	end
--[[	if npc.name then
		TB3D_Services.packet_alert("AMK MOD: check_npc_in_hideout npc name["..utils.to_str(npc:name()).."] not hiding")
	elseif npc.id then
		TB3D_Services.packet_alert("AMK MOD: check_npc_in_hideout npc no name, id["..utils.to_str(npc:id()).."] not hiding")
	else
		TB3D_Services.packet_alert("AMK MOD: check_npc_in_hideout npc no name or id, not hiding")
	end]]--
	return false
end

function check_actor_hide()
	if has_alife_info("anabiotic_protection_info") or TB3D_Services.is_indoor(false) == true then
		return nil 									--100% protection
	else
		local hides=amk_hideouts.hide[level.name()]
		local tmp
		if hides then
			for i,o in ipairs(hides) do
				if o.zone then
					for j,v in ipairs(o.zone) do
						if v.p3 then
							tmp=amk.check_npc_in_box(db.actor,vector():set(unpack(v.p1)),vector():set(unpack(v.p2)),vector():set(unpack(v.p3)))
						else
							tmp=amk.check_npc_in_box(db.actor,vector():set(unpack(v.p1)),vector():set(unpack(v.p2)))
						end
						if tmp then
							if o.defence then 		--see if 100% protection (defence=0) or less protection (defence > 0)
								return o.defence
							else
								return nil			--in hideout with 100% protection
							end
						end
					end
				end
			end
		end
	end
	return 1										--not in hideout
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **    **      RECIPES       **   **   **   **   **    **   **   **   ** 
--'*******************************************************************************
function check_usable_item(obj)		--VICTIM ONLY, actor checks these directly in binder, called by motivator and physics on_use callbacks
	if obj ~= nil then
		if TB3D_Modders.use_info_message then
			TB3D_Services.packet_alert("amk mod: check usable item["..utils.to_str(obj:name()).."] sect["..utils.to_str(obj:section()).."]")
		end
		local info_given = false
		local clsid = obj:clsid()
		if clsid and (IAmAStalker[clsid] or IAmAMonster[clsid]) then						--109981
			if obj:alive() == false then
				db.set_corpse_checked(obj, 0)												--set no protected items as actor searched it
				if TB3D_Modders.use_info_message then
					TB3D_Services.packet_alert("amk mod: check usable item[corpse checked]")
				end
			end
		end
		local comm
		if obj.character_community ~= nil then
			comm = obj:character_community()
		else
			comm = "nil"
		end
		local lname = level.name()
		if lname == "pripyat" and obj:name() == "pri_b306_ph_button" then		--109998, use elevator button
			if has_alife_info("start_cop_prip_info_lab") or TB3D_Services.is_collector(13) then		--110007
				dmx_mod.play_sound([[ambient\switch_1]])
				TB3D_Services.check_box_closed()
				TB3D_Services.teleportate("labx8_elev")
			else
				dmx_mod.play_sound([[ambient\switch_2]])
			end
		elseif TB3D_Services.is_collector(13) then
			info_given = TB3D_Collector.check_usable_item(obj, comm)			--110004
		elseif obj:name()=="mil_stalker0012" then
			info_given = TB3D_Services.give_info("info_amk_recipt_stone_dikoobraz")
		elseif comm=="killer" then
			if lname=="l07_military" then
				info_given = TB3D_Services.give_info("info_amk_recipt_titan_kolobok")
			elseif has_alife_info("info_amk_recipt_dummy") then
				info_given = TB3D_Services.give_info("info_amk_recipt_dummy_fire")
				  or TB3D_Services.give_info("info_amk_recipt_dummy_bright")
				  or TB3D_Services.give_info("info_amk_recipt_dummy_moon")
				  or TB3D_Services.give_info("info_amk_recipt_dummy_puding")
			end
		elseif comm=="monolith" then
			if lname=="l10_radar" then
				info_given = TB3D_Services.give_info("info_amk_recipt_controller_skalp")
			elseif has_alife_info("info_amk_recipt_dummy") then
				info_given = TB3D_Services.give_info("info_amk_recipt_dummy_fire")
				  or TB3D_Services.give_info("info_amk_recipt_dummy_bright")
				  or TB3D_Services.give_info("info_amk_recipt_dummy_moon")
				  or TB3D_Services.give_info("info_amk_recipt_dummy_puding")
			end
		end
		if info_given then amk_dialogs.info_received() end
	end
	--TB3D_Services.packet_alert("amk mo: check usable item["..utils.to_str(obj:name()).."] done")
end

--'*******************************************************************************
--'   **   **   -- Dynamic HUD Gift from ATT, Arhara and Kolmogor --   **   **  
--'*******************************************************************************!!!!TB3D
local suitHudName_wotType = {
	["bandit_gaz_outfit_"]				= "hud_gaz",
	["dolg_gaz_outfit_"]				= "hud_gaz",
	["monolit_gaz_outfit_"]				= "hud_gaz",
	["neytral_exo_gaz_outfit_"]			= "hud_gaz",
	["neytral_gaz_outfit_"]				= "hud_gaz",
	["neytral_novice_gaz_outfit_"]		= "hud_gaz",
	["outfit_svoboda_"]					= "hud_gaz",
	["svoboda_gaz_outfit_"]				= "hud_gaz",
	["svoboda_heavy_gaz_outfit_"]		= "hud_gaz",
	["dolg_scientific_outfit"]			= "hud_sci",
	["scientist_suit_white"]			= "hud_sci",
	["fire_outfit"]						= "hud_sci",
	["ecolog_outfit"]					= "hud_sci",
	["freedom_scientific_outfit"]		= "hud_sci",
	["merc_scientific_outfit"]			= "hud_sci",
	["monolit_scientific_outfit"]		= "hud_sci",
	["protection_outfit"]				= "hud_sci",
	["nebo_exo_outfit"]					= "hud_sci",
	["nebo_scientific_outfit"]			= "hud_sci",
	["scientific_outfit"]				= "hud_sci",
	["killer_gaz_outfit_"]				= "hud_merc",
	["outfit_killer_"]					= "hud_merc",
	["military_outfit"]					= "hud_mil",
	["militaryspec_outfit"]				= "hud_mil",
	["outfit_specnaz_"]					= "hud_mil",
	["specops_outfit"]					= "hud_mil",
	["nano_outfit"]						= "hud_nano",
	["nano_outfit_addw"]				= "hud_nano_addw",	--aleks1970
	["broken_exoskeleton"]				= "hud_exo",
	["dolg_black_exoskeleton"]			= "hud_exo",
	["exo_bandit_outfit"]				= "hud_exo",
	["exo_outfit"]						= "hud_exo",
	["killer_blue_exoskeleton"]			= "hud_exo",
	["military_exo_outfit"]				= "hud_exo",
	["monolit_exoskeleton"]				= "hud_exo",
	["neytral_exo_antigas_outfit"]		= "hud_exo",
	["outfit_exo_"]						= "hud_exo",
	["svoboda_exoskeleton"]				= "hud_exo",
	["svoboda_yellow_exo_outfit_"]		= "hud_exo",
	["meceniy_outfit_new"]				= "hud_exo_military_strelok",	--aleks1970
	["exo_mil_exoskeleton_"]			= "hud_exo_military",
	["meceniy_outfit_strelok"]			= "hud_exo_military_strelok"	--aleks1970
}
--called by amk.script user function
local freemem = 0
local freemem2 = 0
function doabcevents()
	if db.actor and db.actor:alive() then
		local hud_opt = amk.load_variable("option_hud",-1)
		if hud_opt < 0 then
			hud_opt = 3								--full on if not exist
			amk.save_variable("option_hud", hud_opt)
		end
		if hud_opt > 0 then    --dyn hud on    !!!!TB3D
			local chkfreetime = time_global()
			if freemem == 0 then freemem = time_global() + 1000 end
			if chkfreetime > freemem then
				freemem = 0
				check_hud()
			end
			zoom_hud()
			if hud_opt == 3 then		--breath and blood
				local chkfreetime2 = time_global()
				if freemem2 == 0 then freemem2 = time_global() + 40 end
				if chkfreetime2 > freemem2 then
					freemem2 = 0
					init_blurs()
				end
			end
		else
			--TB3D_Services.packet_alert("HUD: turn off hud")
			setmysuithud()
		end
	end
end

--local current_suithud
local mycurrent_suithud
local suit_condition
local wotsuittype = ""
local smoktime = 0
function check_hud()
	local gsmktime = time_global()
	if smoktime == 0 then smoktime = time_global() + 4000 end
	local suithudtype = nil
	local suithudname
	local csuithud = db.actor:get_current_outfit()
	if csuithud ~= nil then suithudname = csuithud:section() end
	if suithudname ~= nil then
		suit_condition = ""
		if csuithud:condition() > 0.87 then
			suit_condition = "blue"
		elseif csuithud:condition() > 0.69 then
			suit_condition = "green"
		elseif csuithud:condition() > 0.60 then
			suit_condition = "yellow"
		elseif csuithud:condition() > 0.40 then
			suit_condition = "red"
		elseif csuithud:condition() > 0.25 then
			suit_condition = "red2"
		else
			suit_condition = "red3"
		end
		if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("AMK MOD: check HUD suit["..suithudname.."]") end
		for k,v in pairs(suitHudName_wotType) do
			if string_find(suithudname, k) then
				suithudtype = v.."_"..suit_condition
				wotsuittype = v
				if TB3D_Modders.Global_Debug then TB3D_Services.packet_alert("AMK MOD: check HUD suit["..suithudname.."] key["..k.."] type["..v.."] found") end
				break
			end
		end
	end
	if amk.load_variable("option_hud",3)==0 then   
		suithudtype = nil                              
		hidden_slots.remove_helmet_static()
	end   
	-- DMX MOD on	-- Remove the thin suits at the sight of the third person
	if not db.actor:alive() then suithudtype = nil hidden_slots.remove_helmet_static() end
	local helmet = hidden_slots.get_item_in_helmet_slot()
	if db.actor:bone_position("bip01_head"):distance_to_sqr(device().cam_pos) > 7 then
		suithudtype = nil
		hidden_slots.remove_helmet_static()
	elseif not suithudtype and helmet then
		hidden_slots.add_helmet_static(helmet)
	end
	-- DMX MOD off
	setmysuithud(suithudtype)
end
function get_my_suit_hud()
	return mycurrent_suithud
end

local suitfirstrun = "yes"
function setmysuithud(hudtype)
	--TB3D_Services.packet_alert("amk mod: setmysuithud")
	if hudtype == nil then
		local wchud = get_hud():GetCustomStatic(mycurrent_suithud)
		if wchud ~= nil then get_hud():RemoveCustomStatic(mycurrent_suithud) end
		mycurrent_suithud = nil
		suitfirstrun = "yes"
		set_blurs(false)
		return
	end
	--TB3D_Services.packet_alert("amk mod: setmysuithud 2")
	if hudtype ~= mycurrent_suithud then
		if mycurrent_suithud then
			get_hud():RemoveCustomStatic(mycurrent_suithud)
		end
		--TB3D_Services.packet_alert("amk mod: setmysuithud 3")
		if hudtype then
			get_hud():AddCustomStatic(hudtype)
			--TB3D_Services.packet_alert("amk mod: setmysuithud["..utils.to_str(hudtype).."]")
			dmx_mod.hidden_static() -- DMX MOD
			if string_find(hudtype, wotsuittype) then
				if suitfirstrun == "no" and suit_condition ~= "green" and suit_condition ~= "blue" then
					local snd_obj = sound_object("material\\glass\\glass_fall03hl")
					snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 9.0)
				end
				if suitfirstrun == "yes" then suitfirstrun = "no" end
			end
		end
		mycurrent_suithud = hudtype
	end
end

function init_blurs()
	if mycurrent_suithud ~= nil and not string_find(mycurrent_suithud,"_red3") and not string_find(mycurrent_suithud,"hud_sci_") then
		local zoom=67.5/device().fov
		zoom=(zoom-1)*1.5+1
		if zoom<1.001 then
			zoom=1.001
		end
		local stretchy=0.75/(math_floor(device().aspect_ratio*1000)/1000)
		if stretchy<1 then stretchy=1 end
		local rect={x=-winy*zoom+winy,y=(-hwinx*zoom+hwinx)*stretchy-(stretchy-1)*300,w=winx*zoom,h=winy*zoom*stretchy}
		set_blurs(true,rect)
	else
		set_blurs(false)
	end
end

local blurs=nil
local blurval=0 -- the level of sweat from 0 to 1
local blurlt=0 -- last update time
local blurcyctime=0 -- start time of the last cycle dvhaniya (vvdoh)
local blurlastphase=0
local blurcolor=255
function set_blurs(enabled,rect)
	--TB3D_Services.packet_alert("breath")
	if (not blurs) or get_hud():GetCustomStatic("hud_blur1")==nil then
		blurs={}
		for i=1,4 do
			get_hud():AddCustomStatic("hud_blur"..i)
			blurs[i]=get_hud():GetCustomStatic("hud_blur"..i):wnd()
			blurs[i]:SetWidth(0)
		end
	end
	if not enabled then
		for i=1,4 do
			blurs[i]:SetWidth(0)
		end
		return    
	end
	-- cycle dependency: 0->1->0 0->1->2->4->5->0 0->1->2->3->4->5->0 5->4->3->4->5 4->3->4
	local power=db.actor.power
	local period=1.0+power*power*1.0 -- current rate from 30 to 120 cycles per minute
	local expirt=0.3
	local breathpower=3
	local delta=(time_global()-blurlt)/1000 -- delta in seconds
	local phase=(time_global()-blurcyctime)/1000 -- Phase cycle in seconds.
	blurlt=time_global()
	if phase>period then
		phase=phase%period
		blurcyctime=blurlt-phase*1000
	end
	if blurlastphase>phase then
		blurlastphase=0
	end
	local blurdelta=delta*-0.7 -- Work ventillyatsii
	if blurlastphase<expirt and phase<expirt then
		blurdelta=blurdelta+(phase-blurlastphase)*breathpower
	elseif blurlastphase<expirt then
		blurdelta=blurdelta+(expirt-blurlastphase)*breathpower
	end
	blurlastphase=phase
	blurval=blurval+blurdelta
	if blurval>0.999 then
		blurval=0.999
	elseif blurval<0 then
		blurval=0
	end
	local tm=math_floor(blurval*3)
	local tmn=(tm+1)
	local v=blurval*3-math_floor(blurval*3)
	v=1-v
	local v1=1-v
	if tm~=0 then
		blurs[tm]:SetColor(GetARGB(v*blurcolor,blurcolor,blurcolor,blurcolor))
	end
	if tmn~=0 then
		blurs[tmn]:SetColor(GetARGB(v1*blurcolor,blurcolor,blurcolor,blurcolor))
	end
	for i=1,4 do
		if i==tm or i==tmn then
			blurs[i]:SetWndRect(Frect():set(rect.x,rect.y,rect.w,rect.h))
		else
			blurs[i]:SetWndRect(Frect():set(rect.x,rect.y,0,0))
		end
	end
--TB3D_Services.packet_alert("breath done")
end

-- The effect of targeting		!!!!TB3D new 134
-- Author: Bak
-- Adaptation: Charsi
local pre_fov = 0
local precf = nil
local ztime = time_global()
local zbias = Frect():set(0,0,winx,winy)
local cf = 0
local zenc
function zoom_hud()
	local hud = get_hud():GetCustomStatic(mycurrent_suithud or "helmet_hud_static")
	if hud then
		local fov = math.floor((device().fov+0.02)*10)
		local delta = time_global()-ztime
		ztime = time_global()
		if not zenc or (fov > 380 and pre_fov < fov) then
			zenc = nil
			if cf > 0 then
				cf = cf-(delta/400)
				if cf < 0 then
					cf = 0
				end
			end
		elseif zenc or (fov < 580 and pre_fov > fov) then
			zenc = true
			if cf < 1 then
				cf = cf+(delta/400)
				if cf > 1 then
					cf = 1
				end
			end
		end
		if precf == nil then
			precf = cf
		elseif cf ~= precf then
			local wpn = db.actor:active_item()
			if wpn then
				if wpn:clsid() == clsid.wpn_binocular_s then
					zbias:set(-100*cf,-100*cf,winx+101*cf,winy+101*cf)
				elseif rx_utils.addon_attached(wpn,"sc") then
					zbias:set(-350*cf,-175*cf,winx+350*cf,winy+175*cf)
				else
					zbias:set(-200*cf,-100*cf,winx+200*cf,winy+100*cf)
				end
				hud:wnd():SetWndRect(zbias)
			elseif precf ~= 0 then
				zbias:set(0,0,winx,winy)
				hud:wnd():SetWndRect(zbias)
			end
			precf = cf
		end
		pre_fov = fov
	end
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **     SPAWN_OBJ        **   **   **   **   **    **   **   **   **   
--'*******************************************************************************
function spawn_fuel()
	local ballons = {
	{108.16, -6.30, -18.17, 412158, 115},
	{370.12, 15.06, -39.48, 594401, 0},
	{58.30, 19.36, 156.50, 345136, 97},
	{-92.21, -1.18, -212.66, 115177, 268},
	{-74.17, 1.80, 8.45, 127766, 329},
	{3.18, 1.24, 42.48, 243919, 490},
	{15.35, -1.90, 2.40, 255433, 479},
	{77.54, 0.30, -108.47, 312366, 427},
	{-145.54, -0.00, -199.61, 92520, 650},
	{-130.08, 10.00, -196.67, 109214, 629},
	{-140.13, 10.00, -197.94, 98647, 629},
	{37.28, 1.02, -49.90, 220638, 1084},
	{476.68, -46.94, -0.23, 155714, 1919},
	{76.80, -2.54, -23.93, 36304, 1970},
	{94.78, 0.03, -6.88, 88986, 1514},
	{-3.24, -11.75, -263.07, 33794, 1448}
	}
	local kanisters = {
	{-293.80, -14.18, -15.36, 15703, 67},
	{-16.57, 2.48, 58.82, 260308, 88},
	{-74.81, -1.30, 160.52, 196218, 163},
	{-69.94, 0.97, 6.51, 131411, 329},
	{64.01, 0.60, 148.46, 235341, 364},
	{63.29, -0.20, 5.10, 299326, 461},
	{-28.52, -1.04, -181.84, 211644, 676},
	{2.93, -1.88, -13.30, 176553, 1047},
	{41.71, 4.54, -86.36, 227110, 1100},
	{7.90, 1.41, -71.93, 183138, 1041},
	{158.71, -0.76, -259.73, 358950, 962},
	{-342.92, -13.60, 390.01, 11235, 1847},
	{305.22, -36.99, -24.40, 68330, 1930},
	{55.02, 1.17, 40.35, 68094, 1511},
	{-114.14, -0.00, 121.75, 43453, 1315},
	{31.33, 5.60, -13.51, 4683, 1538}
	}
	local obj
	for k,v in pairs(ballons) do
		if #v == 5 then
			obj = alife():create("amk_ballon",vector():set(v[1], v[2], v[3]), v[4], v[5])
			if obj and TB3D_Modders.show_news_spots then
				amk.add_spot_on_map(obj.id, "red_location", "ballon")
			end
		end
	end
	for k,v in pairs(kanisters) do
		if #v == 5 then
			obj = alife():create("amk_kanistra",vector():set(v[1], v[2], v[3]), v[4], v[5])
			if obj and TB3D_Modders.show_news_spots then
				amk.add_spot_on_map(obj.id, "red_location", "kanistra")
			end
		end
	end
end

-- + T at a checkpoint
function spawn_military_btr()
	spawn_military_tech_pack( alife():create("vehicle_btr",vector():set(-168.11, -29.71, -303.21),81808,38 ) ,"vehicle_btr")
	spawn_military_tech_pack( alife():create("vehicle_btr",vector():set(-237.85, -26.23, -378.81),17147,14 ) ,"vehicle_btr")
	--spawn_military_tech_pack( alife():create("vehicle_btr",vector():set(-189.55,-0.24,-140.49),46901,559),"vehicle_btr")
	--spawn_military_tech_pack( alife():create("vehicle_btr",vector():set(-93.81,0,-185.82),146369,607),"vehicle_btr")
	spawn_military_tech_pack( alife():create("helicopter",vector():set(-150.0,-20.0,-620.0),128298,11 ) ,"helicopter")
	--spawn_military_tech_pack( alife():create("vehicle_btr",vector():set(-135.49, -30.13, -375.27),115062,20 ) ,"vehicle_btr")
	--spawn_military_tech_pack( alife():create("vehicle_btr",vector():set(-167.58, -29.48, -364.26),82401,31 ) ,"vehicle_btr")
end

function spawn_military_tech_pack(obj, spawn_item, cust_ltx)	
	local ltx_name
	if cust_ltx then
		ltx_name = "scripts\\tb3d\\"..cust_ltx
	else
		ltx_name = "scripts\\esc\\esc_blockpost"
	end
	local packet = net_packet()
	obj:STATE_Write(packet)
	local game_vertex_id = packet:r_u16()						-- properties cse_alife_object
	local cse_alife_object__unk1_f32 = packet:r_float()
	local cse_alife_object__unk2_s32 = packet:r_s32()
	local level_vertex_id = packet:r_s32()
	local object_flags = packet:r_s32()
	local custom_data = packet:r_stringZ()
	local story_id = packet:r_s32()
	local cse_alife_object__unk3_s32 = packet:r_s32()
	local model_visual = packet:r_stringZ()						-- properties cse_visual
	local cse_visual__unk1_u8 = packet:r_u8()
	local motion_name
	if spawn_item == "helicopter" then
		motion_name = packet:r_stringZ()						-- properties cse_motion
	end
	local skeleton_name = packet:r_stringZ()					-- properties cse_ph_skeleton
	local cse_ph_skeleton__unk1_u8 = packet:r_u8()
	local cse_ph_skeleton__unk2_u16 = packet:r_u16()
	local health 
	local cse_alife_helicopter__unk1_sz 
	local engine_sound 
	if spawn_item == "helicopter" then
		cse_alife_helicopter__unk1_sz = packet:r_stringZ()		-- properties cse_alife_helicopter
		engine_sound = packet:r_stringZ()
	elseif	spawn_item == "vehicle_btr" then
		health = packet:r_float()
	end
	packet:w_begin(game_vertex_id)								-- fill parameters
	packet:w_float(cse_alife_object__unk1_f32)					-- properties cse_alife_object
	packet:w_s32(cse_alife_object__unk2_s32)
	packet:w_s32(level_vertex_id)
	object_flags = bit_not(5)	-- ~5 = 0xfffffffa
	packet:w_s32(object_flags)
	if spawn_item == "helicopter" then
		packet:w_stringZ("[logic]\ncfg = "..ltx_name.."_heli.ltx")
	elseif	spawn_item == "vehicle_btr" then
		packet:w_stringZ("[logic]\ncfg = "..ltx_name.."_btr.ltx")
	end
	packet:w_s32(-1)
	packet:w_s32(cse_alife_object__unk3_s32)
	packet:w_stringZ(model_visual)									-- properties cse_visual
	packet:w_u8(cse_visual__unk1_u8)
	if spawn_item == "helicopter" then
		packet:w_stringZ(motion_name)		
	end 
	skeleton_name = "idle"
	packet:w_stringZ(skeleton_name)									-- properties cse_ph_skeleton
	packet:w_u8(cse_ph_skeleton__unk1_u8)
	packet:w_u16(cse_ph_skeleton__unk2_u16)
	if spawn_item == "helicopter" then								-- properties cse_alife_helicopter
		cse_alife_helicopter__unk1_sz = "idle"
		engine_sound = "alexmx\\helicopter"
		packet:w_stringZ(cse_alife_helicopter__unk1_sz)
		packet:w_stringZ(engine_sound)
	elseif  spawn_item == "vehicle_btr" then
		health = 1
		packet:w_float(health)
	end	
	packet:r_seek(0)
	obj:STATE_Read(packet, packet:w_tell())
end

--'*******************************************************************************
--'   **   **   **   **   **    **   **   **       AMK_RESPAWNS     **   **   **   **   **    **   **   **   
--'*******************************************************************************
function switch_monster_online(obj)
	se_monster.need_be_online[obj.id]=true
end

function switch_monster_offline(obj)
	se_monster.need_be_online[obj.id]=false
end

function respawned(obj,respawner)
	if obj then
		if TB3D_Modders.use_respawn_message == true then
			TB3D_Services.packet_alert("amk mod: respawned["..utils.to_str(obj:name()).."]") --["..utils.to_str(respawner:name()).."]")
		end
		if string_find(obj:name(), "sim_stalker_general") or string_find(obj:name(), "sim_stalker_veteran1") then return end	--bad desc in new files
		if respawner then
			if respawner.spawn_ini then
				if obj.clsid then
					if IAmAMonster[obj:clsid()] then
						local sini = respawner:spawn_ini()
						if sini and sini:line_exist ("respawn", "creature_binded_logic") == true then
							local cfg_name = utils.cfg_get_string(sini, "respawn", "creature_binded_logic", false, false, false, "")
							local t = amk.read_monster_params(obj)
							t.custom = "[logic]\ncfg = scripts\\amk\\"..cfg_name..".ltx"
							amk.write_monster_params(t, obj)
							if TB3D_Modders.use_respawn_message == true then
								TB3D_Services.packet_alert("amk mod: respawned["..utils.to_str(obj:name()).."] cfg["..utils.to_str(t.custom).."] monster clsid["..utils.to_str(obj.clsid).."]")
							end
						end
					elseif IAmAStalker[obj:clsid()] then
						local sini = respawner:spawn_ini()
						if sini and sini:line_exist ("respawn", "creature_binded_logic") == true then
							local cfg_name = utils.cfg_get_string(sini, "respawn", "creature_binded_logic", false, false, false, "")
							local t = amk.read_stalker_params(obj)
							t.custom = "[logic]\ncfg = scripts\\amk\\"..cfg_name..".ltx"
							amk.write_stalker_params(t, obj)
							if TB3D_Modders.use_respawn_message == true then
								TB3D_Services.packet_alert("amk mod: respawned["..utils.to_str(obj:name()).."] cfg["..utils.to_str(t.custom).."] stalker clsid["..utils.to_str(obj.clsid).."]")
							end
						end
					end	
				elseif obj.name then
					if TB3D_Modders.use_respawn_message == true then
						TB3D_Services.packet_alert("amk mod: respawned["..utils.to_str(obj:name()).."] no clsid!!!!!")
					end
					local sini = respawner:spawn_ini()
					if sini then
						if sini:line_exist ("respawn", "creature_binded_logic") == true then
							local cfg_name = utils.cfg_get_string(sini, "respawn", "creature_binded_logic", false, false, false, "")
							if cfg_name then
								local t = amk.read_monster_params(obj)
								if t then
									t.custom = "[logic]\ncfg = scripts\\amk\\"..cfg_name..".ltx"
									if obj.amk_name then obj.clsid = TB3D_Population_Control.get_clsid(obj.amk_name) end
									if not obj.clsid then obj.clsid = TB3D_Population_Control.get_clsid(obj:name()) end
									if TB3D_Modders.use_respawn_message == true then
										TB3D_Services.packet_alert("amk mod: respawned["..utils.to_str(obj:name()).."] cfg["..utils.to_str(t.custom).."] monster clsid["..utils.to_str(obj.clsid).."]!!!!!")
									end
									amk.write_monster_params(t, obj)
								else
									t = amk.read_stalker_params(obj)
									if t then
										t.custom = "[logic]\ncfg = scripts\\amk\\"..cfg_name..".ltx"
										if TB3D_Modders.use_respawn_message == true then
											TB3D_Services.packet_alert("amk mod: respawned["..utils.to_str(obj:name()).."] cfg["..utils.to_str(t.custom).."] stalker!!!!!")
										end
										obj.clsid = "script_stalker"
										amk.write_stalker_params(t, obj)
									else --if TB3D_Modders.use_respawn_message == true then
										TB3D_Services.packet_alert("amk mod: respawned["..utils.to_str(obj:name()).."] no cfg section!!!!!")
									end
								end
							elseif TB3D_Modders.use_respawn_message == true then
								TB3D_Services.packet_alert("amk mod: respawned["..utils.to_str(obj:name()).."] not found!!!!!")
							end
						else
							if TB3D_Modders.use_respawn_message == true then
								TB3D_Services.packet_alert("amk mod: respawned["..utils.to_str(obj:name()).."] no respawn section!!!!!")
							end
							if obj.amk_name then obj.clsid = TB3D_Population_Control.get_clsid(obj.amk_name) end
							if not obj.clsid then obj.clsid = TB3D_Population_Control.get_clsid(obj:name()) end
							local sect = get_section(obj)
							if obj.clsid and not obj_sect == "zombied" then					--110000
								if TB3D_Modders.use_respawn_message == true then
									TB3D_Services.packet_alert("amk mod: ["..utils.to_str(obj:name()).."]["..utils.to_str(obj.amk_name).."] created monster clsid["..utils.to_str(obj.clsid).."] !!!!")
								end
								local t = amk.read_monster_params(obj)
								if t then amk.write_monster_params(t, obj) end
							else
								if string_find(sect, "zombied") 
								  or string_find(sect, "bandit")
								  or string_find(sect, "stalker")
								  or string_find(sect, "ecolog")
								  or string_find(sect, "_dolg")
								  or string_find(sect, "blizn_krug")
								  or string_find(sect, "military")
								  or string_find(sect, "killer")
								  or string_find(sect, "naem_koster")
								  or string_find(sect, "ohotnik")
								  or string_find(sect, "svoboda")
								  or string_find(sect, "svobodovzu")
								  or string_find(sect, "orly_")
								  or string_find(sect, "monolit")
								  or string_find(sect, "banda_")
								  or string_find(sect, "naymitu_")
								  or string_find(sect, "lastday")
								  or string_find(sect, "sniper")
								  or string_find(sect, "hunter")
								  or string_find(sect, "soldier")
								  or string_find(sect, "gulag")
								  or string_find(sect, "nebo_")
								  or string_find(sect, "black_generators_respawn")
								  or string_find(sect, "freedom") then
									local t = amk.read_stalker_params(obj)
									if t then
										obj.clsid = clsid.script_stalker
										amk.write_stalker_params(t, obj)
									end
									if TB3D_Modders.use_respawn_message == true then
										TB3D_Services.packet_alert("amk mod: ["..utils.to_str(obj:name()).."]["..utils.to_str(obj.amk_name).."] created stalker clsid["..utils.to_str(obj.clsid).."] !!!!")
									end
								else
									--if TB3D_Modders.use_respawn_message == true then
										TB3D_Services.packet_alert("amk mod: ["..utils.to_str(obj:name()).."]["..utils.to_str(obj.amk_name).."]["..utils.to_str(sect).."] no clsid found !!!!")
									--end
								end
							end
						end
					else --if TB3D_Modders.use_respawn_message == true then
						TB3D_Services.packet_alert("amk mod: respawned["..utils.to_str(obj:name()).."] no sini!!!!!")
					end
				else --if TB3D_Modders.use_respawn_message == true then
					TB3D_Services.packet_alert("amk mod: respawned["..utils.to_str(obj).."] no name!!!!!")
				end
			else --if TB3D_Modders.use_respawn_message == true then
				TB3D_Services.packet_alert("amk mod: respawned["..utils.to_str(obj:name()).."] no ini file!!!!!")
			end
		else --if TB3D_Modders.use_respawn_message == true then
			TB3D_Services.packet_alert("amk mod: respawned["..utils.to_str(obj:name()).."] no spawner!!!!!")
		end
	else
		TB3D_Services.packet_alert("amk mod: respawned no object!!!!!")
	end
	if TB3D_Modders.use_respawn_message == true then TB3D_Services.packet_alert("amk mod: respawned done") end
end

local respawners={}

function spawn_unspawned_respawners()									--only creatures
	if TB3D_Modders.Global_Debug == true or TB3D_Modders.use_respawn_message == true then TB3D_Services.packet_alert("amk mod: spawn unspawned respawners") end
	local obj
	local oini
	local amk_name
	for a=first_object,last_object do									--first locate those already spawned
		obj = alife():object(a)
		if obj then
			oini = obj:spawn_ini()
			if oini:line_exist("respawn", "amk_name") == true then
				amk_name = nil
				amk_name = utils.cfg_get_string(oini, "respawn", "amk_name", false, false, false, false)
				if amk_name then
					respawners[amk_name]=true
					if TB3D_Modders.use_respawn_message == true then TB3D_Services.packet_alert("amk mod: respawner["..utils.to_str(amk_name).."] already exists") end
				end
			end
		end
	end
	local iniFileName = "scripts\\amk\\amk_respawns.ltx"				--then go through the list and spawn if needed
	local sini = ini_file(iniFileName)
	local dv={}
	local result, id, value = nil, nil, nil
	if iniLineSectionExist("default_values", iniFileName) then
		for a=0,iniLinesCount("default_values", iniFileName)-1 do
			result, id, value = getIniLine("default_values",a,"","", iniFileName)
			if id~=nil and amk.trim(id)~="" and amk.trim(id)~=nil then
				dv[amk.trim(id)]=amk.trim(value)
			end
		end
	end
	if iniLineSectionExist("amk_respawns", iniFileName) then
		local tmp={}
		local result, id, value = nil, nil, nil
		for a=0,iniLinesCount("amk_respawns", iniFileName)-1 do
			result, id, value = getIniLine("amk_respawns",a,"","", iniFileName)
			if id~=nil and amk.trim(id)~="" and amk.trim(id)~=nil then
				table.insert(tmp, amk.trim(id))
			end
		end
		local o
		local flag = false
		local t = {}
		local xyzlg = {}
		local pos = {}
		local respawner = nil
		local tbl = {}
		for k,v in pairs(tmp) do
			flag = getIniValueBool("amk_respawns", v, false, iniFileName)
			if not respawners[v] and flag==true then
				t = amk.parse_ini_section_to_array_new(iniFileName, v)
				xyzlg = amk.str_explode(",",t.xyzlg,true)
				pos = vector():set(tonumber(xyzlg[1]),tonumber(xyzlg[2]),tonumber(xyzlg[3]))
				respawner = amk.spawn_item("respawn",pos,tonumber(xyzlg[5]),tonumber(xyzlg[4]))
				tbl = amk.get_spawner_data(respawner)
				t.xyzlg = nil
				t.amk_name = v
				for kkk,vvv in pairs(dv) do
					if t[kkk]==nil then
						t[kkk]=vvv
					end
				end
				tbl.custom = amk.gen_custom_data({respawn=t})
				amk.set_spawner_data(tbl, respawner)
				se_respawn.reinit_spawner_params(respawner:name())
				if TB3D_Modders.use_respawn_message == true then TB3D_Services.packet_alert("amk mod: respawner["..utils.to_str(respawner:name()).."] done") end
				--amk.add_spot_on_map(respawner.id,"red_location", v)
				--amk.mylog("spawned respawn "..respawner.id)
			end
			if flag==false then
				o = se_respawn.get_respawner_by_name(v)
				if o then
					if TB3D_Modders.use_respawn_message == true then TB3D_Services.packet_alert("amk mod: respawner["..utils.to_str(v).."] released") end
					alife():release(o)
				end
			end
			t = {}
			xyzlg = {}
			tbl = {}
		end
	end
	sini = ""
	if TB3D_Modders.Global_Debug == true or TB3D_Modders.use_respawn_message == true then TB3D_Services.packet_alert("amk mod: spawn unspawned respawners done") end
end

--'*******************************************************************************
--'   **   **   **    **   **   **             OTHER            **   **   **   **   
--'*******************************************************************************
local last_armor_id=0
local last_condition=0

function repair_armor(val)
	local armor = db.actor:item_in_slot(6)
	if armor then
		last_armor_id=armor:id()
		last_condition=val
		armor:set_condition(val)
	end
end

function check_armor()
	local armor = db.actor:item_in_slot(6)
	local weapon = db.actor:item_in_slot(2)
	if db.actor:active_slot()==2 and weapon then
		local tmp
		if armor then 
			tmp = armor:section()
		else
			tmp = "none"
		end
		if (not string_find(tmp, "exo")) and weapon:section()=="wpn_m_134" then 
			db.actor:drop_item(weapon)
            news_manager.amk_send_tip_id("wpn-m_134-no_exo_message","sms_minigun",0,8,"gen_info")
		end
	end
	if not armor then
		last_armor_id=0
		return
	end
	if armor:id()~=last_armor_id then
		last_armor_id=armor:id()
		last_condition=armor:condition()
		return
	end
	if last_condition<armor:condition() then
		armor:set_condition(last_condition)
	else
		last_condition=armor:condition()
	end
end

function dezombify(id,v)
	local npc=level.object_by_id(id)
	if npc then
		if npc:alive()==false then
			return true
		end
		local sobj=alife():object(id)
		if sobj then
			TB3D_Services.set_community(npc, v.comm, 0, 0, false)
			--npc:set_character_community(v.comm,0,0)
			npc:set_goodwill(v.gw,db.actor)
			local orgtbl=amk.read_stalker_params(sobj)
			orgtbl.profile=string.gsub(orgtbl.profile,"(.*)_zombi","%1")
			-- amk.mylog("dezombified "..npc:name().." profile "..orgtbl.profile)
			amk.write_stalker_params(orgtbl,sobj)
			return true
		end    
	end
	return false
end

btrs_friends={}

function build_btrs_table(obj)					--called by amk on object spawn
	if obj and (IAmAStalker[obj:clsid()]
		and obj:character_community()=="military"
		and obj:alive())
		or obj:section()=="vehicle_btr" then
			btrs_friends[obj:id()] = obj:section()
	end
end

function firebated(obj, amount, local_direction, who, bone_index)
	if bone_index>0 and who and IAmAStalker[who:clsid()] then --false for otklcheniya
		local script
		if obj and IAmAMonster[obj:clsid()] then 
			script=bind_monster
		elseif obj and IAmAStalker[obj:clsid()] then
			script=xr_motivator
		end
		if script then
			local weapon = who:active_item()
			if not weapon or weapon:section()~="wpn_flame" then return end
			if string_find(obj:section(), "zomb") and obj.health<0.2 then obj:kill(obj) end
			script.play_particle(obj, {obj=obj, particle="amk\\flame", bone="bip01_spine1"})
		end
	end
end

local zombi_skeletons={
	"physics\\dead_body\\skelet_combine_pose_03",
	"physics\\dead_body\\skelet_combine_pose_04",
	"physics\\dead_body\\skelet_combine_pose_05",
	"physics\\dead_body\\skelet_torso"
	}
function zomby_blow(obj)
	if obj:object("wpn_flame") then
		amk_particle.amk_particle({
				particle="explosions\\explosion_fuelcan",
				pos=obj:position(),
				sound=[[weapons\t_rgd5_explosion]]
			})
		local dist = db.actor:position():distance_to(obj:position())
		if dist < 10 and db.actor:see(obj) then
			if TB3D_Modders.default_hit == true then
				TB3D_hit_styles.double_hit(dist)
			end
		end
		local obj_id = alife():object(obj:id())
		if obj_id then alife():release(obj_id) end
		return
	end
	if obj:section()=="zombie_blow" then
		amk_particle.amk_particle({
				particle="amk\\zomb_explode",
				pos=obj:position(),
				sound=[[anomaly\anomaly_body_tear_1]]
			})
		local dist = db.actor:position():distance_to(obj:position())
		if dist < 30 and db.actor:see(obj) then
			if TB3D_Modders.default_hit == true then
				TB3D_hit_styles.double_hit(dist)
			end
		end
		local skel = amk.spawn_item("breakable_object",obj:position(),obj:game_vertex_id(),obj:level_vertex_id())
		local t = amk.get_breakable_data(skel)
		t.visual = zombi_skeletons[math_random(#zombi_skeletons)]
		t.mass = 1.0
		t.physic_type = 3
		t.skeleton_flags = 1
		amk.set_breakable_data(t,skel)
		local obj_id = alife():object(obj:id())
		if obj_id then alife():release(obj_id) end
	end
end

function repair_weapon(st)
	local arr = amk.unpack_array_from_string(st)
	local oid = arr[1]
	local repbox_health = arr[2]
	local slot = arr[3]
	if alife():object(oid)==nil then
		local repair_coef = 0                                   
		local item_in_slot = db.actor:item_in_slot(slot)  
		if repbox_health==1 then                                 
			repair_coef=0.25                                           
		elseif repbox_health<1 then                       
			repair_coef=0.2                                         
		elseif repbox_health<0.8 then                       
			repair_coef=0.15                                            
		elseif repbox_health<0.6 then                        
			repair_coef=0.1                                         
		elseif repbox_health<0.4 then                        
			repair_coef=0.05         
		end	 
		--------------------------------------------------------------------------- 
		local rem
		if item_in_slot == nil then
			news_manager.amk_send_tip_id("rep_no_weapon_in_slot","sms_repbox",5, 20, "gen_info")
			rem = amk.spawn_item_in_inv("repbox_s"..slot)
			amk.start_timer("repbox_cond",0.1, {rem.id, repbox_health} )
		else
			if item_in_slot:condition()>0.95 then
				news_manager.amk_send_tip_id("rep_not_need","sms_repbox",5, 20, "gen_info")
				rem = amk.spawn_item_in_inv("repbox_s"..slot)
				amk.start_timer("repbox_cond",0.1, {rem.id, repbox_health} )
			else 
				if item_in_slot:condition()>=0.7 then
					item_in_slot:set_condition(item_in_slot:condition() + repair_coef)
					if repbox_health>0.3 then
						rem = amk.spawn_item_in_inv("repbox_s"..slot)
						amk.start_timer("repbox_cond",0.1, {rem.id, repbox_health-0.2} )
					end
				else
					news_manager.amk_send_tip_id("rep_need_big","sms_repbox",5, 20, "gen_inf0")
					rem = amk.spawn_item_in_inv("repbox_s"..slot)
					amk.start_timer("repbox_cond",0.1, {rem.id, repbox_health} )
				end
			end
		end
	end
end

function after_repair_weapon(st)
	local arr = amk.unpack_array_from_string(st)
	local oid = arr[1]
	local repbox_health = arr[2]
	local lobj = level.object_by_id(oid)
	if lobj then
		lobj:set_condition(repbox_health)
	end
end

function fake_weapon(st)
	monnoroch.fake_weapon(st)
end

function firebat_ammo()
	if TB3D_Modders.Global_Debug == true then TB3D_Services.packet_alert("AMK mod: firebat_ammo iterate inventory") end
	local ammo=db.actor:object("ammo_flame")
	if ammo then
		db.actor:iterate_inventory(
			function(dummy,item)
				if item:section()=="ammo_flame" then
					alife():release(alife():object(item:id()))
				end
			end
			, db.actor)
	end
	if TB3D_Modders.Global_Debug == true then TB3D_Services.packet_alert("AMK mod: firebat_ammo iterate inventory done") end
end

function set_ALD_weapons(stage)																		--only called on changing levels
	--TB3D_Services.packet_alert("AMK mod: ALD weapons stage["..utils.to_str(stage).."]")
	if stage < 1 then
		alife():create("wpn_vepr12", vector():set(-170.435,-5.000,-14.984),129483,2798)				--atp
		alife():create("wpn_vss_tk1", vector():set(-181.646,3.0,533.343),115055,3393)				--swmp
		alife():create("wpn_ump45_m1", vector():set(45.589,4.569,78.644),27321,3331)				--vil
		alife():create("wpn_fn2000_paratrooper", vector():set(-83.084,-4.00,-167.156),15083,3241)	--rf
		TB3D_Triggers.spawn_suit(10,63.897,67.413,20.685,6406,2417)									--exo, sarc fire above granter
		amk.save_variable("tb3d_ald_weapons", 1)
		--TB3D_Services.packet_alert("AMK mod: ALD weapons started")
	elseif stage == 1 then
		if has_alife_info("red_krovosos_spawn") and has_alife_info("red_polter_spawn") then
			TB3D_Triggers.tunnel_rat()																--spawn tunnel rat
			amk.save_variable("tb3d_ald_weapons", 2)												--start sequence
		end
		--stages 2, 3, 4 are used by tunnel rat sequence
	elseif stage == 5 then	--after tunnel rat
		if has_alife_info("tb3d_wish_granted") then
			TB3D_Triggers.spawn_suit(4,96.119,60.063,-3.729,6406,2417)								--sarc lower right fire
			amk.save_variable("tb3d_ald_weapons", 6)												--set for dyn spawn
		end
		--7 set in dyn spawn
	elseif stage == 7 then	--after wolves in sarc
		TB3D_Triggers.spawn_suit(9,66.507,57.808,51.132,6406,2417)									--scat, sarc girder far right
		--8 set in binder when suit taken
	--elseif stage == 8 then
	end
end