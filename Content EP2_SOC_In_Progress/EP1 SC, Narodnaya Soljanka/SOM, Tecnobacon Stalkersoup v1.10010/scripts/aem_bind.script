-- TB3D 1.1.0.0.1.0, added death hit, db calls, db.spawn_aem/destroy_aem, debug
function my_ver() return "1.1.0.0.1.0" end
-----------------------------------------------------------------------------------
local force_obinder = TB3D_Modders.use_aem_obinder				--110010, calls into game binder (alife)
if force_binder == nil then force_binder = true end

function bind_mob(obj)
	local new_binder = aem_mob_binder(obj)
	obj:bind_object(new_binder)
end

------------------------------------------------------------------------------------
class "aem_mob_binder" (object_binder)

function aem_mob_binder:__init(obj) super(obj)
	self.loaded = false
end 

function aem_mob_binder:reload(section)
	if force_obinder then object_binder.reload(self, section) end		--110010
end

function aem_mob_binder:reinit()
	if force_obinder then object_binder.reinit(self) end		--110010
	if self.object:clsid() ~= clsid.script_trader then								-- At the merchant does not support moving
		self.object:set_patrol_extrapolate_callback(aem_mob_binder.extrapolate_callback, self)
	end
	db.init_my_storage(self.object)
	self.st = db.storage[self.object:id()]
	self.object:set_callback(callback.patrol_path_in_point,	self.waypoint_callback, self)
	self.object:set_callback(callback.hit,			self.hit_callback,	self)
	self.object:set_callback(callback.death,		self.death_callback,	self)
end

function aem_mob_binder:update(delta)
	if _g.is_disconnecting then return end
	if TB3D_Modders.Global_Debug then TB3D_Services.info_alert("bind    arena: update["..game.get_game_time():timeToString(game.CTime.TimeToMilisecs).."] delta["..utils.to_str(delta).."]") end
	if force_obinder then object_binder.update(self, delta) end		--110010
	if self.object:clsid() == clsid.script_trader then	-- Trade Update
		trade_manager.update(self.object)
	end
	if self.object:alive() then
		if self.object:is_talk_enabled() then
			self.object:set_tip_text("character_use")
		else
			self.object:set_tip_text("")
		end
	else
		self.object:set_tip_text_default()
	end
	if self.st.active_section ~= nil then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta)
	end
	if TB3D_Modders.Global_Debug then TB3D_Services.info_alert("bind    arena: update["..game.get_game_time():timeToString(game.CTime.TimeToMilisecs).."] done") end
end

function aem_mob_binder:extrapolate_callback()
	local cur_pt = self.object:get_current_point_index()
	if self.object:get_script() == false then 
		return false
	end
	if patrol(self.object:patrol()):flags(cur_pt):get() == 0 then
		--printf("_bp: aem_mob_binder: extrapolate_callback: cur_pt = %d: true", cur_pt)
		return true
	end
	--printf("_bp: aem_mob_binder: extrapolate_callback: cur_pt = %d: false", cur_pt)
	return false
end

function aem_mob_binder:waypoint_callback(obj, action_type, index)
	if self.st.active_section ~= nil then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "waypoint_callback", obj, action_type, index)
	end
end

function aem_mob_binder:death_callback(victim, who)
	if TB3D_Services.use_combat_message then TB3D_Services.packet_alert("aem bind: death["..victim:name().."] by["..who:name().."]") end
	if who:id() == db.actor:id() then
		xr_statistic.addKillCount(self.object)
	end
	if self.st.mob_death then
		xr_logic.issue_event(self.object, self.st.mob_death, "death_callback", victim, who)
	end
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "death_callback", victim, who)
	end
	smart_terrain.on_death( self.object:id() )
	if TB3D_Modders.death_hit == true then TB3D_hit_styles.death_hit(victim, self.object) end	--' Draw little momentum forward.
	if TB3D_Services.use_combat_message then TB3D_Services.packet_alert("aem bind: death["..victim:name().."] done") end
end

function aem_mob_binder:hit_callback(obj, amount, local_direction, who, bone_index)
--	printf("HIT_CALLBACK: [%s] amount[%s]", obj:name(), amount)
	if self.st.hit then
		xr_logic.issue_event(self.object, self.st.hit, "hit_callback", obj, amount, local_direction, who, bone_index)
	end
end

function aem_mob_binder:net_spawn(sobject)
	if TB3D_Services.pop_spawn_message then TB3D_Services.packet_alert("aem bind: net spawn["..sobject:name().."]") end
	if force_obinder and not object_binder.net_spawn(self, sobject) then return false end		--110010
	self.object:add_restrictions("bar_arena_restrictor","")
	db.spawn_aem(self.object)    --109940
	xr_gulag.setup_gulag_and_logic_on_spawn( self.object, self.st, sobject, modules.stype_mobile, self.loaded )
	return true
end

function aem_mob_binder:net_destroy()
	--TB3D_Services.packet_alert("bind aem: net destroy")
	if TB3D_Modders.use_destroy_message then TB3D_Services.packet_alert("aem mob binder: net destroy["..utils.to_str(self.object:name()).."] section["..self.object:section().."]") end
	self.object:set_callback(callback.death,		nil)
	self.object:set_callback(callback.patrol_path_in_point, nil)
	self.object:set_callback(callback.hit,			nil)
	local st = db.storage[self.object:id()]
	if st and st.active_scheme then
		xr_logic.issue_event(self.object, st[st.active_scheme], "net_destroy")
	end
	db.destroy_aem(self.object)   --109940
	if force_obinder then object_binder.net_destroy(self) end		--110010
	if TB3D_Modders.use_destroy_message then TB3D_Services.packet_alert("aem mob binder: net destroy["..utils.to_str(self.object:name()).."] done") end
	--TB3D_Services.packet_alert("bind aem: net destroy done")
end 

function aem_mob_binder:reload(section)
	if force_obinder then object_binder.reload(self, section) end		--110010
	--printf("aem_mob_binder:reload(): self.object:name()='%s'", self.object:name())
end

function aem_mob_binder:net_save_relevant()
	--printf("aem_mob_binder:net_save_relevant(): self.object:name()='%s'", self.object:name())
	return true
end

function aem_mob_binder:save(packet)
	--TB3D_Services.packet_alert("aem_mob_binder:save(): saving obj = "..self.object:name())
	if force_obinder then object_binder.save(self, packet) end		--110010
	xr_logic.save_obj(self.object, packet)
	if self.object:clsid() == clsid.script_trader then
		trade_manager.save(self.object, packet)
	end
end

function aem_mob_binder:load(reader)
	self.loaded = true
	--TB3D_Services.packet_alert("aem_mob_binder:save(): loading obj = "..self.object:name())
	if force_obinder then object_binder.load(self, reader) end		--110010
	if reader:r_eof() then
		if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("aem_mob_binder load: SAVE FILE IS CORRUPT aem_mob_binder:save "..self.object:name()) end
		remove_zavis.remove_obj(self.object)
		if not self.object then
			return
		end
	end
	xr_logic.load_obj(self.object, reader)
	if self.object:clsid() == clsid.script_trader then
		trade_manager.load(self.object, reader)
	end
end