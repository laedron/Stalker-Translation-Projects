--TB3D 1.1.0.0.1.0 turret put/get packets, updated, prevent nil from xr_spawner, , clear callbacks
function my_ver() return "1.1.0.0.1.0" end
local force_obinder = TB3D_Modders.use_mgun_obinder				--110010, calls into game binder (alife)
if force_binder == nil then force_binder = true end

function bind(obj)
	local ini = obj:spawn_ini()
	if ini == nil or not ini:section_exist("logic") then
		if TB3D_Modders.use_abort_message == true then TB3D_Services.abort_alert("turret "..obj:name().." must have logic") end
	end
	obj:bind_object(turret_binder(obj, ini))
	--TB3D_Services.packet_alert("turret mgun: bind["..obj:name().."]")
end

class "turret_binder" (object_binder)

function turret_binder:__init(obj, ini) super(obj)
	self.ini = ini
	self.initialized = false
	self.loaded = false
end

function turret_binder:reinit()
	if force_obinder then object_binder.reinit(self) end			--110010
	db.init_my_storage(self.object)
	self.st = db.storage[self.object:id()]
	self.heli = self.object:get_helicopter()
	self.object:set_callback(callback.helicopter_on_hit, self.on_hit, self)
end

function turret_binder:update(delta)
	if _g.is_disconnecting then return end
	--TB3D_Services.packet_alert("turret mgun: update["..self.object:name().."]["..self.st.active_scheme.."]")
	if force_obinder then object_binder.update(self, delta) end					--110010
	if not self.initialized and db.actor ~= nil then
		xr_logic.initialize_obj(self.object, self.st, self.loaded, db.actor, modules.stype_heli)
		self.initialized = true
	end
	if self.st.active_section ~= nil then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta)
	end
	self:check_health()
end

function turret_binder:net_spawn(data)
	if force_obinder and not object_binder.net_spawn(self, data) then return false end			--110010
	self.se_obj = alife():object(self.object:id())
	self.heli:SetfHealth(self.se_obj.health)
	self.st.alive = self.se_obj.health > 0.005
	db.add_turret(self.object)
	--TB3D_Services.packet_alert("turret mgun: net spawn["..self.object:name().."]")
	return true
end

function turret_binder:net_destroy()
	--TB3D_Services.packet_alert("m turret: net destroy")
	if TB3D_Modders.use_destroy_message then TB3D_Services.packet_alert("turret binder: net destroy["..utils.to_str(self.object:name()).."] section["..self.object:section().."]") end
	self.object:set_callback(callback.helicopter_on_hit, nil)			--109990
	db.del_turret(self.object)
	if force_obinder then object_binder.net_destroy(self) end			--110010
	if TB3D_Modders.use_destroy_message then TB3D_Services.packet_alert("turret binder: net destroy["..utils.to_str(self.object:name()).."] done") end
	--TB3D_Services.packet_alert("m turret: net destroy done")
end

function turret_binder:net_save_relevant()
	return true
end

function turret_binder:save(packet)
	if force_obinder then object_binder.save(self, packet) end				--110010
	xr_logic.save_obj(self.object, packet)
end

function turret_binder:load(packet)
	if force_obinder then object_binder.load(self, packet) end			--110010
	xr_logic.load_obj(self.object, packet)
		--TB3D_Services.packet_alert("turret mgun: load["..self.object:name().."]")
end

function turret_binder:on_hit(power, impulse, hit_type, enemy_id)
	--TB3D_Services.packet_alert("turret mgun: on hit["..self.object:name().."]")
	--dbglog("hit: power=%f impulse=%f hit_type=%d enemy_id=%d health=%f",
	--power, impulse, hit_type, enemy_id, self.heli:GetfHealth())
	self.se_obj.health = self.heli:GetfHealth()
	local enemy = level.object_by_id(enemy_id)
	if enemy ~= nil and self.st.active_section ~= nil then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme],
				"hit_callback", self.object, power, nil, enemy, nil)
	end
end

function turret_binder:check_health()
	if self.st.alive and self.heli:GetfHealth() <= 0.005 then
		explode_turret(self.object)
	end
	--[[   add?
	if not self.st.alive and not heli:isVisible(db.actor) then
		--alife():release(se_obj)
		if checker_minefield.to_delete[self.object:id()] == nil then
			checker_minefield.to_delete[self.object:id()] = self.object:id()
		end
		--checker_minefield.to_delete[table.getn(checker_minefield.to_delete) + 1] = self.object:id()
	end
	]]--
end

function explode_turret(turret)
	local heli = turret:get_helicopter()
	heli:ClearEnemy()
	heli:Die()
	local se_obj = alife():object(turret:id())
	se_obj.health = 0
	db.set_obj_alive(turret, false)
	utils2.deferred_release(turret:id(), 5)
end


function is_friendly_turret(npc, turret, position)
    -- First find out whether the turret at all.
    if turret == nil then
        -- reference to the object no. Well, it happens, try
        -- identify by location.
		local test_position
        for k,v in pairs(db.turret) do
            test_position = v:position()
            if test_position.x == position.x and
               test_position.z == position.z then
                turret = v
                break
            end
        end
	end
    if turret and string.find(turret:section(), "turret_") then
		local community = db.storage[turret:id()].community
		if community and utils2.community_relation(community, npc) > -400 then
			--TB3D_Services.packet_alert("turret mgun: ["..turret:name().."] is friend["..npc:name().."][true]")
			return true
		end
		--TB3D_Services.packet_alert("turret mgun: ["..turret:name().."] is friend["..npc:name().."][false]")
	end
	return false
end

function create_turret(turret_section_name, level_name, position, community, owner_gulag, search_dist, hunt_actor_prob, explode_dist, spawner)
	local packet2 = utils2.packet_pool_get()	--returns empty packet if que empty, LIFO if not
	local packet1 = utils2.packet_pool_get()	--returns empty packet if que empty
	local level_vertex_id, game_vertex_id = utils2.get_top_graph_ids(level_name)
	local se_obj = alife():create(turret_section_name, position, level_vertex_id, game_vertex_id)
	if se_obj then
		if TB3D_Modders.turret_spots then level.map_add_object_spot_ser(se_obj.id, "alife_presentation_monstr", "Fixed: "..utils.to_str(turret_section_name)) end
		--TB3D_Services.info_alert("turret mgun: creating turret["..utils.to_str(turret_section_name).."] at["..utils.to_str(position.x)..":"..utils.to_str(position.y)..":"..utils.to_str(position.z).."] lv["..utils.to_str(level_vertex_id).."] gv["..utils.to_str(game_vertex_id).."]")
		local custom_data = "[logic]\nactive = turret\n[turret]\n"
		if community ~= nil then
			custom_data = custom_data.."community = "..community.."\n"
		end
		if owner_gulag ~= nil then
			custom_data = custom_data.."owner_gulag = "..owner_gulag.."\n"
		end
		if hunt_actor_prob ~= nil then
			custom_data = custom_data.."hunt_actor_prob = "..tostring(hunt_actor_prob).."\n"
		else
			custom_data = custom_data.."hunt_actor_prob = 50\n"
		end
		if search_dist ~= nil then
			custom_data = custom_data.."search_dist = "..tostring(search_dist).."\n"
		else
			custom_data = custom_data.."search_dist = 50\n"
		end
		if explode_dist ~= nil then
			custom_data = custom_data.."explode_dist = "..tostring(explode_dist).."\n"
		else
			custom_data = custom_data.."explode_dist = 1\n"
		end
		if spawner ~= nil then
			custom_data = custom_data.."[spawner]\ncond = "..spawner.."\n"
		end
		se_obj:STATE_Write(packet1)
		local dead_space = packet2:w_tell()
		-- cse_alife_dynamic_object
		utils2.packet_copy(packet2, packet1, 18)
		packet1:r_stringZ()
		packet2:w_stringZ(custom_data)
		utils2.packet_copy(packet2, packet1, 8)
		-- cse_visual
		packet2:w_stringZ(packet1:r_stringZ())
		utils2.packet_copy(packet2, packet1, 1)
		-- cse_motion
		packet2:w_stringZ(packet1:r_stringZ())
		-- cse_ph_skeleton
		packet2:w_stringZ(packet1:r_stringZ())
		utils2.packet_copy(packet2, packet1, 3)
		-- cse_alife_helicopter
		packet2:w_stringZ("idle")
		packet2:w_stringZ("$no_sound")
		-- se_turret_mgun
		packet2:w_float(1.0)
		se_obj:STATE_Read(packet2, packet2:w_tell() - dead_space)
		utils2.packet_pool_put(packet1)
		utils2.packet_pool_put(packet2)
	else
		TB3D_Services.info_alert("turret mgun: can't create turret["..utils.to_str(turret_section_name).."] at["..utils.to_str(position.x).."]["..utils.to_str(position.y).."]["..utils.to_str(position.z).."]")
	end
end

function create_dir_turret(turret_section_name, level_name, position, community, owner_gulag, search_dist, hunt_actor_prob, explode_dist, dirx, dirz, spawner)
	local packet2 = utils2.packet_pool_get()	--returns empty packet if que empty, LIFO if not
	local packet1 = utils2.packet_pool_get()	--returns empty packet if que empty
	local level_vertex_id, game_vertex_id = utils2.get_top_graph_ids(level_name)
	local se_obj = alife():create(turret_section_name, position, level_vertex_id, game_vertex_id)
	if se_obj then
		if TB3D_Modders.turret_spots then level.map_add_object_spot_ser(se_obj.id, "alife_presentation_monstr", "DIR: "..utils.to_str(turret_section_name)) end
		local custom_data = "[logic]\nactive = turret\n[turret]\n"
		if community ~= nil then
			custom_data = custom_data.."community = "..community.."\n"
		end
		if owner_gulag ~= nil then
			custom_data = custom_data.."owner_gulag = "..owner_gulag.."\n"
		end
		if hunt_actor_prob ~= nil then
			custom_data = custom_data.."hunt_actor_prob = "..tostring(hunt_actor_prob).."\n"
		else
			custom_data = custom_data.."hunt_actor_prob = 50\n"
		end
		if search_dist ~= nil then
			custom_data = custom_data.."search_dist = "..tostring(search_dist).."\n"
		else
			custom_data = custom_data.."search_dist = 50\n"
		end
		if explode_dist ~= nil then
			custom_data = custom_data.."explode_dist = "..tostring(explode_dist).."\n"
		else
			custom_data = custom_data.."explode_dist = 3\n"
		end
		if spawner ~= nil then
			custom_data = custom_data.."[spawner]\ncond = "..spawner.."\n"
		end
		se_obj:STATE_Write(packet1)
		local dead_space = packet2:w_tell()
		-- cse_alife_dynamic_object
		utils2.packet_copy(packet2, packet1, 18)
		packet1:r_stringZ()
		packet2:w_stringZ(custom_data)
		utils2.packet_copy(packet2, packet1, 8)
		-- cse_visual
		packet2:w_stringZ(packet1:r_stringZ())
		utils2.packet_copy(packet2, packet1, 1)
		-- cse_motion
		packet2:w_stringZ(packet1:r_stringZ())
		-- cse_ph_skeleton
		packet2:w_stringZ(packet1:r_stringZ())
		utils2.packet_copy(packet2, packet1, 3)
		-- cse_alife_helicopter
		packet2:w_stringZ("idle")
		packet2:w_stringZ("$no_sound")
		-- se_turret_mgun
		packet2:w_float(1.0)
		se_obj:STATE_Read(packet2, packet2:w_tell() - dead_space)
		utils2.packet_pool_put(packet1)
		utils2.packet_pool_put(packet2)
		---------------direction
		if dirx ~= nil and dirz ~= nil then
			se_obj.direction = vector():set(dirx, 0, dirz)
		else
			se_obj.direction = vector():set(-1, 0, 0)
		end
		---------------
	else
		TB3D_Services.info_alert("turret mgun: can't create dir_turret["..utils.to_str(turret_section_name).."] at["..utils.to_str(position.x).."]["..utils.to_str(position.y).."]["..utils.to_str(position.z).."]")
	end
end

-----------------------------------------------------------------------
class "se_turret_mgun" (cse_alife_helicopter)

function se_turret_mgun:__init(section) super(section)
	self.spawner_present = false
	self.health = 1.0
	self.direction = vector():set(0, 0, 0)
end

function se_turret_mgun:can_switch_offline()
	return cse_alife_helicopter.can_switch_offline(self)
end

function se_turret_mgun:can_switch_online()
	if self.health <= 0.005 then
		return false
	end
	if self.spawner_present == nil then
		local ini = self:spawn_ini()
		self.spawner_present = ini:section_exist("spawner")
	end
	if self.spawner_present == true then
		return cse_alife_helicopter.can_switch_online(self)
	end
	local is_switch = xr_spawner.check_spawn(self) or false
	--TB3D_Services.packet_alert("turret mgun: mgun can switch online {"..utils.to_str(is_switch).."]")
	return is_switch
end    

function se_turret_mgun:STATE_Read(packet, size)
	cse_alife_helicopter.STATE_Read(self, packet, size)
	self.health = packet:r_float()
	self.direction = packet:r_vec3()
end

function se_turret_mgun:STATE_Write(packet)
	cse_alife_helicopter.STATE_Write(self, packet)
	packet:w_float(self.health)
	packet:w_vec3(self.direction)
end